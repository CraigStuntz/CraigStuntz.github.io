<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Craig Stuntz's blog</title>
        <link>http://www.craigstuntz.com</link>
        <description><![CDATA[Craig Stuntz's blog]]></description>
        <atom:link href="http://www.craigstuntz.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 03 Aug 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>Telling the Truth About Security</title>
    <link>http://www.craigstuntz.com/posts/2020-08-03-telling-the-truth-about-security.html</link>
    <description><![CDATA[<div class="info">
    Posted on August  3, 2020
    
</div>

<p>In James Morrow’s wonderful novella <em>City of Truth,</em> people in the city of Veritas have been conditioned to tell the full, unvarnished truth in every situation. They drive a “Renaut Adequate,” send their children to Camp Ditch-the-Kids, and always pay their bar tabs. The warning on cigarette packs reads:</p>
<blockquote>
<p><font style="font-variant: small-caps">WARNING: The Surgeon General’s crusade against this product may distract you from the myriad ways your govenrment fails to protect your health.</font></p>
</blockquote>
<p>I think about this often in the context of security messaging for people who use the software we produce. Real warnings on cigarette packs are one of the few examples of honesty in packaging we have today, but that’s not good enough for Veritas.</p>
<p>What is the right amount of honesty for messaging to the end user? Clearly <em>dis</em>honesty is bad, but so is a dissertation-length discussion of encryption parameters. If our assessment of real-world threats creates an excessive paranoia in end users, convincing them that <abbr title="Advanced Persistent Threat">APT</abbr> crews are coming for their kids, then our “honesty” becomes dishonest. I would assert, without a lot of evidence to back me up, that the right amount of honesty is that which enables the user to make good decisions about their behaviors, <em>within the application’s threat model.</em></p>
<p>That “within the application’s threat model” hanging off the end is what allows me to say that things which are true but distracting should not be included in security messaging.</p>
<h2 id="want-to-start-an-email-service">Want to Start an Email Service?</h2>
<p>I was thinking about this in the context of some <a href="https://twitter.com/i/status/1286700216742293505">tweets from Nathan Buuck. He wrote</a>:</p>
<blockquote>
<p>I’m curious to sign up for an email service as a new user and see what they warn you about as a presumably-new email user. I imagine most services - especially those that want to keep you for ad revenue - don’t give you a full explainer for fear of scaring you off. Ethically, though, every new email user should be given a briefing about how:</p>
<ul>
<li>you can’t trust anything you see in email at face value</li>
<li>your digital identity will grow to depend existentially on this email account</li>
</ul>
<p>And the litany of other concerns.<br/> Failing to prepare new users by not illustrating to them the potential scope of the risks <em>we know</em> they may face is just negligence.</p>
</blockquote>
<p>Well, you can tell that these are good questions because there’s a ton to unpack here.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>One thing that’s interesting to me here is the difference between Nathan’s two bullet points. To whatever extent the first point is correct, it means that the security of the <em>email</em> service has failed. Whereas to whatever extent the second point is correct, it represents a failure of security that’s the fault of nearly everyone <em>but</em> the email service. I’ll explain more below.</p>
<p>Because the risk of compromise through email is so high, we’re at a real risk of erring on the side of over-explanation, especially if we try to explain it all at once, but even if we don’t. If we consider only email, only security, and only the items which all users need to understand,<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> that’s at least:</p>
<ul>
<li>Basic scam detection — if it looks too good to be true…</li>
<li>Phishing, credential harvesting</li>
<li>Spearphishing, and why not to wire money to your boss</li>
<li>Basic identity/password hygiene, multi-factor identification</li>
<li>Physical security — don’t go meet strangers you’ve corresponded with</li>
<li>Dark patterns in advertising</li>
<li>Common user misbehavior, such as chain emails</li>
</ul>
<p>This is a lot for a user who signs up in order to stay in touch with their kids to take in! But the security scope creep will start immediately, partially because of the actions of criminals, but partially also because of the decisions of the security community.</p>
<h3 id="when-should-we-explain-this">When Should We Explain This?</h3>
<p>I don’t think that during sign-up is the correct place for explaining what you can and can’t trust in an email. The right time to explain phishing is 30 seconds before you are phished. It’s not always clear when this will happen, but I think it’s fair to say that during the sign-up process is perhaps the <em>least</em> likely time that the user will be phished in email. Putting this in onboarding feels like a legal cop-out to me: “We told them; what else could we do?”</p>
<p>But there is a responsibility to explain this stuff at some point! The old model of an email client blindly displaying whatever you send it doesn’t reflect the reality of a hostile world. Today, for example, Gmail will tell you if someone you correspond with suddenly begins emailing you from a new address. Maybe it’s someone trying to spearphish you, or maybe it’s just JIRA. At any rate, such emails deserve extra scrutiny! Putting this on the suspicious email itself is a much better solution than putting an explanation on the screen during signup.</p>
<h3 id="what-do-we-ask-users-to-trust">What Do We Ask Users to Trust?</h3>
<p>Since Nathan’s question asks what email services display to new users, I’d like to reframe this point in terms of the service provider: What does an email service ask its users to (dis)trust?</p>
<p>When Nathan says, “Failing to prepare new users by not illustrating to them the potential scope of the risks we know they may face is just negligence,” he’s not wrong, but we have to be really careful about sentences like this, because they include risks both inside and outside the threat model of the service. For example, training is the <em>wrong approach</em> to the problem of “attachments in email might harm your computer.” The right approach is to make clicking on attachments in email safe, not relying on end users to make good security decisions 100% of the time.</p>
<p>Indeed, nearly every company has people in HR who must click on PDF files attached to emails from random strangers on the Internet as an essential function of their job! We can’t tell people “Hey, don’t do your job; it’s not safe.” We have to give them an email client where this mundane action is safe.</p>
<h4 id="example-phishing-simulations">Example: Phishing Simulations</h4>
<p>Implicit in the notion of what an email service should disclose to / train users about is the presumption that we even know what to tell them at all. Unfortunately, we cannot take this as a given.</p>
<p>Phishing simulation has become fairly big business these days. It makes sense, as phishing is often the attacker’s first foothold into an enterprise. It’s important to have clear goals for the phishing simulation, since, like a red team test, the attackers always win.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> If you conduct a phishing simulation and nobody is fooled, then your simulation was unlike an actual phish, which will probably result in users being deceived.</p>
<p>Therefore, if the purpose of your simulation is to determine if anyone will fall for a good phish, I can save you the money: Yes, they will. If you fire everyone who falls for the first phish, like some perverse form of stack ranking, then you’ll have more people who are taken in by the second. However, phishing simulations can be useful if you have constructive goals in mind.</p>
<blockquote>
<p>“Lets be honest with each other. Phishing simulations aren’t just about training. They are also popular because they produce a metric (e.g. ‘Last week 60% of people fell for our phish, this week only 35% fell for it’). It appears really positive and encouraging, since it appears to show that something is being achieved, but unless you’re careful you might just end up wasting time and effort.”<br/> <a href="https://www.ncsc.gov.uk/blog-post/trouble-phishing"><em>“The Trouble with Phishing,”</em></a> Kate R, National Cyber Security Centre, UK</p>
</blockquote>
<p>Here are some constructive goals we might set for a phishing simulation:</p>
<ul>
<li>Train users to send phishes to the <abbr title="Security Operations Center">SOC</abbr>, giving the blue team a heads up on what’s in the field</li>
<li>Train users how to respond if they click on a phish and enter their credentials. If we can train users to call the SOC immediately instead of keeping quiet and hoping nobody notices, that’s a big win!</li>
<li>Increase the level of end user skepticism about what’s in email. I feel a little weird about including this, since, as I said, the phishers will always win. But we can certainly make them win less if we treat this as proactive training, not punishment for people who click on a phish.</li>
</ul>
<p>Unfortunately, if you look at the promotion materials for phishing simulation software, they’re all graphs of “number of employees caught,” which suggests that security management is pursuing metrics instead of better security. This attitude is noticed by employees, who start to regard the security team as people who are out to “catch” them, because they are. If we train employees to distrust the security team, we have badly failied at our job.</p>
<p>This is a good example of why technical or legal controls are not enough to protect users of an email service. The training we give must be informed by human-centered, compassionate support for people. Running it by the corporate equivalent of an <a href="https://www.irb.pitt.edu/content/chapter-2-purpose-human-research-protection-office-and-institutional-review-board">IRB</a> would not be a bad idea. And we must repeat this introspection with every control on our list.</p>
<h3 id="your-identity-source-of-truth">Your Identity Source of Truth</h3>
<p>To Nathan’s second point, “your digital identity will grow to depend existentially on this email account,” well, that’s correct, but it’s interesting to note that this is not because of some technical factor which makes email the unique thing that is the only possible source of truth for identity, but rather because, in a nutshell, the entire industry has decided that email — and by “email” we mean Gmail, mostly — does security well, and therefore the source of truth for identity should be Gmail.</p>
<p>As evidence for this, consider that it was pretty common to use <a href="https://mashable.com/2017/06/16/twitter-two-factor-authentication-major-problem/">SMS as a source of truth for identity</a> until it became obvious that <a href="https://www.engadget.com/2020-01-12-princeton-study-sim-swap.html">SMS could not be trusted</a>. Services are moving away from SMS, and Gmail is the last thing standing. Even sites supporting MFA — a minority! — often use email as a portion of their password reset process.</p>
<p>This would be less of a security choke point if people always made a unique email address for each web account they created, but almost nobody does this. So if your email is compromised, Nathan is correct, the bad actors get every account you have, including retirement accounts (your life savings, uninsured), potentially embarassing accounts, etc.</p>
<p>It will be interesting to see if WebAuthn, which doesn’t require an email address and appears to be secure, has similar uptake in the future. It will also be interesting to see if the uptake of less secure email services will result in people moving away from email as the identity source of truth. The <a href="https://en.wikipedia.org/wiki/Yahoo!_data_breaches">Yahoo! breach</a> did not push developers away, though, probably because the other options were all worse.</p>
<h3 id="do-i-want-to-start-an-email-service-hell-no">Do I Want to Start an Email Service? Hell, No!</h3>
<p>One thing is very clear to me: When you start an email service, to whatever extent you’re successful and your service becomes popular, you are painting a giant target on your back and on the backs of your users. Your security team — meaning not just your blue team but also the people who work with human computer interaction in the security space — must be very good, the best people in the industry. If you don’t want to take that on, you have no business starting an email service.</p>
<p>One hip email service brags that they “engaged two separate, external security firms to review all our application security.” That simply doesn’t cut it; it’s laughably inadequate for the task at hand. How would hiring an external team protect users from a phishing attack? The problem of email security is just much larger than technical controls.</p>
<h2 id="leaving-veritas">Leaving Veritas</h2>
<p>In <em>City of Truth,</em> the protagonist, Jack Sperry, falls in with a group of (literally) underground rebels who sometimes lie. He meets his roommate, Ira Temple.</p>
<blockquote>
<p>Ira, I learned, was a typical dissembler-in-training. He hated Veritas. He had to get out. Anything, he argued, even dishonesty, was superior to what he called his native city’s confusion of the empirical with the true.</p>
</blockquote>
<p>I hope by now it’s clear why I don’t think it’s sufficient to “tell the truth” about security; we must have a more nuanced conversation which is not just at sign-up and continues throughout the user’s use of the service. It must always be informed by the amount of information a typical user can take in at any one point in time. “Confusion of the empirical with the true” describes a lot of mistakes we make in software.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I do think advertising is a red herring here. The two points in the tweets, while really worth discussing, don’t change with or without ads. Indeed, a very well-known email service with ads also does a better than average job identifying what you can or cannot trust in email. I think ads are orthogonal to these questions.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>By “only email” I mean to exclude things like encryption which are security-related but not directly relevant to basic email use. By “only security” I’m excluding things like how to compose and send emails, which are really important for new users, but out of scope for this article. By “only the items which all users need to understand” I’m excluding things such as nation state attacks, which are security related and relevant to email, but not something that the average user needs to think about.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Nobody, and I mean nobody, is immune to phishing. The organizer of the DEFCON Social Engineering Village recently <a href="https://youtu.be/9e6k_PtEXdM?t=566">shared his story of getting phished</a>.<a href="#fnref3">↩</a></p></li>
</ol>
</div>

<div class="info">
    
    Tags: <a href="/tags/human%20factors.html">human factors</a>, <a href="/tags/James%20Morrow.html">James Morrow</a>, <a href="/tags/security.html">security</a>
    
</div>
]]></description>
    <pubDate>Mon, 03 Aug 2020 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2020-08-03-telling-the-truth-about-security.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Equality Is Hard</title>
    <link>http://www.craigstuntz.com/posts/2020-03-09-equality-is-hard.html</link>
    <description><![CDATA[<div class="info">
    Posted on March  9, 2020
    
</div>

<p>As the joke goes, there are two hard problems in computer science: cache invalidation and naming things.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> But I’d suggest there’s a much harder problem, namely, <code>=</code>. Did you miss it? The equals sign, <code>=</code>, is small, but I’m going to argue that the use and misuse of equals is at the root of a large number of problems in software engineering.</p>
<h2 id="how-equality-should-work">How Equality Should Work</h2>
<p>I am going to show how equality in programming languages is often broken. But before I can do that, I have to talk about how it <em>should</em> work, and it turns out that’s not simple! When we talk about how equality “should work,” we have to say what this means in a certain context, because it turns out there are lots of different ways that equality <em>can</em> work, and many of them are valid in different contexts.</p>
<blockquote>
<p><em>The heart and soul of mathematics consists of the fact that the “same” objects can be presented to us in different ways.</em> <br/> -Barry Mazur, <a href="http://people.math.harvard.edu/~mazur/preprints/when_is_one.pdf">When is one thing equal to some other thing</a></p>
</blockquote>
<h3 id="laws">Laws</h3>
<p>Now I said that we can have different definitions of equality in different contexts, but despite this there are some things which should always be true. These are the laws of equality.</p>
<p>Equals is a <strong>binary relation</strong><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> that is:</p>
<ul>
<li><strong>Reflexive</strong>, so that <code>a = a</code> for all values of <code>a</code>.</li>
<li><strong>Symmetric</strong>, so that <code>a = b</code> implies <code>b = a</code> and vice versa.</li>
<li><strong>Transitive</strong>, so that if <code>a = b</code> and <code>b = c</code> then <code>a = c</code></li>
</ul>
<p>In the programming world, we need to add a law, because programmers do weird things sometimes:</p>
<p>Equals must be:</p>
<ul>
<li><strong>Consistent</strong>, so that if <code>a = b</code> and no field changes on <code>a</code> or <code>b</code>, <code>a = b</code> will still be true if we check it later on.</li>
</ul>
<p>The above seems simple enough, although popular programming languages manage to screw up even those trivial rules. But there are more concerns about equality which are harder to state quite so concisely.</p>
<h3 id="structural-equality">Structural Equality</h3>
<p>One difference in how programming languages implement equality is structural equality and reference equality.</p>
<p><strong>Structural equality</strong> asks if two references are <em>the same value.</em> This is the default in F#:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> MyString = { SomeField : <span class="dt">string</span> }
<span class="kw">let</span>  a = { SomeField = <span class="st">&quot;Some value&quot;</span> }
<span class="kw">let</span>  b = { SomeField = <span class="st">&quot;Some value&quot;</span> }
<span class="kw">if</span> a = b <span class="kw">then</span> //<span class="co"> returns true, enters &quot;then&quot; block</span></code></pre></div>
<p>This is <em>not</em> true in C#; C# uses <strong>reference equality</strong>. Reference equality asks if the two objects being compared are the same object. In other words, does the variable point at the same area of memory? A reference to two different blocks of memory will be unequal even if their contents are identical:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">class</span> MyString {
    <span class="kw">private</span> <span class="kw">readonly</span> <span class="dt">string</span> someField;
    <span class="kw">public</span> <span class="dt">string</span> SomeField { <span class="kw">get</span>; }
    <span class="kw">public</span> <span class="fu">MyString</span>(<span class="dt">string</span> someField) =&gt; <span class="kw">this</span>.<span class="fu">someField</span> = someField;
}
<span class="dt">var</span> a = <span class="kw">new</span> <span class="fu">MyString</span>(<span class="st">&quot;Some value&quot;</span>);
<span class="dt">var</span> b = <span class="kw">new</span> <span class="fu">MyString</span>(<span class="st">&quot;Some value&quot;</span>);
<span class="kw">if</span> (a == b) { <span class="co">// returns false, does not enter block</span></code></pre></div>
<p>Other languages let you choose. Scheme, for example, provides <code>equal?</code> to check structural equality and <code>eq?</code> to check reference equality. Kotlin provides <code>==</code> for structural equailty and <code>===</code> for reference equality (don’t confuse these with JavaScript’s <code>==</code> and <code>===</code> operators which are… something else entirely).</p>
<p>When does it make sense to use structural equality in your programs? In the absence of mutation (changing the values of variables), nearly always! Most programming languages that I’m aware of do structural comparisons on value types such as <code>integers</code>. Well, except Java, which has confused generations of programmers with an <code>int</code> value type which does a structural comparison and an <code>Integer</code> reference type which, well, the best thing you can say is <a href="https://stackoverflow.com/questions/1700081/why-is-128-128-false-but-127-127-is-true-when-comparing-integer-wrappers-in-ja">don’t use == on Integer</a>. Python <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">has similar issues with <code>is</code></a>.</p>
<p>Structural comparison of reference types such as objects makes sense as well. Consider a unit test, where you want to check that the object returned is equal to the value you expected. In a language with structural equality, this is trivial:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">[&lt;TestMethod&gt;]
<span class="kw">let</span> ``The result <span class="kw">of</span> the calculation is the expected value``() = 
    <span class="kw">let</span> expected = { SomeField = <span class="st">&quot;Some value&quot;</span>; SomeOtherField = <span class="dv">15</span>; StillAnotherField = <span class="kw">true</span>; ... }
    <span class="kw">let</span> actual = calculate()
    Assert<span class="kw">.</span>AreEqual(expected, actual)</code></pre></div>
<p>When a language does not have structural equality from the outset, developers will try to build it <em>ad hoc,</em> and you end up with <a href="https://github.com/nunit/nunit/blob/4e10f475d88fec980f080461a64e6fc4b1e54b2b/src/NUnitFramework/framework/Constraints/NUnitEqualityComparer.cs#L133">this horror show</a>, which is now <a href="https://github.com/nunit/nunit/issues/1249">permanently part of the NUnit framework</a>.</p>
<h3 id="reference-equality">Reference Equality</h3>
<p>But as I hinted above, there are certainly cases where structural equality does not make sense. One example is with languages which support mutation of variables, which is most of them.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> When you can change the value of a variable, it probably does not make sense to say that variable is equal to some other variable, <em>in general.</em> Sure, you can say they’re (structurally) equal <em>as of a moment in time,</em> such as in last line of a unit test, but you can’t generally imply that they’re the same. This is a kind of subtle point, so let’s look at an example.</p>
<p>Let’s say I have an object which represents a person. In F#, with structural equality, I can write:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> Person = { Name : <span class="dt">string</span>; Age : integer; Offspring : Person list }</code></pre></div>
<p>Now I have two friends, Jane and Sue. Both have a son named John, who is 15. They’re <em>different</em> people, but the sons have the same name and age. No problem!</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> jane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }
<span class="kw">let</span> sue  = { Name = <span class="st">&quot;Sue&quot;</span>;  Age = <span class="dv">35</span>; Offspring = [ { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }</code></pre></div>
<p>I could also have written this:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> john = { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] };
<span class="kw">let</span> jane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ john ] }
<span class="kw">let</span> sue  = { Name = <span class="st">&quot;Sue&quot;</span>;  Age = <span class="dv">35</span>; Offspring = [ john ] }</code></pre></div>
<p>The behavior of these two blocks is precisely the same. I can’t distinguish the two sons, even though I know they’re different people. That’s OK! If I needed to distinguish them, I could add a hash of their DNA or something to my <code>Person</code> type. But if I just need to know their name and age, it doesn’t matter if I can distinguish the two objects or not, because the values are the same, no matter how you slice it.</p>
<p>Imagine Jane’s son changes his name to Pat. F# doesn’t support mutating the values of variables, so I need to make a new <code>Person</code> instance for John <em>and Jane:</em></p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> newJane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ { Name = <span class="st">&quot;Pat&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }</code></pre></div>
<p>It seems weird to have a new variable, <code>newJane</code>, but in practice it doesn’t create a problem. The code above is fine. Now let’s try this in C#, a language which is mutable by default:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">var</span> john = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>);
<span class="dt">var</span> jane = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Jane&quot;</span>, <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { john });
<span class="dt">var</span> sue  = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Sue&quot;</span>,  <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { john });</code></pre></div>
<p>Well, this code is clearly incorrect: If Jane’s son changes his name to “Pat”, I can change the reference directly:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs">jane.<span class="fu">Offspring</span>.<span class="fu">First</span>().<span class="fu">Name</span> = <span class="st">&quot;Pat&quot;</span>;</code></pre></div>
<p>But I’ll find that Sue’s son’s name has changed as well! Therefore, even though the two sons had the same values at the start, before he changed his name, they <em>were not equal!</em> I should have written:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">var</span> jane = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Jane&quot;</span>, <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>) });
<span class="dt">var</span> sue  = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Sue&quot;</span>,  <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>) });</code></pre></div>
<p>…so that Jane and Sue’s offspring were reference <em>unequal</em> to each other. So reference equality is a sensible default in a language which supports mutation.</p>
<p>Another case where reference equality makes sense is when you know it’s going to give the same result as structural equality anyway. There is a certain performance overhead for testing structural equality, which is reasonable if you <em>actually need to test structural equality.</em> But if, for example, you create a large number of objects which you know are all different structually, it doesn’t make sense to pay the overhead of testing structural equality when you know that testing reference equality alone would give the same result.</p>
<h3 id="equivalent-representations">Equivalent Representations</h3>
<p><em>In the real numbers,</em> <a href="https://en.wikipedia.org/wiki/0.999...">.999… (repeating infinitely) equals 1</a>. Note that the “real numbers” here are distinct from the “Real” type in your programming language. Real numbers in math are infinite, and real numbers in your programming language are finite. So there is no notion of .999… in your programming language, but that’s OK, because you can just use 1, which is the same value.</p>
<p>This is, essentially, a choice that mathematicians made when formulating the real number system. If one <a href="https://betterexplained.com/articles/a-friendly-chat-about-whether-0-999-1/">adds other objects, such as infinitessimals, to the system</a>, then .999… and 1 are not equivalent.</p>
<blockquote>
<p><em>However, it is by no means an arbitrary convention, because not adopting it forces one either to invent strange new objects or to abandon some of the familiar rules of arithmetic.</em> <br/> -Timothy Gowers, <em>Mathematics: A Very Short Introduction</em><a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></p>
</blockquote>
<p>Similarly, in the rational numbers, 1/2 and 2/4 represent the same value.</p>
<p>Do not confuse these equivalances with the “loose” equivalence operator <code>==</code> found in JavaScript and PHP. Unlike those operators, these equivalences follow the laws of equality. It is important to realize that equal objects can be represented differently.</p>
<p>In IEEE-754 floats, <code>-0 = 0</code>.</p>
<h3 id="intensional-vs.extensional-equality">Intensional vs. Extensional Equality</h3>
<p>When is some function equal to some other function? Most programming languages will happily do a reference <code>=</code> comparison, and I suppose that’s fine, but what would a structural equality comparison of a function even mean? Well, if we could use reflection to look into the implementation of the function, and see if it does the same thing? But what is “the same?” Would it have to have the same variable names? Are a quicksort and a merge sort “the same function?”</p>
<p>Cutting to the chase, we say that functions are extensionally equal if they return the same outputs for the same inputs (regardless of internal implementation), and intensionally equal if their internal definition is the same. Of course, this is context-dependent. There may be a context where I need a constant time function and another context where the speed of the function doesn’t matter. The important point is I need to have some context for equality and use it to compare the two functions.</p>
<p>I don’t know of any programming language which even attempts to do anything beyond reference equality for functions. But it’s easy to come up with examples where it would be useful! (An optimizer which removes duplicate code, e.g.) You’re on your own if you need this, but I have to say that not shipping an equals comparison is preferable to shipping one that’s broken.</p>
<h3 id="equality-vs.assignment">Equality vs. Assignment</h3>
<p>One of the first lessons we learn when becoming a programmer is that there are two different concepts which we both call “equals.” One is assignment, the other is testing equality. In JavaScript, these look like:</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">const</span> aValue <span class="op">=</span> <span class="at">someFunction</span>()<span class="op">;</span> <span class="co">// Assignment</span>
<span class="cf">if</span> (aValue <span class="op">===</span> <span class="dv">3</span>) <span class="op">{</span>            <span class="co">// Test for equality</span></code></pre></div>
<p>These are fundamentally different. Comparison returns a boolean; assignment, in an <a href="https://en.wikipedia.org/wiki/Expression-oriented_programming_language">expression-oriented</a> language such as Ruby, returns the value assigned.</p>
<p>So we can write Ruby code like this:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">a = b = c = <span class="dv">3</span></code></pre></div>
<p>Which does indeed assign 3 to the variables <code>a</code>, <code>b</code>, and <code>c</code>. Don’t try it with a reference type, though; it probably won’t do what you want!<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a></p>
<p>In a <a href="https://fsharpforfunandprofit.com/posts/expressions-vs-statements/">non-expression-oriented language like C#</a>, assignment doesn’t return anything.</p>
<p>In math, we use the equals operator for both assignment and testing equality:</p>
<div class="sourceCode"><pre class="sourceCode tex"><code class="sourceCode latex">if aValue = 3 ... 
where aValue = someFunction()</code></pre></div>
<p>(And <code>=</code> is sometimes used for other relations in math, such as <a href="http://mathworld.wolfram.com/Congruence.html">congruence</a>. As with all things in math, context matters; you have to carefully consider what <code>=</code> might mean in a certain paper or book.)</p>
<p>Why does math not require two separate operators whereas programming languages do? You can tell from context which one is intended, and not <em>all</em> programming languages require different operators. F#, for example, uses <code>=</code> for both assignment and testing equality. Despite overloading <code>=</code>, assignment and testing equality are <em>different</em> operations.</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> aValue = someFunction(); //<span class="co"> Assignment</span>
<span class="kw">if</span> aValue = <span class="dv">3</span> <span class="kw">then</span>           //<span class="co"> Test for equality</span></code></pre></div>
<p>The choice of syntax is partially due to heritage: F# is based on ML, which is based on math, and JavaScript syntax is based on Java -&gt; C -&gt; Algol -&gt; FORTRAN.</p>
<p>FORTRAN had to compile on <a href="https://en.wikipedia.org/wiki/Fortran#/media/File:IBM_704_mainframe.gif">machines</a> where distinguishing these two cases from code syntax would be genuinely challenging, so it made sense to have two different operators. Then C took this “feature” to a high art, allowing code like:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> aValue = someFunction(); <span class="co">// Assignment</span>
<span class="cf">if</span> (aValue = <span class="dv">3</span>) {            <span class="co">// Also assignment!</span></code></pre></div>
<p>This code, for those without previous C experience, overwrites <code>aValue</code> with <code>3</code> and then, since the expression <code>aValue = 3</code> is equal to 3, the <code>if</code> test returns <code>TRUE</code> and execution continues inside the <code>if</code> block. This is frequently an error, leading many C programmers to reverse the values inside an <code>if</code> block out of habit to avoid making the mistake:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> aValue = someFunction(); <span class="co">// Assignment</span>
<span class="cf">if</span> (<span class="dv">3</span> == aValue) {           <span class="co">// Test for equality</span>

<span class="co">// [...]</span>

<span class="cf">if</span> (<span class="dv">3</span> = aValue) {            <span class="co">// Syntax error: Cannot assign aValue to 3.</span></code></pre></div>
<h2 id="how-equality-should-not-work">How Equality Should Not Work</h2>
<p>I hope I’ve shown by now that equality is <em>not</em> simple, and that the “correct” implementation of equality can vary depending upon context. Despite that, programming languages often get the simple parts wrong! Very often, this is caused by the <em>combination</em> of equality with other language features, such as implicit type conversion.</p>
<h3 id="common-mistake-equality-isnt-reflexive">Common Mistake: Equality Isn’t Reflexive</h3>
<p>Recall that the reflexive law of equals requires all values to be equal to themselves, <code>a = a</code>.</p>
<p>In .NET, if you call <code>Object.ReferenceEquals()</code> on a value type, the arguments are <em>separately</em> boxed before the method runs, so it returns false even if you pass <em>the same instance:</em></p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.referenceequals?view=netframework-4.8">From the docs</a>:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">int</span> int1 = <span class="dv">3</span>;
Console.<span class="fu">WriteLine</span>(Object.<span class="fu">ReferenceEquals</span>(int1, int1)); <span class="co">// Prints False</span></code></pre></div>
<p>This means it is not necessarily true that <code>a = a</code> in any .NET language, so the reflexive law is broken.</p>
<p>In SQL, <code>NULL</code> is not equal to itself, so the expression <code>NULL = NULL</code> (or, more probably, <code>SOME_EXPRESSION = SOME_OTHER_EXPRESSION</code> when both of them might be <code>null</code>) will return <code>NULL</code>, which is falsy. This leads to messes like:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">WHERE</span> (SOME_EXPRESSION = SOME_OTHER_EXPRESSION)
  <span class="kw">OR</span> (SOME_EXPRESSION <span class="kw">IS</span> <span class="kw">NULL</span> <span class="kw">AND</span> SOME_OTHER_EXPRESSION <span class="kw">IS</span> <span class="kw">NULL</span>)</code></pre></div>
<p>Or, more likely, just a bug where the developer forgot about the special rules for <code>NULL</code>. If your DB server’s SQL dialect supports <a href="https://modern-sql.com/feature/is-distinct-from"><code>IS NOT DISTINCT FROM</code></a> then this does what <code>=</code> should do. (Or should I say it does <code>NOT</code> not do what <code>=</code> should do?) Otherwise you’ll just have to live with SQL like the above. The best fix is to make your columns non-nullable when possible.</p>
<p>This is <a href="https://stackoverflow.com/a/1573715/7714">also true of IEEE-754 floats</a>; the standard states that <code>NaN != NaN</code>. A different explanation than the one given in the link for this is that “NaN” represents some unspecified “non-number” result, not necessarily the <em>same</em> unspecified non-number result as that of a different calculation, so it’s incorrect to compare them. For example, <code>square_root(-2)</code> and <code>infinity/infinity</code> are both <code>NaN</code>, but they’re clearly not the same! Similar explanations are given for SQL’s <code>NULL</code> sometimes. One problem with this is that it makes the term very overloaded: Is <code>NaN</code> and <code>NULL</code> an <em>unknown</em> or <em>imprecise</em> value or the known <em>absence</em> of a value?</p>
<p>One way of handling such situations, which do not occur in routine floating point calculations, would be a <a href="https://en.wikipedia.org/wiki/Union_type">union type</a>. In F#, one could write:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> MaybeFloat = 
    | Float          <span class="kw">of</span> <span class="dt">float</span>
    | Imaginary      <span class="kw">of</span> real: <span class="dt">float</span> * imaginary: <span class="dt">float</span>
    | Indeterminate
    | //<span class="co">/ ...    </span></code></pre></div>
<p>… and then you could handle these terms appropriately in calculations which needed them. Use a <a href="https://en.wikipedia.org/wiki/NaN#Signaling_NaN"><em>signaling</em> NaN</a> to throw an exception in calculations which you don’t expect will have NaNs at all.</p>
<p>Rust offers the <a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">Eq</a> and <a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq</a> traits. Not implementing <code>Eq</code> is supposed to be a signal that <code>==</code> is not reflexive, and floating point types in Rust do not implement it. But if you don’t implement <code>Eq</code>, you can still call <code>==</code> in your code. Implementing <code>Eq</code> allows your object to be used as a key in a hash map and possibly results in behavior changes in other places as well.</p>
<p>But there are even more significant problems with <code>=</code> and floats.</p>
<h3 id="common-mistake-equals-is-too-precise">Common Mistake: Equals Is <em>Too</em> Precise</h3>
<p>I guess many developers are familiar with the problem of comparing IEEE-754 floating point numbers, which are the “float” or “double” implementation for most programming languages. <code>10 * (0.1)</code> does not equal <code>1</code>, because “0.1” is actually equal to <code>0.100000001490116119384765625</code> or <code>0.1000000000000000055511151231257827021181583404541015625</code>. If you’re not familar with this issue, you can <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">go read about it</a>, but the point is that it’s rarely safe to do an <code>==</code> comparison on a floating point number at all! You have to ask yourself which digits are significant and compare accordingly.</p>
<p>(Worse, the float type backs other types, such as <code>TDateTime</code> in <a href="http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/delphivclwin32/System_TDateTime.html">some languages</a>, so even in cases where equality comparisons might <em>make sense,</em> they don’t necessarily <em>work.</em>)</p>
<p>The correct method of comparing floating point numbers is to see if they’re “close,” and <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">what “close” means varies depending on context</a>. It’s not something you can cram into a <code>==</code> operator. If you find yourself doing this a lot (say, once), you might consider using a different data type, such as a fixed precision decimal number.</p>
<p>So why do programming languages offer <code>==</code> comparisons on a type when they can’t support it? Well, because they offer <code>==</code> on <em>every</em> type, it works on most of them, and they just shrug about the rest and chastize programmers for not knowing which language feature they should not use.</p>
<p>Not every programming language, mind you. Standard ML doesn’t offer <code>=</code> comparisons on reals. It’s a compiler error if you try!</p>
<p>The <a href="http://sml-family.org/Basis/real.html">implementation notes</a> state:</p>
<blockquote>
<p>Deciding if <code>real</code> should be an equality type, and if so, what should equality mean, was also problematic. IEEE specifies that the sign of zeros be ignored in comparisons, and that equality evaluate to false if either argument is NaN. These constraints are disturbing to the SML programmer. The former implies that <code>0 = ~0</code> is true while <code>r/0 = r/~0</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> is false. The latter implies such anomalies as <code>r = r</code> is false, or that, for a <code>ref cell rr</code>, we could have <code>rr = rr</code> but not have <code>!rr = !rr</code>. We accepted the unsigned comparison of zeros, but felt that the reflexive property of equality, structural equality, and the equivalence of <code>&lt;&gt;</code> and <code>not o =</code> ought to be preserved. Additional complications led to the decision to not have <code>real</code> be an equality type.</p>
</blockquote>
<p>By blocking <code>=</code> for reals, SML forces the developer to think about what kind of comparison they actually need, which is a great feature, I think!</p>
<p>F# offers the <code>[&lt;NoEquality&gt;]</code> attribute to mark custom types where <code>=</code> should not be used. Pity they didn’t mark the <code>float</code> type with it!</p>
<h3 id="common-mistake-equals-isnt">Common Mistake: “Equals” Isn’t</h3>
<p>PHP has two separate operators, <code>==</code> and <code>===</code>. The <a href="https://www.php.net/manual/en/language.operators.comparison.php">documentation for <code>==</code></a>, which is named “Equal,” states, “<strong>TRUE</strong> if <code>$a</code> is equal to <code>$b</code> after type juggling.” Unfortunately, this means that the <code>==</code> operator is unreliable:</p>
<div class="sourceCode"><pre class="sourceCode php"><code class="sourceCode php"><span class="kw">&lt;?php</span>
  <span class="fu">var_dump</span><span class="ot">(</span><span class="st">&quot;608E-4234&quot;</span> == <span class="st">&quot;272E-3063&quot;</span><span class="ot">);</span> <span class="co">// true</span>
<span class="kw">?&gt;</span></code></pre></div>
<p>Although we’re comparing <em>strings</em> here, PHP sees that they can be converted to a number, so it does. The numbers turn out to be very small (the first argument, for example, is 608 * 10<sup>-4234</sup>), and, as we’ve already discussed, comparing floating point numbers is hard. Casting both of these to a <code>float(0)</code> results in rounding them to equal values, so the comparison returns true.</p>
<p>Note this is different than the behavior of JavaScript, which also has similar (but not the same!) <code>==</code> and <code>===</code> operators; JavaScript would see that both sides are strings and return false for this comparison.</p>
<p>Fortunately, PHP has the <code>===</code> (“Identical”) operator, which behaves correctly in this case. I would say never use <code>==</code>, but <code>==</code> <a href="https://www.php.net/manual/en/language.oop5.object-comparison.php">does a structural comparison on objects</a>, which might be something you want! Instead, I’ll say: Use extreme caution with <code>==</code>, because it’s broken on primitive types.</p>
<h3 id="common-mistake-equality-isnt-symmetric">Common Mistake: Equality Isn’t Symmetric</h3>
<p>If you override <code>.equals()</code> in Java, it is <em>your responsibility</em> to ensure that the laws of equality hold!</p>
<p>It is <em>very easy</em> to implement a comparison which is not symmetric, that is, <code>a.equals(b) != b.equals(a)</code>, if you’re not paying attention.</p>
<p>Even if we remove null from the picture (because it would be a <code>NullPointerException</code> in one case and the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">contract for <code>.equals()</code> allows you to do this</a>), if you subtype a class and override <code>.equals()</code> then you had better be careful!</p>
<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="at">@Override</span>
<span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">equals</span>(<span class="bu">Object</span> o) {
    <span class="kw">if</span> (<span class="kw">this</span> == o)
        <span class="kw">return</span> <span class="kw">true</span>;
    <span class="kw">if</span> (o == <span class="kw">null</span>)
        <span class="kw">return</span> <span class="kw">false</span>;
    <span class="kw">if</span> (!o.<span class="fu">getClass</span>().<span class="fu">isAssignableFrom</span>(<span class="fu">getClass</span>())) <span class="co">// Danger! This is a mistake!</span>
        <span class="kw">return</span> <span class="kw">false</span>;
    ThisClass thisClass = (ThisClass) o;
    <span class="co">// field comparison</span>
    <span class="co">// ...</span>
}</code></pre></div>
<p>If <code>ThisClass</code> and <code>ASubtypeOfThisClass</code> both override <code>.equals()</code> with code like this, <code>a.equals(b)</code> may not equal <code>b.equals(a)</code>! The correct comparison would be:</p>
<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java">    <span class="kw">if</span> (<span class="fu">getClass</span>() != o.<span class="fu">getClass</span>())
        <span class="kw">return</span> <span class="kw">false</span>;</code></pre></div>
<p>This is not just my opinion; the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">contract for <code>Object.equals()</code> requires it</a>.</p>
<h3 id="common-mistake-equality-isnt-transitive">Common Mistake: Equality Isn’t Transitive</h3>
<p>Remember one of the laws for equals comparisons is that they should be transitive; if <code>a = b</code> and <code>b = c</code> then <code>a = c</code>. Unfortunately, when coupled with type coersion, languages often fail at this.</p>
<p>In JavaScript,</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&#39;&#39;</span> <span class="op">==</span> <span class="dv">0</span><span class="op">;</span>      <span class="co">// true</span>
<span class="dv">0</span>  <span class="op">==</span> <span class="st">&#39;0&#39;</span><span class="op">;</span>    <span class="co">// true</span>
<span class="st">&#39;&#39;</span> <span class="op">==</span> <span class="st">&#39;0&#39;</span><span class="op">;</span>    <span class="co">// false!</span></code></pre></div>
<p>Never use <code>==</code> in JavaScript. Use <code>===</code> instead.</p>
<h3 id="common-mistake-equality-is-inconsistent">Common Mistake: Equality Is Inconsistent</h3>
<p>In Kotlin, <code>==</code> returns different values depending on the type of the variable, even for the same variable:</p>
<div class="sourceCode"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span class="kw">fun</span> <span class="fu">equalsFloat</span>(<span class="va">a</span>: <span class="dt">Float</span>, <span class="va">b</span>: <span class="dt">Float</span>) {
  println(a == b);
}

<span class="kw">fun</span> <span class="fu">equalsAny</span>(<span class="va">a</span>: <span class="dt">Any</span>, <span class="va">b</span>: <span class="dt">Any</span>) {
  println(a == b);
}

<span class="kw">fun</span> <span class="fu">main</span>(<span class="va">args</span>: <span class="dt">Array</span>&lt;<span class="va">String</span>&gt;) {
  <span class="kw">val</span> <span class="va">a</span> = <span class="kw">Float</span>.NaN;
  <span class="kw">val</span> <span class="va">b</span> = <span class="kw">Float</span>.NaN;
  equalsFloat(a, b);
  equalsAny(a, b);
}
<span class="co">// prints false, true</span></code></pre></div>
<p>This is <a href="https://kotlinlang.org/docs/reference/basic-types.html#floating-point-numbers-comparison">an unfortunate combination of language features</a> which results in some pretty unintuitive behavior.</p>
<h3 id="common-mistake-using-reference-equality-when-structural-equality-is-needed">Common Mistake: Using Reference Equality When Structural Equality Is Needed</h3>
<p>Consider the following <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest">MSTest</a> unit test in C#:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs">[TestMethod] 
<span class="kw">public</span> <span class="dt">void</span> <span class="fu">Calculation_Is_Correct</span>() {
    <span class="dt">var</span> expected = <span class="kw">new</span> <span class="fu">Result</span>(SOME_EXPECTED_VALUE);

    <span class="dt">var</span> actual = _service.<span class="fu">DoCalculation</span>(SOME_INPUT);

    Assert.<span class="fu">AreEqual</span>(expected, actual);
}</code></pre></div>
<p>Does this work? We can’t tell! <code>Assert.AreEqual()</code> will eventually call <code>Object.Equals()</code>, which does a reference comparison by default. Unless you’ve overridden <code>Result.Equals()</code> to do a structural comparison instead, the unit test is broken. The contract for <code>Object.Equals()</code> says that you <a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.equals?view=netframework-4.8">should not override it at all if your type is mutable</a>, which is reasonable in general but probably not what you want for a unit test. (This is because <code>.Equals()</code> is expected to match <code>.GetHashCode()</code>, and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode?view=netframework-4.8">the hash code is expected not to change</a> over the lifetime of the object.) The closest thing the .NET framework has to a “guaranteed structural” comparison for reference types is <code>IEquatable&lt;T&gt;</code>, which <code>Assert.AreEqual()</code> doesn’t use, even if it’s implemented.</p>
<p>It’s <a href="https://github.com/nunit/nunit/issues/1249">worse if you use NUnit</a>.</p>
<p>(Java’s <code>Object.hashCode</code>, by contrast, is <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()">allowed to change when the object’s fields change</a>.)</p>
<h2 id="how-to-think-about-equality">How to Think About Equality</h2>
<p>Wow, I’ve now written 4000 words about the <code>=</code> operator and I’m not finished yet! That seems, well, out of proportion to the size of the operator. Why is this so complicated? Two reasons, basically:</p>
<ul>
<li><em>Inessential complexity:</em> Our programming languages <em>don’t serve us well</em> with equivalence comparisons. They are often entirely broken, and even when they’re not, they don’t make it obvious when, for example, they’ll do a structural comparison vs a reference comparison.</li>
<li><em>Essential complexity:</em> Equivalence is often <em>genuinely complicated</em> in places where it is needed, such as when comparing floating point numbers, and it gets even harder in edge cases like comparing functions.</li>
</ul>
<p>Another way to divide this up is “stuff which should be fixed by programming language <em>implementors</em>” (the “inessential complexity” above) and “stuff which must be resolved by programming language <em>users.</em></p>
<h3 id="what-programming-languages-should-do">What Programming Languages Should Do</h3>
<p>With regards to inessential complexity, the situation we find ourselves in today, with mostly-broken implementations of equivalence in nearly every mainstream programming language is just a crying shame. This “simple operation which must obey certain laws” is <em>exactly</em> the sort of thing we depend on programming languages to get right! But it appears to me that only SML has really considered having a lawful equality in both its semantics and its runtime/standard library, and SML isn’t entirely mainstream.</p>
<p>First, programming languages should make it simple to create types where equality comparison is disabled because it makes no sense (like <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/core.noequalityattribute-class-%5bfsharp%5d"><code>[&lt;NoEquality&gt;]</code> in F#</a>) and they should use this feature in their standard library where needed, such as on floating point types.</p>
<p>Programming languages must make the difference between structural equality and reference equality crystal clear. There should never be a case where it’s unclear what you’re doing. Most programming lanuages overload <code>==</code> to mean both structural equality or reference equality depending on the type of reference, most commonly value types vs. reference types, and this is guaranteed to confuse developers.</p>
<p>Kotlin comes very close to getting this right with its <code>===</code> for reference equality and <code>==</code> for structural equality, although for some reason it translates <code>===</code> to <code>==</code> for value types, instead of just failing to compile for that. The goal should be reducing developer confusion. You want the developer to see <code>===</code> and think “reference equality,” not “more equals signs is better.”</p>
<p>F# mostly gets this right by <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/languageprimitives.physicalequality%5B&#39;t%5D-function-%5Bfsharp%5D">making reference equality very hard to use</a>.</p>
<p>I don’t know of any language which has mutable by default variables which handles structural comparsions in a non-confusing way. But it’s easy to imagine what it might look like! Have a reference equals and structural equals operator which is only supported in contexts where the language can reasonably expect to support it. For example, if .NET did not do the boxing funkiness with <code>Object.ReferenceEquals</code> and value types (it could just fail to compile if you tried) and had something akin to <code>IEquatable&lt;T&gt;</code> which would allow you to use a structural comparison operator, that seems like a pretty good solution to making it clear to developers which is which.</p>
<h3 id="what-programmers-should-do">What Programmers Should Do</h3>
<p>One might look at the length of this post and say, “Wow, equality is really complicated! I’m going to give up coding and become a soybean farmer.” But this post is as long as it is mostly because so many languages do equality <em>wrong.</em> Doing equality correctly does requre some thought, but not <em>too much</em> though. Certainly less than soybean farming.</p>
<p>When doing an equality comparison on an existing type, stop and ask yourself:</p>
<ul>
<li>Does it make sense to do an equality comparison at all here?</li>
<li>If so, does a structural or a reference comparison make sense?</li>
<li>What support does my programming language provide for the appropriate style of comparison?</li>
<li>Does my programming language implement equality correctly for this comparison?</li>
</ul>
<p>You can ask yourself similar questions when designing a custom type:</p>
<ul>
<li>Should my type support equality comparisons at all? Or do they need a more complicated comparison, as with a float?</li>
<li>Will my type be mutable? How might that affect equality?</li>
<li>Would a reference comparison, a structural comparison, or both make sense?</li>
</ul>
<p>If your type is mutable, consider if you can change it to be immutable. You can do this even in a language which is mutable by default! Beyond giving you more options with respect to equality comparisons, there are many other benefits of an immutable architecture as well. The C# Roslyn compiler, which uses immutable data structures throughout, is a great example of this:</p>
<blockquote>
<p><em>The third attribute of syntax trees is that they are immutable and thread-safe. This means that after a tree is obtained, it is a snapshot of the current state of the code, and never changes. This allows multiple users to interact with the same syntax tree at the same time in different threads without locking or duplication. Because the trees are immutable and no modifications can be made directly to a tree, factory methods help create and modify syntax trees by creating additional snapshots of the tree. The trees are efficient in the way they reuse underlying nodes, so a new version can be rebuilt fast and with little extra memory.</em><br/> from the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/work-with-syntax">.NET Compiler Platform SDK docs</a></p>
</blockquote>
<h2 id="credits">Credits</h2>
<p>Thank you to Paul Blasucci, Jeremy Loy, Bud Marrical, Michael Perry, Skyler Tweedie, and Thomas Wheeler for reading drafts of this article and giving me feedback.</p>
<h3 id="references">References</h3>
<p>This post was inspired by Barry Mazur’s wonderful math paper, “<a href="http://people.math.harvard.edu/~mazur/preprints/when_is_one.pdf">When is one thing equal to some other thing?</a>” which uses category theory to answer the question for math.</p>
<p>Thanks to Tommy Hall, who drew my attention to <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.9999">this 1993 paper</a>, which, discusses many of the issues covered in this post and proposes a solution for Common Lisp.</p>
<p>Simon Ochsenreither has a nice series on problems with equality and fixing Haskell. <a href="https://soc.me/languages/equality-and-identity-part1">Overview</a>, <a href="https://soc.me/languages/equality-and-identity-part2.html">Problems</a>, <a href="https://soc.me/languages/equality-and-identity-part3.html">Solution</a>, <a href="https://soc.me/languages/equality-and-identity-part4">Fixing Haskell</a>, <a href="https://soc.me/languages/equality-and-identity-part5.html">Implementation in Dora</a>.</p>
<p>Hillel Wayne pointed me to this great essay, <a href="https://www.bkent.net/Doc/semobjid.htm">“The Semantics of Object Identity.”</a></p>
<p>Brandon Bloom provided a link to the paper <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45576.pdf">“The Left Hand of Equals”</a> which “takes a reflexive journey through fifty years of identity and equality in object-oriented languages, and ends somewhere we did not expect: a ‘left-handed’ equality relying on trust and grace.”</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This is <a href="https://skeptics.stackexchange.com/questions/19836/has-phil-karlton-ever-said-there-are-only-two-hard-things-in-computer-science">probably attributable to Phil Karlson</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>A “binary relation” deserves a little bit of explanation, but this gets into a little math, so feel free to ignore if it doesn’t help you. We have two sets <em>A</em> and <em>B</em>. (They might be the same set.) For any two members <em>a</em> and <em>b</em> of the sets, we want a rule which says whether they’re in the relation or not. So if <em>A</em> and <em>B</em> are the integers, the ordered pair <em>(1, 2)</em> is not in the relation “is equal to” but the ordered pair <em>(5, 5)</em> is in the relation. A relation is a subset of the cross product of the sets.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Phil Hagelberg <a href="https://lobste.rs/s/vpfpyk/equality_is_hard#c_hxunkw">tells me</a> the problem isn’t mutation of <em>variables</em> but <em>data structures,</em> which is a subtle but fair distinction.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Gowers, Timothy, <em>Mathematics: A Very Short Introduction</em>, p. 60<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><code>a = b = c = []</code> in Ruby assigns <em>the same reference</em> to <code>a</code>, <code>b</code>, and <code>c</code>. So if you mutate <code>a</code>, you’ll mutate <code>b</code> and <code>c</code> at the same time. That’s probably not what you wanted, otherwise what would be the point of having three separate references? In contrast, with a value type like <code>Integer</code>, mutating <code>a</code> will <em>not</em> change the value of <code>b</code> or <code>c</code>.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><code>~</code> is the SML operator for unary negation, so <code>~0</code> should be read as “negative zero.”<a href="#fnref6">↩</a></p></li>
</ol>
</div>

<div class="info">
    
    Tags: <a href="/tags/mathematics.html">mathematics</a>, <a href="/tags/computer%20science.html">computer science</a>, <a href="/tags/plt.html">plt</a>, <a href="/tags/equality.html">equality</a>
    
</div>
]]></description>
    <pubDate>Mon, 09 Mar 2020 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2020-03-09-equality-is-hard.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Gray Failure</title>
    <link>http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html</link>
    <description><![CDATA[<div class="info">
    Posted on January 29, 2020
    
</div>

<p><a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">Gray Failure: The Achilles’ Heel of Cloud-Scale Systems</a> is a delightful paper because it’s easy to read, the findings are directly useful in my day job, and because it reframes an important issue in a way which is not intuitive at first but simplifies it and leads to solutions. </p>
<p>All software fails from time to time, but evidence indicates that cloud scale services fail differently than other software which might be less distributed. The authors characterize this failure mode as “gray failure,” in which “component failures whose manifestations are fairly subtle, and thus defy quick and definitive detection.” This is in contrast to hard failure when a service simply stops working altogether. Examples include “severe performance degradation, random packet loss, flaky I/O, memory thrashing, capacity pressure, and non-fatal exceptions.”</p>
<p>So why is this distinction useful? Failure is failure, right? The authors maintain that, in contrast to hard failures, gray failure tends to increase very rapidly with scale. For example, consider network switches: “increasing redundancy can counter-intuitively hurtavailability because the more core switches there are, the more likelyat least one of them will experience a gray failure.” </p>
<p>This tells us several things. First, a gray failure might be a leading indicator of (in other words, it precedes) a hard failure. Second, the usual response to hard failure, restarting the service or host, may not help at all (as with the case of running out of disk space) and will probably make things much worse by introducing latency into the system. Third, horizontal scaling may make the problem considerably worse, as an increasing number of service hosts increases correspondingly the chances of a gray failure in any of them. </p>
<p>How to detect gray failures is one of the most important contributions of the paper. Gray failures are characterized by “differential observability.” This means that the consumer of a service, say, an application, will observe a different result than another entity which is looking at the service, such as a health check. So the health check might just be checking to see if the service is up, but might not notice that it’s running very slowly due to having consumed most of the hard drive space. The paper notes, “many gray failure cases we investigated are only detectable in a distributed fashion because each individual component has only a partial view of the entire system.” The authors advise detecting gray failure by “closing the observation gaps between the system and the apps it services.” In particular, they recommend “moving from singular failure detection (e.g., with heartbeats) to multidimensional health monitoring.” </p>
<p>If any of the above is interesting to you, I’d recommend reading <a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">the whole paper</a>. It’s short (only five pages), and it’s packed with useful information.</p>

<div class="info">
    
    Tags: <a href="/tags/failure.html">failure</a>, <a href="/tags/cloud.html">cloud</a>, <a href="/tags/papers.html">papers</a>
    
</div>
]]></description>
    <pubDate>Wed, 29 Jan 2020 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Security Talks at Stir Trek and Central Ohio ISSA</title>
    <link>http://www.craigstuntz.com/posts/2018-04-29-shifting-application-security-left.html</link>
    <description><![CDATA[<div class="info">
    Posted on April 29, 2018
    
</div>

<p>I’ll present “<a href="https://stirtrek.com/sessions/session/87">Secure Applications, by Design</a>” on Friday 4 May at <a href="https://stirtrek.com/">Stir Trek</a>, and “Shifting Application Security Left on Monday 14 May at the <a href="https://www.infosecsummit.com/ehome/2018cbusinfosec/agenda/">2018 Central Ohio Infosec Summit</a>.</p>
<p>Both of these talks are about bridging the gap between development and security teams. In fact, they’re almost the same presentation, except that “Secure Applications, by Design” is aimed at developers, and “Shifting Application Security Left” is written for infosec professionals. But the outline of each talk is very similar. The biggest difference between the two is what I <em>don’t</em> say. There are a lot of “security basics” in the former which I skip in the latter.</p>
<p>If you’re interested in the overall idea of how developers and security professionals can work together to create better applications, but haven’t seen that work well in real world projects, I’d be very pleased if you’d attend one of these and share your feedback with me.</p>

<div class="info">
    
    Tags: <a href="/tags/Stir%20Trek.html">Stir Trek</a>, <a href="/tags/Central%20Ohio%20ISSA.html">Central Ohio ISSA</a>, <a href="/tags/presentations.html">presentations</a>, <a href="/tags/security.html">security</a>
    
</div>
]]></description>
    <pubDate>Sun, 29 Apr 2018 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2018-04-29-shifting-application-security-left.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Speaking at CodeMash</title>
    <link>http://www.craigstuntz.com/posts/2017-01-09-codemash.html</link>
    <description><![CDATA[<div class="info">
    Posted on January  9, 2017
    
</div>

<p>I’ll be speaking at <a href="http://www.codemash.org/">CodeMash</a>, twice, on Friday the 13th. Wish me luck!</p>
<h3 id="mashing-up-qa-and-security">Mashing Up QA and Security</h3>
<p>8:30 a.m., Zambezi Room</p>
<p>Security is domain specific quality assurance, but developers, testers, and security professionals often don’t work together. When this type of disconnect exists between big groups of people who are very good at their jobs, there is usually a mostly untapped potential for learning. I’ve been exploring this landscape by writing an open source fuzzer aimed at discovering new test cases (not just crashes!) using binary rewriting of managed executables and genetic modification of a test corpus, implemented in F# and using Mono.Cecil. I’ll ontrast the fundamentals of each discipline, demonstrate tools used by experts on both sides of the security and QA fence, and challenge the audience to find new ways to mix them up. Expect to see lots of code and leave with ideas for making entire communities better, not just your own team!</p>
<h3 id="incredibly-strange-programming-languages">Incredibly Strange Programming Languages</h3>
<p>12:15 p.m., Cypress Room</p>
<p>If you’ve ever suspected that “all programming languages are pretty much the same; they just have different syntax,” well, you will never suspect that again! Covering languages from the unusually powerful (Idris) to the illuminated (قلب) to the profoundly limited (BlooP), and all points in between, these languages will help you think differently about approaches to software problems you face in your day job. Of course we’ll have a lot of fun, but these languages are no joke. The practical benefit of an impractical language is the power to find new approaches to common problems.</p>

<div class="info">
    
    Tags: <a href="/tags/CodeMash.html">CodeMash</a>, <a href="/tags/presentations.html">presentations</a>, <a href="/tags/F%23.html">F#</a>, <a href="/tags/QA.html">QA</a>, <a href="/tags/security.html">security</a>, <a href="/tags/PLT.html">PLT</a>
    
</div>
]]></description>
    <pubDate>Mon, 09 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2017-01-09-codemash.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Identity Theft on Upwork</title>
    <link>http://www.craigstuntz.com/posts/2016-07-08-upwork-identity-theft.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  8, 2016
    
</div>

<ul>
<li>21 June 2016: A stranger reaches out to me on Twitter and Facebook and asks, “Did we just chat on Upwork?” I reply, “Nope, it wasn’t me,” and she responds, “there is someone impersonating you.”</li>
</ul>
<p>Crap.</p>
<p><a href="/images/Screen%20Shot%202016-07-05%20at%2011.06.31%20PM.png"><img src="/images/Screen Shot 2016-07-05 at 11.06.31 PM small.png" alt="Fake profile on upwork.com" /></a></p>
<p>Yes, that’s my name and my picture, and most of the text is plagiarized from <a href="https://stackoverflow.com/jobs/cv/employer/12943">my résumé</a>, but I don’t even have an Upwork account. According to the site, the scammers have done two paid assignments while posing as me.</p>
<p>The scammers were trying to solicit work from her, using my identity and experience.</p>
<ul>
<li>21 June 2016: Both I and the woman who contacted me report the fake profile to Upwork.</li>
<li>22 June 2016: Upwork support responds:</li>
</ul>
<blockquote>
<p>Hello Craig,</p>
<p>Please be informed that we are alreadyinvestigating your report. Rest assured that we will take appropriateaction according to our policies and processes.</p>
<p>We do appreciate your effort in keeping theintegrity, safety and quality of the Upwork Marketplace and we wish you successin your endeavors.</p>
<p>We will now close this Support ticket. Pleaselet us know if we can be of any additional help.</p>
</blockquote>
<p>But they don’t close the account. They do, however, send me a “satisfaction survey” for the support ticket.</p>
<p>I do a bit of looking around, and it unsurprisingly turns out this happens a lot.</p>
<p><a href="http://www.vandelaydesign.com/designers-beware-upwork-scam/">Designers Beware of the Latest Upwork Scam</a></p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
<a href="https://twitter.com/JuliaEMcCoy"><span class="citation">@JuliaEMcCoy</span></a> fyi - there are 5+ accnts spamming <a href="https://twitter.com/Upwork"><span class="citation">@Upwork</span></a> using this pic for skype &amp; sending malware 2 applicants <a href="https://t.co/QXnQ67A4eu">pic.twitter.com/QXnQ67A4eu</a>
</p>
— Rebecca Gatesman (<span class="citation">@BeccaGatesman</span>) <a href="https://twitter.com/BeccaGatesman/status/738876245035896836">June 3, 2016</a>
</blockquote>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
.<a href="https://twitter.com/Upwork"><span class="citation">@Upwork</span></a> Someone else is freelancing as me on your site 🤔 — I never signed up &amp; I don't freelance. Pls fix <a href="https://t.co/xuWZ4e6hHi">https://t.co/xuWZ4e6hHi</a>
</p>
— Ben Cline (<span class="citation">@yocline</span>) <a href="https://twitter.com/yocline/status/734870368586850304">May 23, 2016</a>
</blockquote>
<p>After I responded in the last thread, their social media folks reach out and offer to expedite the case. The fake profile is hidden from anonymous users, but if you create an account and log in to upwork.com, it’s still there. This is not progress.</p>
<ul>
<li>23 June 2016: I email support again and note they’ve hidden the profile from anonymous users only.</li>
<li>23 June 2016: Support responds:</li>
</ul>
<blockquote>
<p>Thanks for your response. Kindly be assured that the the reported freelancer is already under review and necessary action would be taken on the user for fake account creation once proved.</p>
<p>Thanks for your cooperation &amp; support.</p>
</blockquote>
<ul>
<li>23 June 2016: I contact their social media folks again.</li>
<li>23 June 2016: They respond:</li>
</ul>
<blockquote>
<p>Hi Craig, sorry for any confusion this has caused. Our Team is still currently investigating this. Once their investigation is complete, they will update you via your ticket. We appreciate your continued patience and hope to get this resolved soon!</p>
</blockquote>
<ul>
<li>5 July 2016: It’s now been two weeks since I first reported the scammers. I email support again.</li>
<li>6 July 2016: Support responds:</li>
</ul>
<blockquote>
<p>Thank you for patiently awaiting our response and please accept our apologies for the late response as we have received high volume of requests recently and we are trying our best to address all concerns as promptly as possible.</p>
<p>Please be assured that appropriate action has already been taken on the reported fake profile as defined in our Terms of Service. Again, our sincerest apologies for your inconvenience.</p>
<p>Please feel free to contact us if you need further assistance.</p>
</blockquote>
<p>I’n not sure what “appropriate action” is supposed to mean, but the fake profile is still live on their site. Upwork is making money using an identity they know to be stolen.</p>
<ul>
<li>5 July 2016: I lose patience with their support team altogether and <a href="http://sarafhawkins.com/how-to-file-dmca-takedown/">send a DMCA takedown</a> to their <a href="http://www.copyright.gov/onlinesp/agents/u/upwork_global_inc.pdf">legally registered contact</a>. I can do this because the scammers copied text that I wrote.</li>
<li>5 July 2016: A member of their legal team acknowledges receipt of the request in less than half an hour.</li>
<li>7 July 2016: Approximately 40 hours later, she writes back:</li>
</ul>
<blockquote>
<p>I am following-up to inform you that we have removed the profile in question. Thanks for your patience.</p>
</blockquote>
<p>I verify that this is true and thank her.</p>
<h2 id="dmca">DMCA?</h2>
<p>The DMCA is really not the right tool to protect your identity. I probably couldn’t have used it if the scammers hadn’t stolen my writing as well as my identity. But it does have a strong requirement that the online service provider must “expeditiously” remove the copyrighted material. They are not allowed to just send assurances that they’re “investigating” it for weeks on end while profiting off of the scam.</p>
<p>And, yes, <a href="http://www.pcworld.co.nz/article/483729/google_submission_hammers_section_92a/">DMCA takedowns are frequently abused</a>.</p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="info">
    
    Tags: <a href="/tags/identity%20theft.html">identity theft</a>, <a href="/tags/DMCA.html">DMCA</a>, <a href="/tags/Upwork.html">Upwork</a>
    
</div>
]]></description>
    <pubDate>Fri, 08 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-07-08-upwork-identity-theft.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>"Static vs. Dynamic" Is the Wrong Question for Working Programmers</title>
    <link>http://www.craigstuntz.com/posts/2016-06-18-static-vs-dynamic-wrong-question.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 18, 2016
    
</div>

<p>It’s common to ask, <em>“Is there evidence that programmers write safer code or are more productive when using a static or a dynamic language?”</em> It’s also common to write really terrible blog post answers to this question. I’m not going to link to examples, but let’s just say that general comparisons of “mainstream dynamic language A” with “mainstream static language B” don’t give a lot of insight into the broader question.</p>
<p>Programmers who say they prefer static or dynamic languages are <a href="https://www.ics.uci.edu/~lopes/teaching/inf212W12/readings/rdl04meijer.pdf">often interested in specific language features</a> rather than static or dynamic type systems, <em>per se.</em></p>
<p>Yet <a href="http://rundis.github.io/blog/2016/type_confused.html">reasonable people do want to know the answer</a>. Can we shed more light on the topic?</p>
<h2 id="science-cannot-give-us-a-definitive-answer-yet">Science Cannot Give Us a Definitive answer – Yet!</h2>
<p>Well-designed, peer reviewed research on human interaction with programming languages is <a href="https://jyx.jyu.fi/dspace/handle/123456789/47698">uncommon</a>. Static typing is <a href="https://www.quorumlanguage.com/evidence/evidence.pdf">better studied than most other PL features</a> but <a href="http://danluu.com/empirical-pl/">tends to examine very specific claims with fairly small effects</a>. Good studies which do exist at all, narrow as their findings might be, are <a href="2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html">generally not reproduced by anyone</a>. There is <a href="http://www.cs.cmu.edu/~NatProg/programminglanguageusability/">an effort to fix this</a>, but for now any argument claiming a “scientific” answer to this question is suspect.</p>
<h2 id="there-arent-two-distinct-buckets-of-languages-named-static-and-dynamic">There Aren’t Two Distinct Buckets of Languages Named Static and Dynamic</h2>
<p>To be honest, I don’t think this question is answerable. In part this is because, increasingly, I think <strong>the notion of a strict distinction between static and dynamic languages is less than helpful</strong>. It’s somewhat more useful to talk about what sort of features the language’s type system has.</p>
<blockquote>
<p>In general, we should strive for strong typing, and adopt static typing whenever possible. –<a href="http://web.cse.ohio-state.edu/~soundarajan.1/courses/788/cardelli85understanding.pdf">Luca Cardelli and Peter Wegner</a></p>
</blockquote>
<p>From the point of view of the working programmer, calling a language “statically typed” confuses a number of different and important ways that both languages and tooling can vary.</p>
<p>Why? Ask yourself these questions:</p>
<h3 id="what-is-a-statically-typed-language">What Is a Statically Typed Language?</h3>
<p>Is Elm a statically typed language? Is Java a statically typed language?</p>
<ul>
<li><a href="http://elm-lang.org/blog/compilers-as-assistants">Elm’s type system acts as a coach</a> to help the programmer complete her work, but doesn’t really affect performance.</li>
<li>Java’s type system is a <a href="http://openjdk.java.net/jeps/286">verbose</a> impediment to code readers and writers, but <a href="http://cr.openjdk.java.net/~jrose/values/values-0.html">improves performance</a> by, for example, supporting many different primitive numeric types.</li>
</ul>
<p>Elm’s type system is substantially more powerful than Java’s, and eliminates entire classes of bugs which plague Java applications such as dereferencing null pointers and inexhaustive <code>switch</code> blocks.</p>
<p>If both languages are called “statically typed” and yet the two languages’ type systems do such different things, then how much value is there in lumping them into the same specific bucket?</p>
<p>Indeed, even the <a href="https://www.cl.cam.ac.uk/~srk31/research/papers/kell14in-author-version.pdf">word “type” itself is used in multiple, not entirely compatible senses</a> in computer science.</p>
<p>Tomas Petricek <a href="http://tomasp.net/blog/2015/against-types/">argues</a>:</p>
<blockquote>
<p>Rather than seeking the elusive definition of what is a type (which does not exist), I believe that we should look for innovative ways to think about and work with types that do not require an exact formal definition.</p>
</blockquote>
<h3 id="what-is-a-dynamic-language">What Is a Dynamic Language?</h3>
<p>Is Erlang a statically typed language? Many would say no, but what if I run <a href="http://erlang.org/doc/man/dialyzer.html">Dialyzer</a> first? Sure, I’m not getting the runtime performance benefits static typing can bring, but if types are inferred statically at build time and can fail the build, then I’m getting at least some help from static typing. So in this case the distinction between statically and dynamically typed has more to do with the tooling I might be using than the language itself. That’s interesting!</p>
<p>You can even <a href="https://github.com/frenchy64/ambrosebs.com/blob/gh-pages/talks/dynamic%20inference%20boston%20pi%202016.pdf">infer static types from unit tests instead of code itself</a>!</p>
<h3 id="whatever-static-and-dynamic-are-production-languages-often-have-both">Whatever “Static” and “Dynamic” Are, Production Languages Often Have Both</h3>
<p>C# has <code>dynamic</code>. Racket has <a href="https://docs.racket-lang.org/ts-guide/">Typed Racket</a>. Java has reflection. Clojure has <code>core.typed</code>.</p>
<p>Statically typed languages typically check certain types of errors at compile time and other types of errors at runtime.<sup>1</sup> Which types of errors are checked when varies by programming language. For example, Idris can statically prove that a program does not divide by zero, whereas C# cannot.</p>
<p>Manuel Chakravarty wrote a much more detailed (and technically rigorous) <a href="http://justtesting.org/post/148297302871/static-versus-dynamic">examination of this idea</a>.</p>
<h3 id="well-ok-but-surely-there-must-be-a-formal-distinction-right">Well, OK, But Surely There Must Be a <em>Formal</em> Distinction, Right?</h3>
<p>Less so than you might think.</p>
<blockquote>
<p>Terms like “dynamically typed” are arguably misnomers and should probably be replaced by “dynamically checked,” but the usage is standard.<br/> – Benjamin C. Pierce, <em>Types and Programming Languages</em><sup>2</sup></p>
</blockquote>
<blockquote>
<p>Thus we see that the canonical untyped language, <strong>Λ</strong> [the untyped lambda calculus], which by dint of terminology stands in opposition to typed languages, turns out to be but a typed language after all. Rather than eliminating types, an untyped language consolidates an infinite collection of types into a single recursive type. Doing so renders static type checking trivial, at the cost of incurring dynamic overhead to coerce values to and from the recursive type.<br/> - Robert Harper, <em>Practical Foundations for Programming Languages</em><sup>3</sup></p>
</blockquote>
<p>One can consider a “dynamic language” as a language which has fewer statically checked types (namely, one) than a “static language.”</p>
<h2 id="what-does-static-typing-really-do">What Does Static Typing Really Do?</h2>
<p>Given some programming language, you can imagine “static typing” as a feature (or, more properly, a family of features) the language designer could add to an otherwise untyped or dynamic language which <strong>might</strong> deliver one or more of the following benefits:</p>
<ul>
<li>Proof that certain kinds of dynamic errors are impossible<sup>4</sup></li>
<li>Automatic and machine verified documentation</li>
<li>Improved runtime performance</li>
<li>Better tooling support</li>
</ul>
<p>It <strong>might</strong> also have one or more of the following drawbacks</p>
<ul>
<li>Increased verbosity or <a href="http://tratt.net/laurie/blog/entries/another_non_argument_in_type_systems.html">reduced expressiveness</a></li>
<li>Rejection of otherwise correct programs<sup>5</sup></li>
<li>Slower programmer iteration (possibly lengthy compile/run cycles)</li>
<li>A need for the developer to learn “static typing” language feature (through she still must understand types to some degree regardless)</li>
</ul>
<p>However, every single one of these benefits and drawbacks could also come from adding a different feature (distinct from “static typing”) to the language.</p>
<p>For example, “proof that certain kinds of dynamic errors are impossible” could come via model checking or <a href="https://www.microsoft.com/en-us/research/project/vcc-a-verifier-for-concurrent-c/">formal verification</a>. “Increased verbosity” is hardly limited to “static languages”; most “dynamic languages” are more verbose than SML or Haskell.</p>
<p>Instead of asking, “Should the whole world use a ‘statically typed’ language?” we could ask “In which cases would it make sense to write formal proofs of (at least some parts of) our programs?”</p>
<h2 id="if-static-vs.dynamic-is-the-wrong-question-then-what-is-the-right-question">If “Static vs. Dynamic” Is the Wrong Question, Then What Is the Right Question?</h2>
<p>If you’re a working programmer, then the right question is:</p>
<blockquote>
<p><strong>How can my languages and tooling help me be a better programmer?</strong></p>
</blockquote>
<p>Follow-up questions might be:</p>
<ul>
<li>If I care about verification of correctness properties above and beyond what I can do with simple tests, what are my choices, in terms of language features and tooling?</li>
<li>What are the properties which are difficult or impossible to verify?</li>
<li>Do the features and tooling of the language steer you towards great solutions to problems, provide you little guidance, or get in your way? Does the answer vary depending on which kind of problem?</li>
<li>What compromises does the language I’m using now make?</li>
<li>Can I use tools to fill in some of the shortcomings?</li>
<li>How do other languages and systems address my pain points?</li>
<li>Given some correct program I want to be the output of my process, how do I arrive at that program? Do I start by writing a specification (possibly in the form of types), or by writing tests, or by writing code, or a mix of these?</li>
</ul>
<p>These are difficult questions, because you can’t really answer them without experience with diverse languages, programming communities, and ecosystems. Zealots need not apply, but be kind to excited newbies!</p>
<p>Importantly, programming is still in its infancy. We are still discovering new methods of designing code. We must keep an open mind, because programmers 50 years from now will laugh at whatever we choose. Today, you can design your code using top-down, bottom-up, test-first, <a href="https://www.manning.com/books/type-driven-development-with-idris">type-driven</a>, or a multitude of other techniques. The design methodologies of the next decade probably haven’t been invented yet.</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
<a href="https://twitter.com/raichoo"><span class="citation">@raichoo</span></a> <a href="https://twitter.com/kamatsu8"><span class="citation">@kamatsu8</span></a> let's have some imagination about where languages and tools might go if we let go of how current tools trade things off
</p>
— Edwin Brady (<span class="citation">@edwinbrady</span>) <a href="https://twitter.com/edwinbrady/status/743865720912609280">June 17, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<h5 id="notes">Notes</h5>
<p><sup>1</sup> Harper, Robert, <a href="http://www.cs.cmu.edu/~rwh/pfpl.html"><em>Practical Foundations for Programming Languages</em></a>, 2nd Edition, §6.3</p>
<p><sup>2</sup> Pierce, Benjamin C. <a href="https://www.cis.upenn.edu/~bcpierce/tapl/"><em>Types and Programming Languages</em></a>, p. 2</p>
<p><sup>3</sup> Harper, §21.4</p>
<p><sup>4</sup> Harper, §6</p>
<p><sup>5</sup> Rémy, Didier, <a href="http://gallium.inria.fr/~remy/mpri/cours1.pdf"><em>Type systems for programming languages</em></a>, p. 29</p>

<div class="info">
    
    Tags: <a href="/tags/programming%20languages.html">programming languages</a>
    
</div>
]]></description>
    <pubDate>Sat, 18 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-18-static-vs-dynamic-wrong-question.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Andreas Stefik on Programming Language Human Factors Research</title>
    <link>http://www.craigstuntz.com/posts/2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 17, 2016
    
</div>

<p><a href="https://www.functionalgeekery.com/episode-55-andreas-stefik/">This interview</a> with <a href="http://web.cs.unlv.edu/stefika/">Andreas Stefik</a> on empirical studies of human productivity with PL features is fascinating. In short: There aren’t many.</p>
<p>Very few randomized, controlled experiments in the field have ever been performed. <a href="https://jyx.jyu.fi/dspace/handle/123456789/47698">This 2015 thesis</a> found only 22!</p>
<p>Much if not most PL human factors research is <a href="http://www.dictionary.com/browse/anecdata">anecdata</a>. Even the few randomized, controlled experiments which have been performed have never been reproduced.</p>
<p>CS folks who have ever looked down their noses at social sciences for soft research standards should be mortified.</p>
<p>Never take blog posts or tweets claiming: “&lt;study&gt; found &lt;author’s pet PL feature&gt; boosts productivity by &lt;x&gt;” at face value. Conclusive, reproduced results on such a thing would be unprecedented in CS research.</p>

<div class="info">
    
    Tags: <a href="/tags/Andreas%20Stefik.html">Andreas Stefik</a>, <a href="/tags/programming%20languages.html">programming languages</a>
    
</div>
]]></description>
    <pubDate>Fri, 17 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Hosting a Hakyll Blog On GitHub With a Custom Domain</title>
    <link>http://www.craigstuntz.com/posts/2016-06-14-hakyll.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 14, 2016
    
</div>

<ol style="list-style-type: decimal">
<li>Create a <a href="https://pages.github.com/">GitHub user page</a>. Follow the directions there to create a “Hello world” site. Don’t proceed until that works.</li>
<li>Register a domain.</li>
<li><a href="https://help.github.com/articles/setting-up-your-pages-site-repository/">Point your domain at your GitHub user pages site</a>. It may take 3+ hours before your domain propagates. Don’t continue until this works.</li>
<li>Install <a href="http://www.haskellstack.org">stack</a></li>
<li>Install hakyll via <a href="https://jaspervdj.be/hakyll/tutorials/01-installation.html"><code>stack install hakyll</code></a></li>
<li>Follow <a href="https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html">this tutorial</a>. <em>However!</em> You already have a <code>master</code> branch. That’s OK. But you do want to have a <code>CNAME</code> file (see step 3 in this list) in your <code>develop</code> branch. Ensure your site looks good before proceeding.</li>
<li>You might want to look at some <a href="http://katychuang.com/hakyll-cssgarden/gallery/">sample themes</a>.</li>
<li>If you want code syntax highlighting, you need some <a href="https://www.jdreaver.com/posts/2014-06-22-math-programming-blog-hakyll.html">additional CSS</a>. A list of supported languages can be found in the <a href="https://github.com/jgm/highlighting-kate/tree/master/xml">highlighting-kate</a> source code.</li>
<li>You might also want an <a href="https://thibaud.dauce.fr/posts/2015-11-15-rss-feed-with-hakyll.html">RSS feed</a>.</li>
<li>You might also want <a href="http://javran.github.io/posts/2014-03-01-add-tags-to-your-hakyll-blog.html">tags</a>.</li>
</ol>

<div class="info">
    
    Tags: <a href="/tags/Hakyll.html">Hakyll</a>, <a href="/tags/GitHub.html">GitHub</a>
    
</div>
]]></description>
    <pubDate>Tue, 14 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-14-hakyll.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Designing for Problems Too Big to Test</title>
    <link>http://www.craigstuntz.com/posts/2015-12-23-Designing-for-Problems-Too-Big-to-Test.html</link>
    <description><![CDATA[<div class="info">
    Posted on December 23, 2015
    
</div>

<p>In this post, I will show an example of where using unit testing as a design methodology does not work, and how to produce a design for correct code anyway. There is no single design methodology which works for all problems, so it’s useful to have a variety of tools at your disposal.</p>
<p>This post is my contribution to the <a href="https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/">2015 F# Advent Calendar</a>.</p>
<p>I’m implementing a compiler for a tiny language without use of external libraries for things like parsing and code generation. The idea is to produce a minimal example of a purely functional compiler. This is an ongoing project, and some parts are further along than others, but you can see the source code as I work, and it does produce working EXEs today.</p>
<p>Designing a compiler is harder than many problems in programming, because they do something difficult: A compiler must be able to accept any string and either produce an equivalent program or explain clearly to a human being why this is string is not a valid program. And there are a lot of possible strings!</p>
<p>Designing a compiler is also easier than many problems in programming, because there exist formal methods for solving many of the harder sub-problems in the design. You can think of “formal methods,” here, as recipes for a solution, but very special recipes which guarantee that you’ll touch all possible cases in the problem space.</p>
<h3 id="design-methodologies">Design Methodologies</h3>
<p>Over the years, programmers have used a number of different methodologies when approaching program design. These include:</p>
<ul>
<li><strong>The Big Ball of Mud.</strong> Arguably the most common methodology, this involves just poking at the problem until things seem to work for the most common case, maybe.</li>
<li><strong>Big Design Up Front.</strong> In this methodology, a full specification for the implementation of the system is developed before coding begins. Many people consider this obsolete or, at best, wildly inefficient.</li>
<li><strong>Test Driven Design.</strong> I’m going to distinguish this from test driven development, because tests are useful both as a methodology for program design and for implementing a program design. In practice, people tend to combine these. As a design methodology, the general idea is that you start with either high or low level simple cases, and continue working until a design evolves. Some people divide this into sub-schools of test driven design. Despite its ubiquity, few defend the big ball of mud as a design practice. Big design up front is widely ridiculed. That leaves TDD as the most prevalent design methodology that people are willing to publicly defend. Unfortunately, testing, while useful, is fundamentally limited.</li>
</ul>
<blockquote>
<p>“…program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.” Edsger Dijkstra</p>
</blockquote>
<p>In cases where “the happy path” is far more prevalent than “edge cases,” this might not seem to be a show-stopping limitation, and test driven design works OK in many cases.</p>
<h3 id="there-are-no-edge-cases-in-programming-languages">There Are No Edge Cases In Programming Languages</h3>
<p>As noted above, a compiler must be able to accept any string and either produce an equivalent program or explain clearly to a human being why this is string is not a valid program. A compiler designer cannot predict the valid programs people may write, nor the errors they may create.</p>
<p>For example, let’s consider <a href="https://en.wikipedia.org/wiki/Duff%27s_device">Duff’s Device</a>. It’s safe to presume that Brian Kernighan and Dennis Ritchie did not have this in mind when they designed the C programming language. For the uninitiated, Duff’s Device nests a while loop inside of a switch statement:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">send(to, from, count)
<span class="dt">register</span> <span class="dt">short</span> *to, *from;
<span class="dt">register</span> count;
{
    <span class="dt">register</span> n = (count + <span class="dv">7</span>) / <span class="dv">8</span>;
    <span class="cf">switch</span> (count % <span class="dv">8</span> ) {
    <span class="cf">case</span> <span class="dv">0</span>: <span class="cf">do</span> { *to = *from++;
    <span class="cf">case</span> <span class="dv">7</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">6</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">5</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">4</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">3</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">2</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">1</span>:      *to = *from++;
            } <span class="cf">while</span> (--n &gt; <span class="dv">0</span>);
    }
}</code></pre></div>
<p>This is unreadable to the point that it borders on obfuscation, but is legal C, per the specification, and does perform a useful optimization on a particular case. I bring it up because, as a language implementer, I think it drives home the point that there is no possibility of creating (anywhere near) all of the possible unit tests for all of the possible ways someone might choose to use your language.</p>
<h3 id="different-tasks-different-design-methodologies">Different Tasks, Different Design Methodologies</h3>
<p>In many programming tasks, the number of “happy path” cases are similar to the number of edge and error cases. At least within the same order of magnitude. In these cases it’s probably possible to exhaustively test the system, even if people don’t usually bother to do so.</p>
<p>For other tasks, however, the number of “edge cases” is uncountably large. I gave a programming language example above, but there are others, such as designing an API for a cloud service. In these cases, we need a design methodology which gives us some assurance that our design will work with cases that we did not and could not possibly produce tests for, because real-world use cases will vastly outnumber our test cases.</p>
<h3 id="formal-methods">Formal Methods</h3>
<p>The solution to this problem is to break the problem space into a countable number of conditions. This is only effective if those countable conditions represent all possible states in the problem space. For example, for a programming language, we divide the task of compilation into small phases such as lexing, parsing, etc., and within each phase we use a formalism which guarantees that we cover the entire possible range of conditions within that phase.</p>
<p>This will make more sense if I give an example.</p>
<h3 id="lexing-and-regular-expressions">Lexing and Regular Expressions</h3>
<p>In many compilers, the first phase of compilation is lexing, where the string representing the program source code is split into tokens. The token list will be passed to the parser, which attempts to match them up with the grammar of the programming language. As a practical example, consider the following expression from a Lisp-like language, which increments the number 1, resulting in the value 2.</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(inc <span class="dv">1</span>)</code></pre></div>
<p>Lexing divides this source code into a stream of tokens, like this:</p>
<pre><code>LeftParenthesis
Identifier &quot;inc&quot;
LiteralInt 1
RightParenthesis</code></pre>
<p>These tokens will be consumed by the parser to produce and abstract syntax tree, type checked, optimized, etc., but let’s just look at lexing for now.</p>
<p>Substrings of the input source code are mapped to tokens using regular expressions. Not <a href="http://www.regular-expressions.info/quickstart.html">the PCRE type with zillions of features</a> you might be familiar with, but <a href="https://en.wikipedia.org/wiki/Lexical_grammar">a far simpler version</a> with only a few rules. The lexical grammar for this language looks something like this:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">leftParenthesis  = <span class="ch">&#39;(&#39;</span>
rightParenthesis = <span class="ch">&#39;)&#39;</span>
letter           = <span class="ch">&#39;A&#39;</span> | <span class="ch">&#39;B&#39;</span> | <span class="ch">&#39;C&#39;</span> | …
digit            = <span class="ch">&#39;0&#39;</span> | <span class="ch">&#39;1&#39;</span> | <span class="ch">&#39;2&#39;</span> | …
number           = (<span class="ch">&#39;+&#39;</span>digit|<span class="ch">&#39;-&#39;</span>digit|digit) digit*
alphanumeric     = letter | number
//<span class="co"> …</span></code></pre></div>
<p>You don’t use <code>System.Text.RegularExpressions.Regex</code> for this; it’s slow, and has features you won’t need.</p>
<p>How can we guarantee that we can tokenize any possible string? We don’t need to; as long as we explicitly handle the case of strings we can’t tokenize, we’re covered. I do this by having an extra token type for unrecognized characters. These are eventually mapped into errors the user sees.</p>
<p>How can we guarantee that we can tokenize any string representing a valid program without seeing an unrecognizable character? Because the parser is designed around a formalism (a context free grammar) which maps lexemes to abstract syntax trees, and the only valid programs are those which can be constructed from repeated applications of the production rules in the parser’s grammar. We have changed the scope of the problem from “any possible string” to “any possible sequence of lexemes.”</p>
<p>Right away we have a big win in the number of test cases. Any “character” in a string could be one of 2^16 UTF-16 code points, but the number of possible lexemes is considerably smaller. A real language would have <a href="https://github.com/whitequark/parser/blob/master/lib/parser/lexer.rl">maybe 10 times more</a>, but that’s still better than testing an input of any possible Unicode code point:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> Lexeme =
    | LeftParenthesis
    | RightParenthesis
    | Identifier    <span class="kw">of</span> <span class="dt">string</span>
    | LiteralInt    <span class="kw">of</span> <span class="dt">int</span>
    | LiteralString <span class="kw">of</span> <span class="dt">string</span>
    | Unrecognized  <span class="kw">of</span> <span class="dt">char</span></code></pre></div>
<p>We can test the lexer in isolation with a much smaller number of test cases.</p>
<p>The example I gave was a very simple expression, but real-world programs obviously contain more complicated expressions. Also, real-world code is often invalid and must be rejected by the compiler. Some coding errors cannot be detected until further on in the compilation pipeline, but there are possible errors at the lexing stage. For example, in my language, identifiers must begin with a letter, so the expression</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(| <span class="dv">1</span>)</code></pre></div>
<p>…maps to:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">LeftParenthesis
Unrecognized <span class="ch">&#39;|&#39;</span>
LiteralInt <span class="dv">1</span>
RightParenthesis</code></pre></div>
<p>Importantly, we should be able to examine any character of a real-world string, and map it into one of these types. The <code>Unrecognized</code> type serves as a kind of fall through for characters which do not fit into the types in the union.</p>
<p>F#’s exhaustiveness checking ensures that we cannot forget to handle a particular case even if we add additional lexemes to the language specification later. As a simple example, consider this pretty print function which takes a list of lexemes and produces a string similar to the originally parsed source code:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> <span class="kw">private</span> prettyPrintLexeme = <span class="kw">function</span>
| LeftParenthesis          -&gt; <span class="st">&quot;(&quot;</span>
| RightParenthesis         -&gt; <span class="st">&quot;)&quot;</span>
| Identifier    identifier -&gt; identifier
| LiteralInt    num        -&gt; num.ToString()
| LiteralString str        -&gt; sprintf <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">%s</span><span class="sc">\&quot;</span><span class="st">&quot;</span> str
| Unrecognized  ch         -&gt; ch.ToString()

<span class="kw">let</span> prettyPrint =
    List<span class="kw">.</span>map prettyPrintLexeme
    &gt;&gt; String<span class="kw">.</span>concat <span class="st">&quot; &quot;</span></code></pre></div>
<p>If we were to, after the fact, add an additional type of lexeme, but forgot to modify the <code>prettyPrint</code> function, we would receive a compiler warning since the function would no longer be exhaustive.</p>
<h3 id="the-rest-of-the-pipeline">The Rest of the Pipeline</h3>
<p>What about parsing, type checking, and the rest of the compilation pipeline? Formalisms exist for those, as well.</p>
<table>
<thead>
<tr class="header">
<th>Compilation phase | Fo</th>
<th>Formalism</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Parsing | Cont</td>
<td>Context free grammar</td>
</tr>
<tr class="even">
<td>Optimization |</td>
<td>Algebra</td>
</tr>
<tr class="odd">
<td>Type checking</td>
<td>Logical inference rules</td>
</tr>
<tr class="even">
<td>Code generation | Deno</td>
<td>Denotational semantics</td>
</tr>
</tbody>
</table>
<h3 id="isnt-this-just-big-design-up-front">Isn’t This Just Big Design Up Front?</h3>
<p>The idea of basing your implementation design around in an exhaustive specification might sound like a big design up front, but there is an important difference. The formalisms used in implementing a compiler are “off the shelf.” Nobody has to sit down and create them, because they have been refined over decades of compiler implementations. You simply need to know that they exist.</p>
<p>If “formal methods” sounds too snobby for your taste, you can simply call this “programming with proven recipes.”</p>
<p>And of this downside of this methodology is that it becomes big design up front in those cases when there is not an off the shelf formalism available for your use. That’s OK! The important thing is to know when these formalisms exist in how to use them, when necessary.</p>
<p>The <a href="https://github.com/craigstuntz/TinyLanguage">full source code for this post</a> is available.</p>

<div class="info">
    
    Tags: <a href="/tags/F%23.html">F#</a>, <a href="/tags/compilers.html">compilers</a>, <a href="/tags/testing.html">testing</a>, <a href="/tags/formal%20methods.html">formal methods</a>
    
</div>
]]></description>
    <pubDate>Wed, 23 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2015-12-23-Designing-for-Problems-Too-Big-to-Test.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>

    </channel>
</rss>
