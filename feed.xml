<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Craig Stuntz's blog</title>
        <link>https://www.craigstuntz.com</link>
        <description><![CDATA[Craig Stuntz's blog]]></description>
        <atom:link href="https://www.craigstuntz.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 11 Nov 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>On Authoring Presets for u-He Diva</title>
    <link>https://www.craigstuntz.com/posts/2023-11-11-diva-presets.html</link>
    <description><![CDATA[<div class="info">
    Posted on November 11, 2023
    
</div>

<p>I know this is screaming into the void, and of interest to maybe a handful of people on Earth, but:</p>
<p>I’ve purchased a number of commercial preset packs for <a href="https://u-he.com/products/diva/">u-he Diva</a>. And <em>every single one of them</em> is full of great, useful presets, but seems to make the same mistakes:</p>
<ul>
<li>The output levels are wrong, because the output level control isn’t set correctly. Your presets don’t sound great when they’re clipping.</li>
<li>The metadata are wrong or missing. (Metadata refers to the “Description,” “Usage,” “Categories,” “Features,” and “Character” of the preset. They are used when searching and are so, so, so very helpful when you’re searching for the perfect sound amongst thousands of presets … if they’re set at all!)</li>
<li>The presets are drowning in effects. I understand you want your presets to sound great, but how about having a “Dry” folder for those of us who actually want to hear the core tone?</li>
<li>The naming uses a completely ideosyncratic prefixing scheme shared by no other Diva preset. (E.g. “SQ” for “Presets which are good for sequences.”) This is an annoyance, mostly because you’re trying to solve with weird naming what would be better solved with metadata. For the “SQ” example, how about adding “Categories -&gt; Seq+Arp -&gt; &lt;pick one of the options there&gt;”?)</li>
<li>Nice to have: If your demo automates the filter cutoff or something, maybe mention that in the Usage?</li>
</ul>
<p>Here is a checklist you can use before releasing your Diva presets:</p>
<ul>
<li>Have I normalized the output level so that all the presets sound at an appropriate perceived loudness? (Hint: Your DAW probably has a LUFS meter which will help)</li>
<li>Have I set appropriate metadata on each preset?</li>
<li>Have I made any suggestions for how the presets might be used in Usage? (E.g., “Mod wheel controls filter cutoff” or “Try changing Env2 attack” or whatever.)</li>
<li>Have I added a “Dry” folder which has the same presets without effects?</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/u-he%20Diva.html">u-he Diva</a>, <a href="/tags/synthesis.html">synthesis</a>
    
</div>
]]></description>
    <pubDate>Sat, 11 Nov 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-11-11-diva-presets.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>On Learning Compilers and Creating Programming Languages</title>
    <link>https://www.craigstuntz.com/posts/2023-10-13-learning-compilers-and-programming-languages.html</link>
    <description><![CDATA[<div class="info">
    Posted on October 13, 2023
    
</div>

<p>When I first started learning about compilers, there was something important which I didn’t understand: Designing a programming language and writing a compiler are two almost entirely different skills. There is obviously some overlap between them, but less than you might think at first!</p>
<p>I think it’s important to know this because they are both very challenging problems! It’s easier to learn these skills if you take them one at a time. Your first solution to a hard problem is likely to be… well, not as good as your tenth! However, it’s pretty common for developers to build out a toy language as they write their first compiler, which means they are making mistakes and learning stuff on two hard problems at once. Worse, those two problems are correlated: A mistake on one will make your life harder on the other. Also, as we will see, although compilers are challenging at first they’re essentially a solved problem, whereas PL design is, let’s say, an area of ongoing research.</p>
<p>I think it’s easier to learn to write a compiler first, and then (if you want) learn to design programming languages. It will be harder to learn to design a good programming language if you don’t have experience with compiler design challenges (amongst other things), so if you want to learn both skills I recommend doing it in that order: Compiler, then PLs. Compiler construction is useful to nearly all software engineers, even (especially?) those who will not build compilers as part of their daytime job. Knowing the challenges of PL design is also useful, but I think in a more abstract way.</p>
<h2 id="challenges-in-compiler-design">Challenges in Compiler Design</h2>
<p>When I say that compiler design is a “solved problem,” I don’t mean that there will never be any more innovation in the space. Instead I mean that there are published solutions to all of these problems, and you can just look them up and use them/learn from them. Also, compiler design is mostly a technical problem. While there are human factors to consider, as there are in every area of software engineering (“Which error messages would be most helpful in a given situation, and how can I be sure I’m producing those?”), many of the problems that you will be solving will be strictly technical (“When a user attempts to compile a large file, does that work or does the compiler become very slow/run out of memory?”).</p>
<p>Specific design decisions you will have to make include:</p>
<ul>
<li><strong>Error handling</strong> (“When I encounter code which is incomplete or erroneous, I would like to present the user with a helpful message for each error in the program instead of immediately dying with an unhelpful message at the first error.”)</li>
<li><strong>Syntax challenges</strong> (“When you encounter a <code>-</code>, is it unary negation or a minus sign?”)</li>
<li><strong>Semantics challenges</strong> (“Can I correctly resolve function overloads per the PL specification for each invocation?”)</li>
<li><strong>Typing challenges</strong> (“Does the compiler determine type correctness via type inference, type checking, or ‘both’?”)</li>
</ul>
<p>Some of the things which make one compiler better than another are quite measureable, such as speed. Others, such as the clarity of error messages, are a bit more challenging to measure, but nevertheless can be compared.</p>
<h2 id="challenges-in-programming-language-design">Challenges in Programming Language Design</h2>
<p>When I say that PL design is a largely unsolved problem, I mean two things.</p>
<p>First, although there are published solutions for some of these problems (such as <a href="https://kframework.org/">K Framework</a> or <a href="https://redex.racket-lang.org/">PLT Redex</a>), they are not necessarily used by every designer. It is very common for PL designers to simply not use them. This is less true with compiler implementers, who tend to use off-the-shelf patterns if not libraries. Sometimes the PL designer will carefully construct a formal calculus of the language using a different system, whereas other designers will just “wing it.” Using an “informal” design process can lead to disastrous omissions in the PL design, such as <a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug)">the Shellshock bugs</a>. However, “informally designed” languages such as bash and PHP have been incredibly successful by many measures. I am not here to throw shade at them. I am just saying that PL design is complicated in terms of producing a language which is secure, usable, and popular. Using a formal model such as K Framework or PLT Redex might make your language more secure, but it won’t by itself make it any more or less popular. There is no formal solution for popularity that I can imagine.</p>
<p>Second, it’s not clear what makes one programming language more usable than another (although there have been <a href="https://quorumlanguage.com/evidence.html">some studies</a>). It’s not entirely clear what “usable” even means here, as many of the criteria seem contradictory. (“Is the programming language easy for beginners to use, and does it restrict the production of invalid programs?”) There is still a ton of room for innovation and discovery in this design space.</p>
<p>Specific design decisions you will have to make include:</p>
<ul>
<li><strong>Syntax challenges</strong> (“How do I want my PL to look? What identifiers/symbols should it use?”) Folks who are new to PL design often spend a lot of time thinking about such matters, but I’ll just say that there are considerably more challenges to come!</li>
<li><strong>Semantics challenges</strong> (“When a function is both overloaded and has default arguments, which version should a given call to that function having a given list of arguments invoke?”)</li>
<li><strong>Typing questions</strong> (Should you use gradual typing? Refinement types, dependent types, etc.?)</li>
<li><strong>Error handling</strong> (“It would be good to design my language such that error recovery is easier for implementers”)</li>
</ul>
<p>There are standard formal solutions for some of this. Syntax questions can be answered, for example, using a formal grammar, such as <a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form">EBNF</a>.</p>
<p>One of the more popular languages that I know of had a Java-like syntax imposed on the designer by management in the late stages of its design. This sounds like a recipe for disaster. Yet it became quite popular anyway. PL design seems to be roughly an equal mix of understanding formalisms, fine art, and good luck. This is not so dissimilar from other areas of computer programming; it just seems to be a more extreme case of this bifurcation of skills.</p>
<h2 id="so-what-do-you-recommend">So What Do You Recommend?</h2>
<p>I would recommend that you start your first compiler with a “toy” language. Toy languages are on purpose simple; they often have few types (as few as one), and features that are trickier to implement are either omitted entirely or are introduced a little bit at a time. They are intended to get you up and going with a working compiler quickly.</p>
<p>Here are some toy languages you can use. This list isn’t intended to be comprehensive, or even selective; rather, I just want to give you the sense that there are a lot of languages to choose from. Pick any one of them (or any other pre-designed toy language) and I guarantee you’ll be more successful in your first compiler implementation than if you just make something up as you go along!</p>
<table>
<thead>
<tr class="header">
<th>Language</th>
<th>Family</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://releases.llvm.org/9.0.0/docs/tutorial/LangImpl01.html">Kaleidoscope</a></td>
<td>ALGOL</td>
</tr>
<tr class="even">
<td><a href="https://craftinginterpreters.com/the-lox-language.html">Lox</a></td>
<td>ALGOL</td>
</tr>
<tr class="odd">
<td><a href="https://anoopsarkar.github.io/compilers-class/decafspec.html">Decaf</a></td>
<td>ALGOL</td>
</tr>
<tr class="even">
<td><a href="https://fsl.cs.illinois.edu/assets/CS422-Spring-2020-02a-IMP-BigStep-SmallStep.pdf">Imp</a></td>
<td>ALGOL</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/kanaka/mal">MAL [Make a Lisp]</a></td>
<td>Lisp</td>
</tr>
<tr class="even">
<td><a href="https://beautifulracket.com/stacker/intro.html">Stacker</a></td>
<td>FORTH</td>
</tr>
</tbody>
</table>
<p>Jeremy Siek’s <em>Essentials of Compilation</em> describes a series of Lisps which grow progressively more full-featured as the book goes on</p>
<p>Andrej Bauer and Matija Pretnar’s <em>The PL Zoo</em> is “a collection of miniature programming languages which demonstrates various concepts and techniques used in programming language design and implementation.” There are a variety of different styles of languages represented there, as well as implementations in OCaml.</p>
<p>Some of these languages will seem quite simple! They might not have features which you want, such as generic variance or monads or whatever. This is on purpose! If you want to add those features after you’ve implemented the languages, please do try and do so. But it’s a good idea to get through the simple stuff first.</p>
<h3 id="some-books-you-can-follow-if-you-want-to-read-formal-instructions-while-building-your-first-compiler">Some books you can follow if you want to read formal instructions while building your first compiler:</h3>
<p>No one book is right for everyone. Here are a few I’ve liked.</p>
<table>
<thead>
<tr class="header">
<th>Book</th>
<th>Authors</th>
<th>Compilers implemented in…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://craftinginterpreters.com/"><em>Crafting Interpreters</em></a></td>
<td>Robert Nystrom</td>
<td>Java</td>
</tr>
<tr class="even">
<td><a href="https://wphomes.soic.indiana.edu/jsiek/"><em>Essentials of Compilation</em></a></td>
<td>Jeremy Siek</td>
<td>Racket</td>
</tr>
<tr class="odd">
<td><a href="https://www.cs.princeton.edu/~appel/modern/ml/"><em>Modern Compiler Implementation in ML</em></a></td>
<td>Andrew W. Appel</td>
<td>ML</td>
</tr>
<tr class="even">
<td><a href="https://www.plai.org/"><em>Programming Languages: Application and Interpretation</em></a></td>
<td>Shriram Krishnamurthi</td>
<td>Racket</td>
</tr>
<tr class="odd">
<td><a href="https://www.itu.dk/~sestoft/plc/"><em>Programming Language Concepts</em></a></td>
<td>Peter Sestoft</td>
<td>F#</td>
</tr>
</tbody>
</table>
<p>People tend to recommend <a href="https://suif.stanford.edu/dragonbook/">the Dragon Book</a>, especially people who have not read it. I have read it, and I do not recommend it when implementing your first compiler because I want you to succeed and enjoy the journey. The Dragon Book is a much better read if you already know everything that is in it. I don’t think it’s a terrible book, but it should not be the first book you read on the topic.</p>
<h3 id="language-design-booksresources">Language design books/resources?</h3>
<p>This is hard. It’s not my personal interest, so I haven’t read as much in this area. There is a mistake which I have seen developers make over and over again, which is related to the “I will invent a toy language while I build my first compiler” mistake, namely, to invent a programming language and then expect the world to beat a path to your door to use it. There is a difference between getting your programming language to compile toy examples and producing something which will easily and efficiently handle any case that a programmer’s mind can produce.</p>
<p>When you write a programming language you need to specify it in such a way that every program that someone might write (even, say, <a href="https://en.wikipedia.org/wiki/Duff%27s_device">Duff’s device</a>) produces sensible results. If you don’t then you are building a door to the Shellshock bugs. This is hard! And to produce a language which not only handles arbitrary input in a way which doesn’t tend to surprise the user as well as being aesthetically interesting and unique enough for people to even be interested in checking out borders on mysticism to me.</p>
<p>There’s a big leap in difficulty between easier books which show you the basics of certain paradigms, such as</p>
<ul>
<li><em>Programming Languages: Application and Interpretation</em> (linked above)</li>
<li><a href="https://www.cs.rochester.edu/~scott/pragmatics/"><em>Programming Language Pragmatics</em></a></li>
</ul>
<p>…and more difficult reading which explains the formalities of PLT such as:</p>
<ul>
<li>Benjamin Pierce’s <a href="https://www.cis.upenn.edu/~bcpierce/tapl/"><em>Types and Programming Languages</em></a> (totally worth the effort, though)</li>
<li><a href="https://redex.racket-lang.org/sewpr-toc.html"><em>Semantics Engineering with PLT Redex</em></a></li>
</ul>
<p>…which teach you the plumbing about how programming languages work at a semantic level.</p>
<p>One recent paper which is a good bridge between these worlds is <a href="https://www.cs.nott.ac.uk/~pszgmh/123.pdf">Programming Language Semantics: It’s Easy As 1,2,3</a>, by Graham Hutton. I wouldn’t call it a basic read, but it does exist in between the two worlds described above.</p>
<p>Perhaps this all seems like too much, when you just want to make a DSL for your text adventure game? Check out <a href="https://queue.acm.org/detail.cfm?id=2068896">Creating Languages in Racket</a>, by Matthew Flatt.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I realize that the discussion above got into some fairly technical material, but please don’t let that put you off. I’m confident that if you follow one of the books or tutorials I listed you can produce a working compiler. You will learn a ton in the process and it will benefit all of the software you write, even if it doesn’t (apparently!) involve the creation of a programming language. Have fun!</p>
<h3 id="comments-on-this-post-elsewhere">Comments on this post elsewhere</h3>
<ul>
<li><a href="https://lobste.rs/s/tpe028/on_learning_compilers_creating">lobste.rs</a></li>
<li><a href="https://news.ycombinator.com/item?id=38001041">The orange site</a></li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/compilers.html">compilers</a>, <a href="/tags/computer%20science.html">computer science</a>, <a href="/tags/programming%20languages.html">programming languages</a>, <a href="/tags/plt.html">plt</a>
    
</div>
]]></description>
    <pubDate>Fri, 13 Oct 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-10-13-learning-compilers-and-programming-languages.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 7: Building the Mixer</title>
    <link>https://www.craigstuntz.com/posts/2023-09-21-building-a-synthesizer-7.html</link>
    <description><![CDATA[<div class="info">
    Posted on September 21, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li>7: Building the Mixer</li>
<li><a href="2023-01-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>There are two “mixer” modules in the mki x es.EDU system, the “Mixer” module and the “Output” module. Both can combine multiple audio signals into one, but they do it somewhat differently and the use cases are different. This “Mixer” module will combine up to three mono signals into a single mono output, and it can also optinally clip or invert the signal. The “Output” module will combine up to two mono signals into a stereo line level and headphones output, with panning.</p>
<p>A mixer is a pretty handy module to have, and there are different reasons to use a mixer, hence different mixers. You can obviously use this one to blend the two oscillators in the kit, making a hybrid sound with both a PWM and noise sound. But you can also use it, for example, to combine the two different envelope generators, producing one envelope which is far more complex than you could make with just one envelope generator. You could combine a key-triggered and a looped envelope, for example.</p>
<p>Another big difference between the two modules is the directions. The directions for the “Mixer” module were written by Moritz Klein and very much follow the style set out in most of the rest of the mki x es.EDU modules, with an emphasis on breadboarding before soldering, and a folksy style. Moritz frequently says, in both the printed directions and his videos, approximately, “you could use math to calculate these values, but I prefer to use trial and error.” I’ll discuss the Output module in a future post, but for now let’s just say that the directions are day-and-night different. The Output module directions were not written by Moritz and there is math involved. Good thing I enjoy that sort of thing.</p>
<p>This module, however, has directions written by Moritz Klein in his usual style. I like that, too!</p>
<h2 id="its-all-about-the-op-amps">It’s All About the Op Amps</h2>
<p>It might seem like I don’t have much to say about this kit. You’ll note that this post is far shorter than many of the others in the series. In truth, however, building this kit inspired me to write <a href="2023-04-03-building-a-synthesizer-4.html">the chapter on op amps</a>, which is by far the longest post I’ve written. So there is a lot to say, so much so that it took an extra post.</p>
<p>The mixer module is a very simple introduction to op amps, which gives just a couple of use cases. If you’d like to know more, <a href="2023-04-03-building-a-synthesizer-4.html" title="A Gentle Introduction to Op Amps">I’ve got you covered</a>.</p>
<h2 id="passive-vs.active-mixing">Passive vs. Active Mixing</h2>
<p>The instructions make a valiant attempt to explain how the mixer works in its final configuration, when it uses an op amp in an inverting configuration. It mostly succeeds, but I do think portions of it could be clearer, so I will attempt to add some additional explanation.</p>
<p>The instructions take us through three steps:</p>
<ol style="list-style-type: decimal">
<li>A passive mixer</li>
<li>An “active mixer” with an op amp in a non-inverting configuration</li>
<li>An active mixer with an op amp in an inverting configuration</li>
</ol>
<h3 id="passive-mixers-and-why-theyre-not-so-great">Passive Mixers, and Why They’re Not So Great</h3>
<p>The manual correctly identifies low output volume of the signal (caused by a high output impedance) as one problem with the passive mixer design. But it’s not the only problem. One of the problems with a passive mixer is that if you have a musical signal connected to one of the inputs and then you connect a 0V signal into another input, the level of the music on the output goes down! This sort of makes sense as the new level is the average of the signal and the 0V input, but it’s not what any musician would actually want!</p>
<p>Also about that output: Due to the lack of any kind of buffer, the amount of current in this circuit will change quite a lot depending upon what you have connected to it.</p>
<p>It’s even worse when you have more than two inputs. If you have three inputs, and you have two of them connected to music inputs, and you set the levels appropriately, then you will be very surprised when you plug in a third input and the levels change relative to each other.</p>
<p>Why? A passive mixer is just a voltage divider in disguise. And it’s not much of a disguise. A voltage divider with one input connected to ground is a regular voltage divider, whereas the same circuit with the same input entirely disconnected is just a single resistor. End users of your mixer will not expect this behavior.</p>
<p>Still, you will sometimes see passive mixers advertised as “summing mixers” and all sorts of audio fairy dust attributed to them, at a high price.</p>
<h3 id="active-mixers-with-scare-quotes">“Active” Mixers (with Scare Quotes)</h3>
<figure class="inlineRight">
<a href="/images/synth/OpAmpPassiveMixer.png"> <img src="/images/synth/OpAmpPassiveMixer.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in a non-inverting configuration with two inputs with a 100k resistor on each input"> </a>
<figcaption>
A Passive Mixer and a Buffer
</figcaption>
</figure>
<p>Klein introduces the notion of an “active” mixer by putting a op amp buffer in non-inverting mode after the passive mixer. While this is “active” in the sense that it contains active components, namely the op amp, it’s not what most people would consider an active mixer, because the mixer itself is still passive.</p>
<p>In other words, using a non-inverting op amp configuration passively mixes the two (or more) signals, and then actively buffers the result using the op amp.</p>
<p>To be honest I’m not sure why you would use this configuration, because it doesn’t fix the problems caused by the passive mixer. But it does provide one advantage, namely that plugging in a random module to the output can’t change the behavior of the mixer, due to the op amp acting as a buffer.</p>
<div style="clear: both;">

</div>
<h3 id="active-mixers-no-scare-quotes">Active Mixers (No Scare Quotes)</h3>
<figure class="inlineRight">
<a href="/images/synth/OpAmpActiveMixerWithPots.png"> <img src="/images/synth/OpAmpActiveMixerWithPots.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an inverting configuration with two inputs with a 100k potentiometer and a 100k resistor on each input"> </a>
<figcaption>
Passive Mixer + Inverting Amplifier = Active Mixer
</figcaption>
</figure>
<p>When you swap the non-inverting op amp for an op amp in an inverting configuration, however, things change. Naïvely, this shouldn’t make a difference, because what good does inverting the signal do?</p>
<p>But we’re not just inverting the signal, we are also moving the op amp’s feedback signal from the op amp input which doesn’t take the mix output to the one which does. And <em>that</em> is what makes the difference. In an inverting configuration the op amp must emit a voltage to bring its <code>-</code> input down to zero, hence the opposite voltage as its input(s). Because the op amp is always working to keep its <code>-</code> input at zero, it exactly balances the signal from all of its inputs (labeled <span class="math inline"><em>V</em>1</span> and <span class="math inline"><em>V</em>2</span> in the schematic at right).</p>
<p>This means that if you have just one input connected at <span class="math inline"><em>V</em>1</span> then the op amp will emit at its output the exact opposite of that signal; it’s an inverter. It will do this whether you have no connection at all at <span class="math inline"><em>V</em>2</span> or if you have a wire connected at ground level, carrying no audio signal. If you have two or more inputs connected, say an audio signal on <span class="math inline"><em>V</em>1</span> and <span class="math inline"><em>V</em>2</span>, then the op amp will emit exactly the opposite of their sum.</p>
<p><a href="2023-04-03-building-a-synthesizer-4.html#level-10-passive-and-active-mixers">I wrote about this in my op amps post</a>.</p>
<p>However, although the inversion is inaudible with audio signals, if you’re using the mixer with a lower-frequency signal such as an LFO or some envelope generators then you might notice the inversion. So the next step is to add another inverting op amp to fix the inversion. Klein also adds an ouput for the inverted signal in case you want that.</p>
<h2 id="distortion">Distortion</h2>
<p>The last bit added to the circuit is a diode distortion circuit, which adds a small bit of distortion to a dedicated output in case you want that. The circuit is essentially two diodes and a trimpot, and there’s an op amp to bring the level back up to match the other outputs.</p>
<p>We think of diodes as “one way valves” for current, but they don’t open linearly, and the distortion circuit exploits this nonlinearity to produce a distorted sound that can be pleasing in some cases.</p>
<p>I’m not sure why the distortion level is set with a trimpot instead of a regular front-panel potentiometer; this is the sort of control which you might want to change for different synthesizer sounds, and having to remove the module from the rack and adjust the clip threshold with a screwdriver is going to discourage that.</p>
<h2 id="building-the-pc-board">Building the PC Board</h2>
<p>Well there was no drama here at all. I soldered on the components and everything just worked. No complaints there!</p>
<figure class="horizontalTiles">
<a href="/images/synth/MixerFaceplate.jpg"> <img src="/images/synth/MixerFaceplate.jpg" loading="lazy" height="300px" alt="The faceplate of the Mixer module. It has three potentiometer knobs and six jack sockets"> </a>
<figcaption>
Mixer Front
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/MixerBackPCBoard.jpg"> <img src="/images/synth/MixerBackPCBoard.jpg" loading="lazy" height="300px" alt="The back of the Mixer module, which is a PC board with two ICS and a number of discrete resistors and capacitors"> </a>
<figcaption>
Mixer Back
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>But there was…</p>
<h3 id="that-one-weird-thing-with-the-zero-ohm-resistors">That One Weird Thing With the Zero Ohm Resistors</h3>
<figure class="inlineRight">
<a href="/images/synth/MixerOptionalOpAmp.png"> <img src="/images/synth/MixerOptionalOpAmp.png" width="156px" loading="lazy" alt="Schematic of optional op amp circuit with zero-Ohm resistors"> </a>
<figcaption>
Huh?
</figcaption>
</figure>
<p>The kit includes two <a href="https://en.wikipedia.org/wiki/Zero-ohm_link">zero Ohm resistors, which really are a thing</a>. That’s a little unusual, but what’s truly strange is that they’re totally unmentioned in the manual, and omitted from the bill of materials. They are are in the schematic (see image at right) and in the pictures of the completed board in the directions. They are part of an “optional inverting/noninverting op amp circuit” which is not in the signal path of the rest of the mixer. (See schematic at right; R12 and R14 are zero Ohms. The remaining resistors should not be installed at all; “DNM” means “Do Not Mount.”)</p>
<p>Installing the two zero-Ohm resistors puts the second op amp in the second TL072 into a buffer configuration, with the noninverting input set to ground. This is <a href="https://www.youtube.com/watch?v=WnDju2TwN5I" title="Handling Unused 
Operational Amplifiers (ECE Design Fundamentals)">the correct way to set up an unused op amp</a>.</p>
<p>I think the purpose of the zero Ohm resistors is they could be removed and replaced with a different value resistor, along with mounting additional resistors in the “DNM” positions, if you later decided to use the additional op amp for… something. They are a wire which happens to be shaped like a resistor, and hence useful when you might want to replace them with a real resistor in the future.</p>
<figure>
<a href="/images/synth/Mixer0Ohm.jpg"> <img src="/images/synth/Mixer0Ohm.jpg" width="300px" loading="lazy" alt="A close-up of the 0 Ohm resistors"> </a>
<figcaption>
Close-up of 0 Ohm resistors
</figcaption>
</figure>
<p>Thanks for reading!</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/MIXER_MANUAL.pdf">mki x es.EDU Mixer User Manual</a></li>
</ul>
<h3 id="simulations">Simulations</h3>
<p>All of these simulations are by Moritz Klein</p>
<ul>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjSkmpBRRhIIfoRC0QuDCACCAYQAqASQBqAUQA6AZwCyygBrqASuwDulWiJSFJt61nGRzlkVgwpXIFI6jtjNIRuHjRgMu6eInZwNFBxMAjsAE5eEYHBkeDwcP7p3rahMjaSIhS4MUgiVdCJKQhB+XZWjXHC2exWFLQFaAgy9dZgTjQA+igjkCNh2LQjtNBYi0tLKCgY0rgTsHBgI6wjGCMII7gdAhIFWGjiA1nNpWMTUxgzcwvLy6vr61vwu-uHTanACGlFW3hQ1hiq2s4BkrBkbWyIAw0AwCEWaDQVgECEgWG6aBRaKC2R2GFoWDxSCROQshHBxTBniEThcDJZQ280K5zgskMG4gFEKq7MZvns3l8zgA8tzrJCpULFaLOt5aCyYgTJEyRGBZuNJtMCW9lnj4Ph1mBDdsyHtdhwAEYSLmEBBExZ6yAEPxAA">A simple “active” mixer</a> (passive mixer with an op amp output buffer)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjYUoSpBApaKSgRC0QuDCACSAOQBqAUQBKAFQUBxADoBnALKyAGmvYB3SrUEEZha0PtQLVm1kKvHkyO1U83HghgMijuUBKUcDThgjAI7ABOnqGBhAHhYPBwvv5C0jTBeTKCFLhRSLHI8UkIaUXJ+YKZWezWFLROpLlowuEIAPoo-ZD9wdi0-bTQWFhZcBi0GPa4uMOwcGD9rP0Y-QO4rZDtTli0krVNcKIlg8OjGOOT07NzC0v0uAMw8Jvbu6sHACGYlEKAEQiiYJs4BkrBkzSyIGYuGg+AEZTAIjYGDQCDQuBYGAglxaln4oKc5KEYA8PksAhsNIhNnBdJBXmSTh8AHlmUJwSl+ZUfG0hCI+adJCgueBVkMRmNTv0sNMEFg0GQiSQMAgUGA0GsfltNhwAObswVUyUxRJ8vUeKn2jJzdgAIwkYGoxCQWBQSEyuucQA">“Inverting” mixer</a> (an active mixer with an op amp in an inverting configuration)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjQhpStSyE+VPrRC4+AEQDyAVQBCAGQCiAHQDOAORUBxAIIAVAJIA1dRoCyxgBoqASuwDulWpBAERbj4XGRnru44Xu4ovlDs9jSEQVh8CGB8WHFQIOIx7kju2dAI7ABOgSDJ8THFKe5g8HCR0aGSNIkeDe4UuHA0qTl5hQhlnkUDldX+bhS04aR1IGgofjQA+igLkAuJ2LQLtNDJu3tYaFSQyzDwYAusCxgLCAu47GNp4VUY4n3DKCipuEsraxgbLY7fZ7Q5YSBoFawODnS7XH73ACG-C+n1CHTRHnAfFYfCqIxAzFOMLIuDJE0kuDiJAOqXx8AChE+PnSzJQYEIERcKAxHI8GJ5XJRLMG4X8AHNhQJOUyvlhaPN-IUeaE+bKPHzhtUCuU+ANMUNwCN2JLMcEPIKhNkIjJdR4hEa2Q7sgESs0kilpUKDYKDS12MiDQ63V6vk1cUaCcSyKTcGB6IRCFUEJAELM6cblQLQr7BVqGY8qt52Zy2EQLdawJCTv9AVVYGgyQIMGBkmgyCdoWQLucONzs-zhpgbYOjcO2JBxFVhy7C6nOW62LwjX1Uq9fqt1vK1qdGwhwUy0GgELQEJ2zj21ozvG7fEEmkrpua78UH5GGVF3q-4k1zZU0imnTWjAeSPPg4iYrQloKmuyw1lumzbPs+BxrQWBzEQUIXnCVzLPcABGEjli+bDoOA8ZfP4QA">“Double negative” mixer</a> (has another inverting op amp to allow for a non-inverting output)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjW5VrSH7UqaEANwYQAQQAiAKQCqAZQAqUgEIAZAKIAdAM4BJAHIAFBSoM6Aats1L2Ad0q1IIApMKv3XqE5duOJ7eKL6Q7ABKYiiBWJL0klhxUGKUcDQpbjAI7ABOAYLJCISxkm5g8HCR0W4eYhLuDW4UuOlIWcg5+cW1DV69ZeCV4a4tKAKkNSBo4ykIAPoo85DzYBjYtPO00Em7u5hYmBibMPBg86zzGPMLuOyjIPgCFcdTFSgoKbiLy6vr-Fsdnt9tgjidYHBzpdrt87gBDSgfdwxdzpD61cCSViSCrDEDMU7wBCuSBoMAIHAzOKEBCicrDfyEJGhARMz4oMCEPzOGK1Tmo2oo8LONk+VkhMLsADmiPZWC5ov4AiyeQF7n5oo5XPplVVSUkdXRjUGuPg0uRgTWFsEJUy7AA8oUDfKhsyXSrnPrjU73O7-EaAyi6uEEQGXV6UC7PlbsUM8YTECSSmgsJBabhaMSMO042b8rzrYGOqaqg8KiF+WwiNbymgfis1ht5oRoAhaZBXGAUMVsyhjssIWQLucODy0UH0hVMH5HQWpzjy0Npyqy2muV62AgcWuUv2lg3-psW22yWSJF5sAgSAOzsPVozvF7+oIreFuraggVPzqzVFaCjPwSF8TTEBA3BzLJW3uSAWg7a0SUEWhlRADAln3P4mwWBMoXOa5UPmO4wDQAR-wGGhUO9H90hgNBCDQVphmGCATHMFRwH8BArS1HgDWo81iQEOoBPcf87WcTjePA20C2FGhpLaaSmg46SUR6YDuR4601KNcIZWEz99Ioj1NMjLkJJrdgiJIgCrS3T5v1zajoCIMASUYyokBYiwUMs4ipi9OyfSoyDEBALy2LucSrUOMzottXSaCQn1hNxT5jPM+UpMCeLlOyrKgvYAAjFDiRcaMMEnckVSAA">“Adjustable” mixer</a> (has adjustable input levels, plus inverting and non-inverting outputs)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHiLStYSgzg4-FHRBEQAdQCSAFQASAHQDOAZQDyAMTmqAwgBkZABWMBRACKqNAVTnG77AO6VakEASGE3H71Geu7jhePih+kOwASjwoQVhC9EJY8VA8lHA0qe4wCOwAToEgyUIIhHFC7mDwcFEx7p48uEIN7hS4GUjZyLkFpfVNhS3C1exubSi0IKR1UxOpCAD6KAuQC2AY2LQLtNBYfMkHWLQbaDgrsHBgC6wLGAuLuKOQ45NVGJO8lZAoKKm4Sys1hsjttdvtDkcTmcYPArjc7v9HgBDSg-DyxDwZH71cBCVhCKrVbIXOD0U6EDCxU6JLCk1KE+ABAS-MKTZkeMCEfwuWL1TmY+oYiIudmswbhdgAc1RLKwXPZR0m2XyAo58rRKH5XxGBWKHgG2P1FWGjOlhuC6KCZSy7A0RRSfC5bEgk0dNpceoanrl3MtfsNLXYKIDPu9XN+6xA+JN8CjMPgZKwCDcvDCGFw62o2sZBV5-oxhuzNTGwlKavAYAQzSF4DQANW602C0I0FoaFox3wkHJJHw51h1yuHB5WILGSqmH8drzE4JVVe3eNERLVTLerYVdLXPc73rQKbLbbtAQCCacvoeywdfjZEHayZPj13iCkYivWtFufRVfMYi0U+34JAMFqVDwCDuJ0WTQLkJbtK6GJuEEHapJSe6NiCOwQvgGa0OeSb9pcd53KhjxgO2MwNFWLIDEWxLtmgSAyAAcg4cjgAECCRpqXKcc0GQRNKyaugMQkeLw7o0FxHTWnmwo0DJ0n9BUHEyRifSAb6vF+uphZSjQyEWqJ8S-MqLhaW65lCuwZEfBihmUhptHIEQYCIUSRKMSxdggBg1nkQBepUfaxoMvxFyeaxEgcZGV48TF1oCfpkyBchhImZp8UQR+CUqVaWXlL6FrrOJbrFSZASGmVHg+lVETcFQlSUv0TqUhQryTIYJiqMxchmExajyAAmqociRDIACyXAeBgSB4FiuHgO0bXgJMGCQAA0hVfh4FxNUZspPLbU1vivPt-g2dVLUlUdPo7tU3S4HK7lEhAmg6CAnXGCAPV9QNciDSqM5rYKjX8aiIzSoqi0GalJDbv4uqpcdUN4MhO5oIyLiri1-LY7iVmI68x14+sNahXJKPpkkSNWWae27U6uBo1OW64rj85s-DFORusGSU-xQZFEjuOQGW6z8tQkbRuTxK0GRaAEJ8uHYAQrnIHLCvPDtpxwJSTpEhVGK8y+BLA-4AAmGlVUVZsEkxcu8OwluVWbLviXbDsoAEYbBRWa2FSkbD+zOvO+iHwfjmby7PKzbCSBuptgwgWBocCWwYNAGCuR255gHKGNhARt43BwABGPknpQGAtS6K3vP4QA">Entire circuit</a> (as breadboarded, adds diode clipping)</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=_vrc4qgBqbA">Introducing the mki x es.edu DIY S&amp;H/Noise and Mixer kits</a>, by Moritz Klein (3:57)</li>
<li><a href="https://www.youtube.com/watch?v=q8tmUgaXrEQ">Designing a 3-channel mixer with diode distortion from scratch</a> by Moritz Klein (26:38)</li>
</ul>
<h3 id="web-sites">Web Sites</h3>
<ul>
<li><a href="https://modwiggler.com/forum/viewtopic.php?t=263624">Mod Wiggler thread</a> (Pretty empty when I looked)</li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-mixer">ModularGrid page</a></li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Thu, 21 Sep 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-09-21-building-a-synthesizer-7.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 6: The Logic Circuits Model of Computation</title>
    <link>https://www.craigstuntz.com/posts/2023-08-11-building-a-synthesizer-6.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 11, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li>6: The Logic Circuits Model of Computation</li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>I’m going to step aside from circuit building to talk about the logic circuits model of computation. This may surprise you, reader, as it would at first seem to have nothing to do with building an analog synthesizer. I have a few reasons for doing so. One is that I’ll be talking about analog computers in a future post, so think of this post as a gentle introduction to the topic of alternative computing models. The second is that we can see a synthesizer, whether digital or analog, as a dedicated piece of hardware which can solve a restricted set of computing problems (producing sounds), and I find it interesting to look at a synth from a computing point of view. But analog synthesizers, anyway, are not engineered like most computers!</p>
<p>If you’re strictly interested in synthesis or electrical engineering, then you might want to skip ahead to the next chapter, but if you’re reading my blog then you migth find the following interesting!</p>
<h2 id="von-neumann-machines">Von Neumann Machines</h2>
<p>One model of computation, which we’re all very familar with, though perhaps not by this name, is the <a href="https://en.wikipedia.org/wiki/Von_Neumann_machine">Von Neumann machine</a>. You are reading this post on a Von Neumann machine right now. It’s so common that we generally just call it a “computer.” Nearly all “computers” produced today are Von Neumann machines, because they are digital computers with a processor, a control unit, memory, mass storage, and I/O. But other computing architectures are possible, and occasionally even useful!</p>
<h2 id="turing-machines">Turing Machines</h2>
<p>As a kind of a mental warm-up, consider the <a href="https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/one.html">Turing machine</a>. The Turing machine was invented years before the Von Neumann machine, and it was not intended to be constructed. Rather, it was a system for modeling computations which we might otherwise think about in our heads. It uses a different system for computation (see the link for details), without memory or random-access storage, but it’s provably equivalent to Von Neumann machines in terms of its computing capabilities. So in this case we have two different models of computation which can solve the same problems, at least if you ignore performance.</p>
<h2 id="logic-circuits">Logic Circuits</h2>
<p>Another model, which used to be somewhat common, but is far less so given that powerful CPUs can be had for pennies these days, is the logic circuits model. In this case instead of a CPU with an instruction pointer which goes through a list of instructions, fetches data from memory, operates on that data, saves it back to memory, etc., we have a far simpler device which is just a bunch of logic gates. This is so simple, in fact, that it can be efficiently simulated on a Von Neumann machine, so we can either build a logic circuit from raw gates or we can simulate it on a general purpose computer; the result of the computation will be the same either way.</p>
<h3 id="an-example-circuit">An Example Circuit</h3>
<p>Having said that, it’s still an interesting model, and it still has applications today. So let’s give a quick example. Consider the following function in TypeScript:</p>
<pre class="typescript"><code>function doTheThing(a: boolean, b: boolean, c: boolean): boolean {
    if (c) {
        return a &amp;&amp; b;
    } else {
        return a || b;
    }
}</code></pre>
<p>This function is of questionable utility, but will serve as a simple example which we can easily translate to a circuits model. It uses a control boolean, <code>c</code> to decide whether to do a boolean <code>AND</code> operation or an <code>OR</code> operation on its other two inputs.</p>
<p>What would a circuits model of this function look like? Well, we have <code>AND</code> and <code>OR</code> as fundamental operators in a circuit, so we can just use those:</p>
<figure>
<a href="/images/synth/2Gates.png"> <img src="/images/synth/2Gates.png" loading="lazy" alt="An AND and an XOR gate."> </a>
<figcaption>
A good start!
</figcaption>
</figure>
<p>So far, so good, but how do we handle the if/then logic? One way is to compute both values, and then decide on which one to use based on the <code>c</code> value:</p>
<figure>
<a href="/images/synth/LogicCircuit.png"> <img src="/images/synth/LogicCircuit.png" loading="lazy" alt="A logic circuit equivalent to the TypeScript code above."> </a>
<figcaption>
Logically correct
</figcaption>
</figure>
<p>Progress! We have a working circuit. From left to right, we compute both the <code>AND</code> and <code>OR</code>ed values, then look at <code>c</code>. We put it directly into one <code>AND</code> gate, and also into another <code>AND</code> gate after first passing it through a <code>NOT</code> gate. Finally we take the <code>OR</code> of both <code>AND</code> gates to see if the output should be high/on/true.</p>
<p>We can prove this works via the following truth table:</p>
<table>
<thead>
<tr class="header">
<th>a</th>
<th>b</th>
<th>c</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>F</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="odd">
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="even">
<td>T</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="odd">
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="odd">
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
</tbody>
</table>
<p>You can take a moment and work through the truth table for both the original TypeScript code and the circuit above to prove that they’re the same in all cases. We could leave it at that and be done with it, but looking at the truth table we can see that a somewhat simpler circuit would do:</p>
<figure>
<a href="/images/synth/EquivalentLogicCircuit.png"> <img src="/images/synth/EquivalentLogicCircuit.png" loading="lazy" alt="An equivalent logic circuit to the circuit above, but with five gates instead of six."> </a>
<figcaption>
Same output, fewer gates
</figcaption>
</figure>
<p>This circuit uses only five gates, instead of six in the original. If you like, you can take a second to convince yourself that the circuit above returns the same values as the truth table, the first circuit, and the TypeScript code. They’re all equivalent.</p>
<p>So even though it might <em>seem</em> inefficient to compute both branches of the <code>if</code> and then pick one, appearances can be deceiving. In general, I worry far more about whether my programs are <em>correct</em> than I do if they are performing as fast as possible (but possibly returning an incorrect result!). If you do need to optimize some routine, it is important to compare the optimized versions in a profiler, not just squint at the code.</p>
<h3 id="applications-of-the-logic-circuits-model">Applications of the Logic Circuits Model</h3>
<p>This is sort of intellectually interesting, but is there any point in the equivalences above? Why would we bother doing this when general-purpose CPUs are so cheap? It would literally cost more to build a non-trivial circuit with distinct gates than it would to build it on an Arduino or similar, so why am I bothering explaining all of this?</p>
<p>Aside from, you know, building logic circuits, which is sometimes a thing that people do, there are a few cases I can think of where thinking in this model is directly useful:</p>
<h4 id="compiler-optimizations">Compiler Optimizations</h4>
<p>If you’re writing a compiler optimizer, you might directly use boolean equivalences such as <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws">DeMorgan’s laws</a> to rewrite expressions into other expressions which are guaranteed to return the same result.</p>
<h4 id="gpu-programming">GPU Programming</h4>
<p><a href="https://developer.nvidia.com/gpugems/gpugems2/part-iv-general-purpose-computation-gpus-primer/chapter-34-gpu-flow-control-idioms">In GPU programming, you often need to write branch-free code whenever possible.</a> Note that the circuits model in the above example was branch-free, whereas the <code>if</code>/<code>then</code> in the TypeScript code was a branch.</p>
<h4 id="homomorphic-encryption">Homomorphic Encryption</h4>
<p><a href="2010-03-18-what-is-homomorphic-encryption.html">Homomorphic encryption</a> refers to performing a computation on encrypted data, resulting in the cyphertext of the result of the computation, without ever decrypting the data. It sounds impossible, but turns out to be merely very difficult. With a little thought you will see that if you can’t decrypt the data, then you can’t do a conditinal branch based on some intermediate value (because that would require you to know what the value is, and you don’t; it’s encrypted).</p>
<p>So homomorphic encryption systems often use a logic circuits model of computation, which can be branch free, as shown above. In particular, <a href="https://crypto.stanford.edu/craig/">Craig Gentry’s 2010 thesis</a>, which introduced the first fully homomorphic cryptosystem, used this model.</p>
<h2 id="mental-exercise">Mental Exercise</h2>
<p>My real agenda here is to get you thinking about different kinds of computing models, because next we’re going to talk about analog computers, and they’re far weirder than logic circuits!</p>
<p>In the next post in this series I’ll <a href="2023-09-21-building-a-synthesizer-7.html">building the Mixer module</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cs.brown.edu/people/jsavage//book/home.html">Models of Computation: Exploring the Power of Computing</a>, chapter 2: <a href="https://cs.brown.edu/people/jsavage//book/pdfs/ModelsOfComputation_Chapter2.pdf">Logic Circuits</a>, Savage, John E., Addison-Wesley, 1998</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>, <a href="/tags/computer%20science.html">computer science</a>, <a href="/tags/homomorphic%20encryption.html">homomorphic encryption</a>
    
</div>
]]></description>
    <pubDate>Fri, 11 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-08-11-building-a-synthesizer-6.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 5: Building the VCO</title>
    <link>https://www.craigstuntz.com/posts/2023-05-22-building-a-synthesizer-5.html</link>
    <description><![CDATA[<div class="info">
    Posted on May 22, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li>5: Building the VCO</li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>Actually building the <abbr title="Printed Circuit">PC</abbr> board incarnation of the VCO was quite a bit easier than <a href="2023-03-02-building-a-synthesizer-3.html">getting it to work on the breadboard</a>. Really there was nothing tricky about it; I just soldered it together and it worked well the first time. I don’t really remember how long it took; I’m thinking 2-3 hours? It was certainly much easier to solder than <a href="2023-02-22-building-a-synthesizer-2.html">the power supply</a>, where the large ground traces made getting the solder joints hot enough difficult.</p>
<p>This once again reinforces my feeling that I made the right decision getting the mki x es.EDU kits instead of some of the other synthesizer kits on the market. The emphasis on breadboarding allows me to make and fix mistakes, and that’s the best way to learn. When you connect components to labeled holes on a PC board, well, there’s not a ton of opportunity to screw things up.</p>
<p>When I was in high school I occasionally built <a href="https://www.heathkit.com">Heathkit</a> electronics kits. I still have my Heathkit DMM that I built decades ago. Their motto was, “We won’t let you fail.” Now I am thinking it would have been better if they did let me fail, just a little!</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCOFrontPanel.jpg"> <img src="/images/synth/VCOFrontPanel.jpg" loading="lazy" height="300px" alt="The front of the VCO, which is a PC board with two ICS and a number of discrete resistors and capacitors"> </a>
<figcaption>
VCO Front
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCOPCBack.jpg"> <img src="/images/synth/VCOPCBack.jpg" loading="lazy" height="300px" alt="The back of the VCO, which is a PC board with two ICS and a number of discrete resistors and capacitors"> </a>
<figcaption>
VCO Back
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/HeathDMM.jpg"> <img src="/images/synth/HeathDMM.jpg" loading="lazy" height="300px" alt="A Heathkit IM-2320 DMM"> </a>
<figcaption>
My Venerable Heathkit DMM
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<h2 id="differences-between-the-breadboarded-vco-and-the-pc-board-version">Differences Between the Breadboarded VCO and the PC Board Version</h2>
<p>The PC board version has some extra components which are not used when you build the VCO on the breadboard. These are mostly discussed in <a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">the instructions</a> in the section entitled “Module Assembly Appendix,” so I’ll refer you there for an explanation of what they do.</p>
<p>The is a component which is added to the PC board version and which is not mentioned in the “Module Assembly Appendix.” The PC board version adds 1k resistors in front of the two output jacks. Presumably this is to protect the circuit if the output is accidentally shorted to ground while plugging in a patch cable. Putting a 1k resistor here ensures that there is always some resistance on the output, even if the patch cable momentarily joins the output with ground while plugging it in/out</p>
<h2 id="tuning">Tuning</h2>
<figure class="inlineRight">
<a href="/images/synth/NovationPitchCVCalibration.png"> <img src="/images/synth/NovationPitchCVCalibration.png" loading="lazy" width="400px" alt="CV calibration instructions for the Novation SL MkIII keyboard"> </a>
<figcaption>
Pitch CV Calibration Instructions
</figcaption>
</figure>
<p>Nothing takes the romance out of analog synthesizers faster than tuning. When you play a note, let’s say middle C, on a keyboard, you would ideally like the VCO to oscillate at a corresponding value of 261.63 Hz. Many things have to be set correctly for this to happen!</p>
<p>Let’s start with the keyboard: It will emit a pitch control voltage when you play a key, but will it be the “correct” voltage for the modules you use? My keyboard has a “CV Calibration” feature which allows you to change the pitch CV emitted when you press a key.</p>
<p>So my first task was to connect the keyboard’s pitch CV output to a voltmeter and adjust this signal to the expected values. What are those? <a href="https://notebook.zoeblade.com/Pitches.html">this list</a> seems fairly standard. (The <a href="https://en.wikipedia.org/w/index.php?title=CV/gate&amp;oldid=1093674895#CV">list of voltages currently on Wikipedia</a> sets 0V = A instead of C. There has been disagreement on which note 0V should correspond to over the years, but for Eurorack you’ll want it to be C.) I <em>do not</em> recommend doing this by connecting to a sound device and tuning it by ear, as the instructions suggest, because the sound device itself might be out of tune. One thing at a time!</p>
<figure class="inlineLeft">
<a href="/images/synth/VCOTuning.jpg"> <img src="/images/synth/VCOTuning.jpg" loading="lazy" width="400px" alt="The VCO during tuning. A digital tuner is shown on a computer screen in the background of the image, as well as the right side of an oscilliscope. The digital tuner shows that the VCO is about 9 cents sharp."> </a>
<figcaption>
Almost, but not quite!
</figcaption>
</figure>
<p>Unfortunately, I found a firmware bug while doing this! Adjusting the “CV 1 Low” and “CV 1 High” dials didn’t change the pitch or produce any visual indication that they were doing anything. I eventually figured out that although they were adjusting the pitch I couldn’t hear the change until I pressed another button to change to the other control. I guess I will report that to Novation. At any rate, I was eventually able to get the output voltage correct.</p>
<p>That sorted, I could then connect the keyboard’s pitch CV to the VCO’s “1V/oct” input and tune the VCO. There’s <a href="https://www.youtube.com/watch?v=dd1dws6pSNo&amp;t=1253s">a video of Moritz Klein tuning the breadboarded version of an early version of this project</a> which you can watch to see the project. I do think he makes this process seem a bit easier than it actually is, though!</p>
<p>When you’re first tuning the VCO, it might be <em>way</em> out of tune. Here are some tips for tuning the VCO:</p>
<figure class="inlineRight">
<a href="/images/synth/VCOCompleteBack.jpg"> <img src="/images/synth/VCOCompleteBack.jpg" loading="lazy" width="300px" alt="A photo of the back of the completed VCO"> </a>
<figcaption>
Note 4 thermistors directly above the trimpot
</figcaption>
</figure>
<ul>
<li>Warm up the VCO by powering it on for 15 minutes or so before you start</li>
<li>Try to avoid handling the module too much (although it’s difficult to avoid!), and especially don’t touch the temperature-sensitive components such as the thermistors and transistors</li>
<li>Like Moritz does in the video, I used a hardware sequencer to emit an alternating pitch and used a plugin tuner. But I also connected a software instrument so that I would have an audio pitch reference as well.</li>
<li>The first time you tune, start with a narrow interval such as one octave. Then expand the interval. Later you can go directly to five octaves or whatever.</li>
</ul>
<p>When you are tuning a mki x es.EDU module which is <em>not</em> on a breadboard, the 1k precision trimmer (“offset”) and the coarse/fine pots are on opposite sides of the module! So the process of tuning involves a lot of handling the module as you flip it back and forth. This seems unnecessary and it’s probably my biggest complaint about the VCO. Why not make the trimpot accessible through the front of the module?</p>
<p>Also, while you’re handling the module, be careful not to touch the line of 4 thermistors, which are right next to the trimpot! They are there to keep the pitch stable even when the operating temperature of the whole module changes (due, perhaps, to a change in outside temperature or internal heating of a nearby power supply). Touching one will throw the pitch off!</p>
<p>I found having both a software instrument playing an audio pitch reference as well as a tuner helpful when tuning for a couple of reasons. First, my tuner only reports the note name, not the octave. When I was first tuning the VCO I wasn’t sure it was even playing the correct octave! Second, a tuner will tend to jump between the “actual” note that you’re playing (say, a C) and its relative fifth (G, in this case). Having an audio reference makes it easier to distinguish these, and it’s very easy to do when your keyboard can emit both MIDI and CV at the same time.</p>
<p>Some modern analog synthesizers have an auto-tune feature, but the mki x es.EDU VCO unfortunately does not have this nicety.</p>
<h2 id="instructions-errata">Instructions Errata</h2>
<p>One kind of funny omission from the instructions: For whatever reason, one of the resistors, R11, was never shown assembled in the photos. Looking at the schematic it’s certainly needed, and an appropriate resistor is included with the kit.</p>
<h2 id="test-point-voltages">Test Point Voltages</h2>
<p>Someone was asking for this data, so here are the voltages I measured at the various test points on the PCB with the completed kit.</p>
<h3 id="before-tuning">Before Tuning</h3>
<p>Before I tuned the oscillator, I measured the voltage at test points A-D.</p>
<p>For test points A-C, I moved the large coarse tuning potentiometer when taking measurements. For test point D, I moved the PWM Width potentiometer when taking measurements. In all cases I took these measurements without connecting any kind of external CV signal, which might have changed the “DC” signals into something else entirely.</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Signal type*</td>
<td>DC</td>
<td>Saw</td>
<td>Saw</td>
<td>DC</td>
</tr>
<tr class="even">
<td>Pot at 0%</td>
<td>0.37V</td>
<td>3Vpp, 8.92 Hz</td>
<td>3Vpp, 8.92 Hz</td>
<td>-1.39V</td>
</tr>
<tr class="odd">
<td>Pot at 50%</td>
<td>0.46V</td>
<td>3Vpp, 273 Hz</td>
<td>3Vpp, 273 Hz</td>
<td>0.08V</td>
</tr>
<tr class="even">
<td>Pot at 100%</td>
<td>0.52V</td>
<td>3Vpp, 3905 Hz</td>
<td>3Vpp, 3905 Hz</td>
<td>1.39V</td>
</tr>
</tbody>
</table>
<p>*The signal type when no CVs are connected to the input jacks.</p>
<h3 id="after-tuning">After Tuning</h3>
<p>I also measured the voltage out of the oscillator from the PWM jack after tuning and with a “C3” (one octave below middle C) CV voltage on the 1V/Oct jack. This is an <a href="https://www.edn.com/ffts-and-oscilloscopes-a-practical-guide/">FFT</a> of the square wave which you can see in yellow. It’s cool because you can see the <a href="https://www.prosoundtraining.com/2010/03/13/square-waves-and-dc-content/">harmonics</a> in the FFT chart.</p>
<figure>
<a href="/images/synth/SDS00001.png"> <img src="/images/synth/SDS00001.png" loading="lazy" width="600px" alt="FFT of voltage measured from output of the VCO"> </a>
<figcaption>
FFT
</figcaption>
</figure>
<h2 id="whats-next">What’s Next?</h2>
<p>In keeping with the semirandom nature of the posts in this series, I will have a few things to say about <a href="2023-08-11-building-a-synthesizer-6.html">alternate models of computation</a>. Stay tuned!</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">mki x es.EDU VCO User Manual</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://www.modwiggler.com/forum/viewtopic.php?t=257249">Modwiggler thread</a></li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-vco">Modulargrid page</a></li>
</ul>
<h3 id="simulation">Simulation</h3>
<ul>
<li>The <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEJ1Q5U4ZHBFgpk6WxgYw0WiELRizKLwAmMuUlRtR48ImOZwAOQZgGA3gHcDbWdO6GLi5yLET3E39zS0heAGM-M0CogOQBRUxoY3hUtKIuPCSKOwQhQUJ0VGRhGDg+AHNYyQTq2Tw6HxdTOI9iOhiw5uCYzzd4ptcakzBUAWGdAEMZMclkJk55uaZx0ZnwdOz7SEZkMkgBFCQMLBywPMICopKN1N9Fplklh8lZHWal2TfuWa-G+9Gq2Q30BkgcOkiLyeTH6S0UsFSECwVCEhVQDBIqAI5CgCL4ACcoMsieRZm40rwqm5xONqQwYe8SbQmODoToAC4iQgWV50TjtXkkvzJISQRCIBg4ARS-CIN4wDHnBglRDUem4BgoW4gXTsABmkwArgAbdmUrmEDolCT8y2SBpEsKczh2K2FLkCR7WonccAqPBy0aUQgUHDiHYiBX4PDouyIATIHCWpPa3UGk1m5qET2C-k8v46Qn8nMF4uPbwk9K8ABKHvLljL5kgDLYDDcEkSShrdbB40b5DWiTb6072F4RblcXdnEn9saTa6IlnsmnDn67rC5AWy72fOXNPAt3hcAwADEAJYAO3Y5pdDoHNoY95wch8E7WK5ty4r5LuW5EUhAh4gG9oe5wKAiGAAMIAPaTPiADON5FiBvSoaq87gfA44AQcxKLHhpK0uo1BwN2BGrAeFHgC+nYgMOPyOriiDkehdrUUgzZMcOg6OmO75Tl+MaSBuR5kdMbj0mwtT2MOqw2h+mwKqgxiurgcCKkQkbJOi6A4OKYwYm2YDulhZEuJJWqwjC-CMDIH4hny96SgEYnwoUgjpOkwgAAomkhIAAOrnro7IABY4ZwznolyAQMDFv7YbW3AOS+9kBJadE8R2fEsclPBxWYKVxQIxGtiMOXwixWZxTFnjgPFNlFqZjWxQ1pUkm2ZFVPyJV9qZrAtgCHStZJCW8NM5AjVq6DTXQWRIDIyibC60CHBQqltgIBVYiIDBrbg9QIMYSAlDgbkTfRQIyb8AwgAtGDcMtaTaSp8WsKqBBPngmpZJwMBvXpBmeoQxmmRSLhTQ10RpZxNmQ7Dg2YFqcOMrNTZMOj9hWb4rK7ldNFkjhrIHqCRGVnckO-KTt21GEhIk7MJPCa2ODYVUzMSKyCRlbwqA8OAtNuMJsh04eCTSASIAyVJgurLLiVkYSZOy2TBlEgM5lyw1PGwwrfMC1jmp0GqDVWeL8CYOaav5r8KC86SS4fhWM7O1xbDnSoEgYKO0EAGogD557suEYUgAAkpeAAOhpms1tULKZmUaxLm52b14DJxnJkfsjqS4vYdo+YFACyIBQQHAAy7AAG7sMatk2qZWJ8s3cL0ESPu5YHgXl379ysoUfaD6+A+rFnSej80a4iY+eMbgP8+Pm8n46AAHku+YOI9v3teMmNMEHIdhQAOghFe2Qs9KrBhe14yvbnHmKICniXA8DTmLqmcC-zT9-3zX0FPTO+N92KAPsB1RWac57yw6i6VkxsiSezWtoX2L8y4Xw3i6YEOtzoujEGbVsmAmCv14Fg+Mgs0AkmKBgA+Pc34wXolkYibZSCoIRHAPAL4UDoCJFzLIhBeCMPFNLahWI2AaDwAmZUrBID8ykQ0H6uJ4AQFUbwIAA">full VCO</a> (as breadboarded; this is missing a few components not on the breadboard such as thermistors and output protection resistors)</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23). This is a super-short overview with a demo of the full system.</li>
<li><a href="https://www.youtube.com/watch?v=MMif8sz_6Cc">Erica Synths .EDU VCO - Building, tuning, playing</a> by Synth Diy Guy (17:53)</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Mon, 22 May 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-05-22-building-a-synthesizer-5.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 4: A Gentle Introduction to Op Amps</title>
    <link>https://www.craigstuntz.com/posts/2023-04-03-building-a-synthesizer-4.html</link>
    <description><![CDATA[<div class="info">
    Posted on April  3, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li>4: A Gentle Introduction to Op Amps</li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>There are approximately 11868 op amp tutorials on the web. I’m going to add the 11869th one, because op amps are really important, and because I don’t think most of the existing explanations are as clear as they could be. I think I can improve on these in two ways:</p>
<ul>
<li>By <s>telling you a bunch of lies</s> explaining concepts in terms of gross but useful overgeneralizations</li>
<li>By going slowly and explaining them in terms of “increasing levels of detail”</li>
</ul>
<p>So let’s start out easy.</p>
<p>This is a long article and there’s no need to read it all in one sitting. But each “Level” builds on those which come before it, so make sure you understand Levels 0-4 before you start reading Level 5. However, each “Level” is self-contained, which is to say that if you read to Level 2 and you don’t want to read any further, that’s fine; I’ve tried not to spread important concepts across multiple levels.</p>
<p>Feel free to <a href="/about.html">reach out</a> if something doesn’t make sense to you.</p>
<h2 id="level-0-what-is-an-op-amp">Level 0: What Is an Op Amp?</h2>
<p>An op amp, short for “operational amplifier,” is a circuit (details unimportant, at this point), which is widely used in analog electronics in general, and, of interest to people who might be reading this series, analog synthesizers. It has two inputs and one output, although multiple op amps are often packaged onto a single integrated circuit. One input is called the <code>+</code> or <code>non-inverting</code> input and the other is called the <code>-</code> or <code>inverting</code> input. There is one output (which is on the right, in the diagram below).</p>
<figure>
<a href="/images/synth/OpAmp1.png"> <img src="/images/synth/OpAmp1.png" loading="lazy" alt="Schematic symbol for an op amp. It's a triangle facing to the right. There are two inputs on the left, one labeled + and one labeled -. The output is on the right and is not labled."> </a>
<figcaption>
An Op Amp
</figcaption>
</figure>
<p>Like may stories I will tell in this post, this is a lie, but it’s a white lie. There are a bunch of details I’ve omitted. We will get to those as they become relevant.</p>
<p>When you’re looking at a schematic and see the symbol above, you can say, “Aha! That’s an op amp.” You’ve already learned something useful!</p>
<p>Not every component with a triangle and a <code>+</code> and <code>-</code> input is an op amp. This is not an op amp:</p>
<figure>
<a href="/images/synth/OTA.png"> <img src="/images/synth/OTA.png" loading="lazy" width="200px" alt="Schematic symbol for an operational transconductance amplifier"> </a>
<figcaption>
Not an Op Amp
</figcaption>
</figure>
<p>The above is… well, don’t worry too much about what it is; that’s not what this article is about. The important point is that when you see something which looks like the first picture in this article, that’s an op amp. When you see something which looks <em>sort of</em> like an op amp but has a bunch of extra stuff, then it might be something different.</p>
<p>The “operational amplifier” gets its name from the op amp’s ability to perform certain mathematical operations on an input. We will give specific examples in the next level, but if you’re wondering where the name came from, now you know. An op amp can be used in a number of different configurations to provide useful features (“operations”) in a circuit. They are widely used in analog audio electronics. They are not the only kind of amplifier in use, but they are one of the most common.</p>
<h2 id="level-1-how-can-i-use-one">Level 1: How Can I Use One?</h2>
<p>There are a number of circuit “configurations” — properly, these are just “circuits,” but I tend to call them “configurations” to make it clear that they are sub-circuits of some larger circuit — that you can build with an op amp.</p>
<p>I’m not going to explain <em>how</em> these circuits work in Level 1. I’m just going to show some useful things you can do with an op amp.</p>
<p>I will give five useful configurations of an op amp in this article. There are, of course, more! The examples below are just that, examples, not a complete list of everything you can do with an op amp.</p>
<h3 id="buffer">Buffer</h3>
<p>The buffer copies a voltage from the <code>+</code> input to the output. In the schematic, below, the input is at the upper left and the output is on the right. Throughout this article I will try to stick to that convention, although in a “real” schematic both may be anywhere.</p>
<figure>
<a href="/images/synth/OpAmp2.png"> <img src="/images/synth/OpAmp2.png" loading="lazy" alt="Schematic diagram of an op amp in a buffer configuration, with a wire running from the output to the - input of the op amp, while the signal to be buffered goes to the + input."> </a>
<figcaption>
An Op Amp In a “Buffer” Configuration
</figcaption>
</figure>
<p>Don’t worry about <em>how</em> it copies the voltage right now. Just take my word for it that the circuit in the schematic will copy the voltage.</p>
<p>Incidentally, this is the same way that an expert views these circuits. They don’t start by thinking about how much voltage the op amp is emitting. They look at a schematic and recognize, “oh, that’s a buffer.” They <em>understand</em> how it works, but they don’t <em>think</em> about the precise mechanism, at least at first. Later on they might look more deeply, and so will we! This is a little bit like when you know how to read words in a sentence you don’t have to look at every letter of a word and sound it out unless it’s a word you’re unfamilar with.</p>
<p>Copying a voltage sounds sort of useless, but it does this in a way which doesn’t draw any current from the input. Also, no matter how much current is drawn by an external load at the output the voltage at the output does not change. Both of these are very useful properties!</p>
<p>This sort of buffer is widely used in audio circuits, among many other applications. If you plugged a pair of headphones into an output without such a buffer, the headphones <strong>impedance</strong> (resistance to audio signal) might interfere with the circuit which produced the audio signal. The buffer prevents this and ensures that the signal produced by the audio circuit is the same signal you hear in the headphones.</p>
<p>Some other names for the “buffer” configuration are the “unity gain amplifier” or the “voltage follower.” They mean the same thing.</p>
<p>Here’s an example of an op amp in a “buffer” configuration in a real circuit:</p>
<figure>
<a href="/images/synth/OpAmpSchematicBuffer.png"> <img src="/images/synth/OpAmpSchematicBuffer.png" loading="lazy" width="300px" alt="Detail from the VCO schematic showing an op amp in a buffer configuration"> </a>
<figcaption>
From the mki x es.edu VCO Schematic
</figcaption>
</figure>
<p>The symbols are different in this schematic. We will just have to live with that. People don’t always use the same symbols. There’s no right or wrong.</p>
<p>I have included some of the other components in this detail from the schematic to emphasize that you will need to be able to pick these configurations out when they are surrounded by other components.</p>
<h3 id="amplifier">Amplifier</h3>
<p>The amplifier takes a voltage at its input and sets the output to a voltage which is some multiple of the input voltage.</p>
<figure>
<a href="/images/synth/OpAmp4.png"> <img src="/images/synth/OpAmp4.png" loading="lazy" alt="Schematic diagram of an op amp in an amplifier configuration, with the - input running to ground through a 50k resistor, and the output feeding back into the - input via a 100k resistor. The input of the circuit is connected to the + input of the op amp"> </a>
<figcaption>
An Op Amp In an “Amplifier” Configuration
</figcaption>
</figure>
<p>In this specific case, with these specific resistor values, the voltage at the output is 3* the voltage at the input (within certain limits). You can change the amount of gain by changing the resistor values. In the extreme case, where the resisitor going to ground is infinite (no wire at all), and the resistor going from the output to the <code>-</code> input is 0 Ohms (a plain old wire), this circuit is the same as the “Buffer” configuration above. So the buffer is just a special case of the amplifier, only the buffer has a lower gain (amplification factor) of 1 (meaning no amplification).</p>
<p>One thing you can’t do is have a gain of less than unity – to have an output voltage less than the input voltage. But you can do this with an inverting amplifier, which we’ll discuss in a little bit.</p>
<p>Here’s an example of an op amp in an “amplifier” configuration in a real circuit:</p>
<figure>
<a href="/images/synth/OpAmpSchematicAmplifier.png"> <img src="/images/synth/OpAmpSchematicAmplifier.png" loading="lazy" width="300px" alt="Detail from the Mixer schematic showing an op amp in a amplifier configuration"> </a>
<figcaption>
From the mki x es.edu Mixer Schematic
</figcaption>
</figure>
<h3 id="inverter">Inverter</h3>
<p>The inverter turns a signal upside down. For example, you might have an input signal which alternates between 3V and -5V. The inverter would turn that into a signal which alternated between -3V and 5V.</p>
<figure>
<a href="/images/synth/OpAmp3.png"> <img src="/images/synth/OpAmp3.png" loading="lazy" alt="Schematic diagram of an op amp in an inverter configuration, with the + input running to ground, and the output feeding back into the - input via a 50k resistor. The input of the circuit is also connected to the - input of the op amp, via a separate 50k resistor"> </a>
<figcaption>
An Op Amp In an “Inverter” Configuration
</figcaption>
</figure>
<p>You connect the input signal at the far left hand node in the schematic above. Don’t worry about what the resisitors are doing in the circuit just yet, or why this circuit inverts the signal. Again, just take my word for it that this circuit will invert its input. I will explain how it works in a later level.</p>
<p>Like the “amplifier,” this circuit also has two resistors, but they’re in a different place, which makes the circuit do a different thing. Again, don’t worry about <em>how</em> it works right now.</p>
<p>Do note that I’ve switched the inputs in this diagram, putting the <code>-</code> input on top. The only reason I’ve done this is because it allows me to keep the input to the circuit in a consistent place (the input signal which we want to invert should be connected to the <code>-</code> input via a resistor), and because it allows me to run the ground which is connected to the <code>+</code> input in a downward direction, which I find aesthetically pleasing. You can draw the diagram either way.</p>
<p>Here are two inverters in a row from the Mixer schematic. It inverts the signal twice!</p>
<figure>
<a href="/images/synth/OpAmpSchematicInverters.png"> <img src="/images/synth/OpAmpSchematicInverters.png" loading="lazy" width="300px" alt="Detail from the Mixer schematic showing an op amp in an inverter configuration"> </a>
<figcaption>
From the mki x es.edu Mixer Schematic
</figcaption>
</figure>
<p>Why would it do that? It’s discussed in <a href="https://www.ericasynths.lv/media/MIXER_MANUAL.pdf">the mixer instructions</a>. But it’s a little premature for us to discuss that until we talk a little bit more about how op amps work.</p>
<h3 id="inverting-amplifier">Inverting Amplifier</h3>
<p>This diagram should look very familiar, because it’s exactly the same as the one I showed for “inverter,” only the value of one resistor has changed.</p>
<figure>
<a href="/images/synth/OpAmp5.png"> <img src="/images/synth/OpAmp5.png" loading="lazy" alt="Schematic diagram of an op amp in an inverter configuration, with the + input running to ground, and the output feeding back into the - input via a 50k resistor. The input of the circuit is also connected to the - input of the op amp, via a 100k resistor"> </a>
<figcaption>
An Op Amp In an “Inverting Amplifier” Configuration
</figcaption>
</figure>
<p>In this case, I’ve set the resistor values such that the amplifier has a gain of -0.5. So if for example you connect 5V at the input, you will see -2.5V at the output.</p>
<p>The “non-inverting” amplifier configuration could only have a gain of greater than or equal to 1. But the inverting configuration can amplify by a factor from 0 to “negative infinity.” (A lie, in the real world it’s really somewhere in the neighborhood of -100000, but it will do for what we’re building.)</p>
<p>Here is an op amp in an “inverting amplifier” configuration from the VCF schematic.</p>
<figure>
<a href="/images/synth/OpAmpSchematicInvertingAmplifier.png"> <img src="/images/synth/OpAmpSchematicInvertingAmplifier.png" loading="lazy" width="300px" alt="Detail from the VCF schematic showing an op amp in an inverting amplifier configuration"> </a>
<figcaption>
From the mki x es.edu VCF Schematic
</figcaption>
</figure>
<h3 id="comparator">Comparator</h3>
<p>The comparator compares the voltage, V<sub>input</sub>, at the <code>+</code> input with the voltage, V<sub>ref</sub> at the <code>-</code> input. It sets the output “high” if V<sub>input</sub> is higher than V<sub>ref</sub> and “low” if V<sub>input</sub> is lower than V<sub>ref</sub>.</p>
<figure>
<a href="/images/synth/OpAmp6.png"> <img src="/images/synth/OpAmp6.png" loading="lazy" alt="Schematic diagram of an op amp in a comparator configuration, which is just the ref signal connected to the `-` input and the `input` signal connected to the `+` input"> </a>
<figcaption>
An Op Amp In a “Comparator” Configuration
</figcaption>
</figure>
<p>“High” and “low,” here, mean “as high of an output as the op amp can produce, given the power we provide to it,” and similarly for low.</p>
<p>Eagle-eyed readers may notice that this circuit diagram is the same as the one of the “plain” op amp in “Level 0: What Is an Op Amp.” So yes, this “circuit” is just a plain op amp with no extra components.</p>
<p>Despite its simplicity, this turns out to be a very useful circuit in some cases. For example, in the VCO kit we use an op amp in comparitor mode to produce a PWM wave from a sawtooth wave. (See <a href="2023-03-02-building-a-synthesizer-3.html">that post</a> for details.) It looks like this:</p>
<figure>
<a href="/images/synth/OpAmpSchematicComparator.png"> <img src="/images/synth/OpAmpSchematicComparator.png" loading="lazy" width="300px" alt="Detail from the VCO schematic showing an op amp in a comparator configuration"> </a>
<figcaption>
From the mki x es.edu VCO Schematic
</figcaption>
</figure>
<h2 id="level-2-power-up">Level 2: Power Up</h2>
<p>Perhaps you’ve thought, “Amplifier, huh? That power has to come from somewhere!” If so, give yourself a pat on the back; you’re right! We need to supply power to the op amp. The amount of power required will depend on the particular chip you’re using.</p>
<p>Every once in a while, only very occasionally, you will see these power inputs in the schematic with the op amp itself:</p>
<figure>
<a href="/images/synth/OpAmp7.png"> <img src="/images/synth/OpAmp7.png" loading="lazy" alt="Schematic diagram of an op amp showing +/- 18V power to the circuit as well as the usual + and - inputs"> </a>
<figcaption>
Op Amp with Power Connections
</figcaption>
</figure>
<p>When these power connections are labeled at all, they’re often called V<sub>cc+</sub> and V<sub>cc-</sub> or V<sub>+</sub> and V<sub>-</sub>, but they’re usually omitted from schematics at the point in the circuit where the op amp is used. You should know that the power connections are there and the op amp won’t work without them, but they tend to be omitted from schematics in order to keep the schematic simpler.</p>
<p>The power connections might be elsewhere on the schematic. Here’s the section of the VCO schematic showing the actual power going to the chip. The op amp itself is not shown here; that’s elsewhere in the schematic. In this example the power goes to pins 4 and 11 on the chip. The remaining pins are for the op amps themselves and these appear elsewhere in the schematic.</p>
<figure>
<a href="/images/synth/OpAmpPower.png"> <img src="/images/synth/OpAmpPower.png" loading="lazy" alt="Detail from a schematic showing the power inputs to a TL074 chip"> </a>
<figcaption>
TL074 Power Supply
</figcaption>
</figure>
<p>There are 4 separate op amps on the TL074 chip. The op amps and their power supply are just different pins on the same chip. Here’s a pinout:</p>
<figure>
<a href="/images/synth/tl074-pinout-diagram.png"> <img src="/images/synth/tl074-pinout-diagram.png" loading="lazy" alt="A pinout for the TL074 chip"> </a>
<figcaption>
TL074 Pinout
</figcaption>
</figure>
<p>Although an op amp’s gain is very high (more on this below), the op amp can’t ever output any voltage greater than the voltage connected to the V<sub>cc+</sub> input, and it can’t ever output any voltage lower than the voltage connected to the V<sub>cc-</sub> input. Actually, the true values are even lower; the <a href="https://www.ti.com/product/TL074#tech-docs">TL074 data sheet</a> says that its actual minimum/maximum output level is 1.5V below V<sub>cc</sub>. So the VCO output in this case is limited to <em>approximately</em> +/- 10.5V.</p>
<p>One thing that a lot of people notice is that there is no ground input to the op amp IC. There does not need to be one because the op amp IC’s internal circuit does not directly use a ground, and, somewhat like a transistor, instead depends on the fact that the output and the input circuits are grounded to a common rail.</p>
<p>So a “complete” circuit might look like:</p>
<figure>
<a href="/images/synth/OpAmpWithGround.png"> <img src="/images/synth/OpAmpWithGround.png" loading="lazy" width="300px" alt="An op amp in a circuit with an input voltage, a ground rail, and a load (a 1K resisitor)."> </a>
<figcaption>
A “Complete” Op Amp Circuit
</figcaption>
</figure>
<p>In this example, the input to the op amp is a 40Hz sawtooth oscillator, and the load is represented by a 1k resistor, which would probably be something more interesting in a “real” circuit.</p>
<h2 id="level-3-the-ideal-op-amp">Level 3: The “Ideal Op Amp”</h2>
<p>In electronics, it’s pretty common to describe components in terms of ideals. We commonly say that a certain circuit contains a “100k Ohm resistor,” and only occasionally do we note that the resistor is a 1% tolerance model and might be anywhere between 99k and 101k Ohms.</p>
<figure class="inlineRight">
<a href="/images/synth/d0014a.png"> <img src="/images/synth/d0014a.png" loading="lazy" width="300px" alt="A photo of the TI TL074 op amp in an integrated circuit package."> </a>
<figcaption>
A Non-Ideal Op Amp
</figcaption>
</figure>
<p>Op amps are more complicated than resistors, and we often talk about the notion of an “ideal op amp” explicitly. An “ideal op amp” has infinite gain, infinite input impedance, zero output impedance, infinite bandwidth, and zero noise. Don’t worry much about what the terms in that sentence mean right now; just know that we build with physical op amps which are not ideal because they are built with actual silicon and not pure math.</p>
<p>Still, the notion of an “ideal op amp” does help us to understand how an op amp works. If the gain of an op amp is merely very high, that still sounds like something we could control, if only we could build a circuit which is sufficiently precise. But if the gain is “infinity,” then that sounds very challenging to control. This is the correct intuition! If I tell you that the output of an op amp is proprotional to the difference between the two input voltages, you might be tempted to try and set both of those voltages to a correct level as you would with a transistor. But if I told you that the output is “the difference between the two voltages, times infinity,” then you would quickly give up on setting both of the input voltages to some value which would give you the desired output voltage. Again, this is the correct intuition!</p>
<p>So we need some other mechanism for controlling the output voltage, and that mechanism is feedback. First we will look at what happens when you <em>don’t</em> use feedback, and then we will look at what happens when you do.</p>
<h2 id="level-4-how-an-op-amp-actually-works-without-feedback">Level 4: How an Op Amp (Actually) Works (Without Feedback)</h2>
<p>I’m going to tell you how an op amp works, but it will be confusing at first. Stick with me for a second!</p>
<blockquote>
<p>The output voltage is the difference of the two input voltages, times some fixed gain. The fixed gain is hard-wired inside the chip and is set to a very large number, very roughly 100000. There is a limit on how high or low the output can go, however; namely it’s limited to within the range V<sub>cc-</sub> through V<sub>cc+</sub>, and actually the output range is a bit smaller than that.</p>
</blockquote>
<p>There’s a lot going on in the sentences above, so let’s break that down a bit.</p>
<p>When we talk about “the difference between the two input voltages,” there are really two cases we are interested in:</p>
<ul>
<li>Those cases with feedback (“Buffer,” “Inverter,” “Amplifier,” “Inverting Amplifier”)</li>
<li>The case without feedback (“Comparitor”)</li>
</ul>
<p>Let’s consider the case without feedback first.</p>
<h3 id="comparitor">Comparitor</h3>
<p>How does the comparitor work in light of the section above? In this case, and <em>only</em> in this case, we have input signals connected to <em>both</em> of the inputs of the op amp.</p>
<figure>
<a href="/images/synth/OpAmp6.png"> <img src="/images/synth/OpAmp6.png" loading="lazy" alt="Schematic diagram of an op amp in a comparator configuration, which is just the ref signal connected to the `-` input and the `input` signal connected to the `+` input"> </a>
<figcaption>
An Op Amp In a “Comparator” Configuration
</figcaption>
</figure>
<p>I am calling the voltages applied to the inputs “V<sub>input</sub>” and “V<sub>ref</sub>”</p>
<p>When the voltage at the <code>+</code> input (V<sub>input</sub>) is higher than the voltage at the <code>-</code> input (V<sub>ref</sub>), the difference: <br /><span class="math display">$$ \begin{align} V_{input} - V_{ref} \end{align} $$</span><br /> …is a positive number. Let’s say that V<sub>input</sub> is 5 and V<sub>ref</sub> is 3. The op amp multiplies this result, 2, by the very large gain, and immediately sets the output voltage to 200000V. Or tries to. Remember, the output voltage is limited by the voltage going into the V<sub>cc+</sub> power input, which is something far more reasonable, like 12V. So the op amp does the best it can and sets the output to about 10.5V, which is the largest amount of voltage it <em>can</em> emit.</p>
<p>If V<sub>input</sub> was <em>smaller</em> than V<sub>ref</sub>, then their difference would be negative and the op amp would swing the output hard in the other direction, attempting to set the output voltage to -200000V or so, but quickly hitting the limit of V<sub>cc-</sub>.</p>
<p>And that fully describes the comparitor case; when the <code>+</code> input is higher than the <code>-</code> input the output goes high, and when the <code>+</code> input is lower than the <code>-</code> input the output goes low.</p>
<p>Weird, huh? If that were the only application for an op amp, you’d have to believe that there might be a simpler solution. But of course there are other use cases.</p>
<h2 id="level-5-feedback">Level 5: Feedback</h2>
<p>If there is one difference between digital and analog electronics which I have found, it is this: The digital electronics designer’s maxim is “make it as accurate as possible,” whereas the analog designer’s North Star is, “<s>if</s> when you can’t make it accurate, make it adjustable.”</p>
<p>The <em>genius</em> of feedback is that it makes this adjustment automatic. This is the key to understanding the circuits in Level 1: They are all just different configurations of feedback.</p>
<p>The notion of using feedback as a mechanism to ensure precise control of an amplifier might seem counterintuitive at first. If I think of feedback in terms of amplifiers, I think of a guitar player with their guitar inside the cone of a Marshall stack, not exactly the image of precision and control.</p>
<p>But feedback is any connection of the output of a circuit to an input. This can be:</p>
<ul>
<li><strong>Positive feedback,</strong> which makes the circuit go out of control, as with the guitar amplifier. Each time the amplifier amplifies a signal which it produced it gets louder and louder. An op amp doesn’t actually need a guitar player to hold them inside a speaker cone to go out of control; they do it perfectly well on their own in the absence of…</li>
<li><strong>Negative feedback</strong> brings the signal under control. Each time the amplifier reacts to its own output it gets quieter.</li>
</ul>
<p>I’m not going to use the terms “positive feedback” and “negative feedback” in the rest of this post because I think they’re easily confused with positive and negative voltages, which are something altogether unrelated. Instead I will just talk about “feedback,” by which I am referring to the negative kind.</p>
<p>Reading “Level 1”, you might marvel at how many things an op amp can do just by changing the values of a few resistors! How can one simple component do so much?</p>
<p>Remember the “buffer” configuration from “Level 1?”</p>
<figure>
<a href="/images/synth/OpAmp2.png"> <img src="/images/synth/OpAmp2.png" loading="lazy" alt="Schematic diagram of an op amp in a buffer configuration, with a wire running from the output to the - input of the op amp, while the signal to be buffered goes to the + input."> </a>
<figcaption>
An Op Amp In a “Buffer” Configuration
</figcaption>
</figure>
<p>One way to think about the buffer is:</p>
<figure>
<a href="/images/synth/OpAmpFakeFeedback.png"> <img src="/images/synth/OpAmpFakeFeedback.png" loading="lazy" alt="This looks a bit like a schematic diagram of an op amp, but it has a gauge and other components inside"> </a>
<figcaption>
</figcaption>
</figure>
<p>In this model, there are two voltage meters, one at the <code>+</code> input of the op amp and one at the output. There is also a potentiometer connecting the op amp’s power to the output, and a linkage which ensures that the voltage going out of the circuit is the same as the voltage read at the <code>+</code> input. When the input voltage goes up, the linkage adjusts the output power until the output voltmeter has the same reading. This is not how an op amp actually works, but it’s a reasonable <em>model</em> of how it works.</p>
<p>Hopefully this will give you an idea of how feedback works. Something is measured (the voltage at the <code>+</code> input, in this case), and then something else (the potentiometer) changes based on that value.</p>
<p>Importantly, this circuit is <em>self-correcting.</em> If the potentiometer is 5% tolerance and varies in its actual value in ohms, it will just tweak the potentiometer setting until the two volt meters read the same.</p>
<p>At this point you might think, “That’s all very neat, but why bother with all of this feedback business? If you want a 2* gain, why not just, you know, set that and be done with it?” It turns out that this is kind of hard! You can amplify with a transistor, sure, but the transistor will be <em>highly</em> variable depending upon its temperature. By controlling the amplification factor with the ratio between two resistors, which:</p>
<ul>
<li>Are less temperature-sensitive than transistors</li>
<li>Produce far less of their own heat at the currents used here</li>
<li>Tend to change temperature in unison due to room variations or current, preserving a fairly steady ratio between them</li>
</ul>
<p>You can have very accurate amplification factors even when dealing with the “messy” analog world.</p>
<h2 id="level-6-how-an-op-amp-actually-works-with-feedback">Level 6: How an Op Amp (Actually) Works (With Feedback)</h2>
<p>Understanding the behavior of the op amp with feedback is just slightly more complex, because it varies a bit over time.</p>
<p>In the examples below, I’m going to presume the op amp’s fixed gain is 100000. In reality, we don’t know the exact number (it varies a bit with temperature and other factors) but this is in the right ballpark. As you will see, the exact value isn’t really important in our calculations. We just need to know it’s big.</p>
<h3 id="buffer-1">Buffer</h3>
<p>Let’s consider our “buffer” circuit again. We’ve talked about this case before, when I described the “model” of voltmeters and linkages. You can sort of see that here, except the “linkage” is just a wire:</p>
<figure>
<a href="/images/synth/OpAmp2.png"> <img src="/images/synth/OpAmp2.png" loading="lazy" alt="Schematic diagram of an op amp in a buffer configuration, with a wire running from the output to the - input of the op amp, while the signal to be buffered goes to the + input."> </a>
<figcaption>
An Op Amp In a “Buffer” Configuration
</figcaption>
</figure>
<p>How does this work internally? Let’s examine the voltages over time. It will help to remember that, due to the wire, the output voltage and the voltage at the <code>-</code> will <em>always</em> be the same. In general, it is helpful, when looking at these circuits, to ask yourself if there are any things which are always true, and this is an example: The ouptut and the <code>-</code> input will always have the same voltage, in this case.</p>
<p>Initally, all voltages are at 0. The voltage we’re sending into the <code>+</code> input is at 0V, and, presuming we’ve just powered up the chip, so is the output. Consequently, the voltage at the <code>-</code> input, which is literally “hard-wired” to the output, is also at 0V. T Given our new understanding of the op amp, we can see that nothing needs to change, because the output voltage should be: <br /><span class="math display">$$ \begin{align} \begin{split} V_{output} = (V_{in+} - V_{in-}) \times Gain \\ = (0V-0V) \times 100000 \\ = 0V \end{split} \end{align} $$</span><br /> The buffer has “done its job” of copying 0V at its input to 0V at its output. All is well!</p>
<p>Now, let’s say I raise the signal at the <code>+</code> input on the op amp to 5V. What happens then? Well, the output of the op amp had been at 0V, and it’s connected to the <code>-</code> input by a wire, so the <code>-</code> input sits at 0V. The difference between the two inputs is 5V - 0V = 5V, so the op amp will attempt to set the output to 5V * 100000, give or take a decimal place, and will crank up the voltage, really quickly. A cheap TL074 op amp has a slew rate of 20V/µs, which is to say, far too fast for you to even notice how long it takes to start increasing the voltage.</p>
<p>However, a funny thing happens as the voltage rises. The output goes up past 1V, 2V, 3V, 4V… what happens when it gets to 5V? I will remind you, the <code>-</code> input is connected to the output via a near-zero-resistance wire. When the output gets to 5V, it raises the <code>-</code> input to 5V. Now the difference between the two inputs is back to 0V! The op amp could cut the power to the output entirely, but in doing so it would bring the output voltage down to, say, 4.9, which would cause the difference between the two inputs to be 0.1V, which would cause the output to once again try to raise to 0.1V * 100000 = 10000V, only to get there, it would have to cross 5V, resulting in the power being cut.</p>
<p>In real life, the op amp does <em>not</em> switch back and forth between trying to cut power entirely or send the output voltage into the stratosphere; what actually happens in this case is that the op amp will just hold the voltage at the output at just the tiniest fraction of a volt below 5V. Everyone says this, anyway; I can’t see that tiny fraction when looking at the datasheet for the chip. If it exists at all then I guess the difference is too small to see. So once again, the op amp has copied the input voltage of 5V to the output, which it also holds at (a value very, very close to) 5V.</p>
<p>Because of this feedback mechanism, it’s common to hear people say that an op amp will “try” to hold both inputs at the same value. This is overstating the amount of desire an op amp has considerably! But when we wire a feedback loop into an op amp circuit, we can change the description of how the op amp works from:</p>
<blockquote>
<p>The output voltage is the difference of the two input voltages, times some fixed gain.</p>
</blockquote>
<p>…to:</p>
<blockquote>
<p>The output voltage is set to whatever level will cause the two input voltages to be the same.</p>
</blockquote>
<p>…which is often a better mental model for what is actually happening.</p>
<h2 id="level-7-how-the-amplifier-works-and-introducing-the-voltage-divider">Level 7: How the Amplifier Works (and Introducing the Voltage Divider)</h2>
<p>The “amplifier” case is just slightly more complex. The circuit looks like this:</p>
<figure>
<a href="/images/synth/OpAmp4.png"> <img src="/images/synth/OpAmp4.png" loading="lazy" alt="Schematic diagram of an op amp in an amplifier configuration, with the - input running to ground through a 50k resistor, and the output feeding back into the - input via a 100k resistor. The input of the circuit is connected to the + input of the op amp"> </a>
<figcaption>
An Op Amp In an “Amplifier” Configuration
</figcaption>
</figure>
<p>If the voltage at the input is 0V, then <em>all</em> voltages are 0V, for much the same reasons as in the “buffer” case. There’s a resistor between the output and the <code>-</code> input, but that doesn’t matter considering that both ends of it are at 0V. Everything stays at 0V, at least until we change the voltage at the input.</p>
<p>What will happen if we set the input to 1V? Well, just like with the buffer, the op amp will try to set the output voltage to: <br /><span class="math display">$$ \begin{align} \begin{split} V_{output} = (V_{in+} - V_{in-}) \times Gain \\ = (1V-0V) \times 100000 \\ = 100000V \end{split} \end{align} $$</span><br /> So, a huge number. But to get there, it has to start climbing, and that’s when the fun begins. It’s time to start talking about those resistor values.</p>
<p>There are two resistors in the circuit. We can label them R<sub>f</sub> (the <code>f</code> is for “feedback”) and R<sub>g</sub> (the <code>g</code> is for “ground”). We are using 100k and 50k Ohm value resistors for these two, respectively. By changing the values that you use, you can change the amount of gain in the circuit.</p>
<figure>
<a href="/images/synth/Operational_amplifier_noninverting.png"> <img src="/images/synth/Operational_amplifier_noninverting.png" loading="lazy" alt="Schematic diagram of an op amp in an amplifier configuration, with generic R-sub-f and R-sub-g labels"> </a>
<figcaption>
Ong saluri, CC BY-SA 3.0, via <a href="https://commons.wikimedia.org/wiki/File:Operational_amplifier_noninverting.svg">Wikimedia Commons</a>
</figcaption>
</figure>
<p>The <em>formula</em> for the voltage output by an op amp in an “amplifier” circuit is:</p>
<p><br /><span class="math display">$$ \begin{align} V_{out} = V_{in} \times \left(1 + \cfrac {R_f} {R_g}\right) \end{align} $$</span><br /></p>
<p>It is worth committing this formula to memory. To be honest, you can just accept that and move on if you like. But I will show you <em>why</em> this is true, because we can learn a bit more about op amp circuits from the derivation.</p>
<h3 id="the-voltage-divider">The Voltage Divider</h3>
<p>When we apply 1V to the <code>+</code> input, the op amp is going to want to raise its output until the two inputs are equal, i.e., the <code>-</code> input is at 1V. We know that immediately after we have raised the <code>+</code> input to 1V, the output (and hence the <code>-</code> input) remain at 0V, but the output will start to swing very high, per the equation above. And <em>just like in the case of the buffer,</em> it’s going to eventually reach a point where the <code>-</code> input is at 1V and then cut power, before settling in to a steady state. But now it’s less clear what that point is; what will the output voltage have to be in order for the <code>-</code> voltage to be 1V?</p>
<p>A <a href="https://learn.sparkfun.com/tutorials/voltage-dividers/all">voltage divider</a> is two resistors in series, with different voltages applied to both ends. (That’s an oversimplification, but stick with me for a second.) Here’s what a voltage divider looks like on its own:</p>
<figure>
<a href="/images/synth/Resistive_divider2.png"> <img src="/images/synth/Resistive_divider2.png" loading="lazy" alt="A resistor voltage divider, two resistors in series."> </a>
<figcaption>
Krishnavedala, CC0, <a href="https://commons.wikimedia.org/wiki/File:Resistive_divider2.svg">via Wikimedia Commons</a>
</figcaption>
</figure>
<p>In the case above, the voltage at V<sub>out</sub> is: <br /><span class="math display">$$ \begin{align} V_{out} = V_{in} \times \cfrac {R_2} {R_1 + R_2} \end{align} $$</span><br /></p>
<p>The two resistors in series in the “amplifier” configuration form a voltage divider. In case that’s not clear, I’ll redraw the schematic slightly.</p>
<figure>
<a href="/images/synth/OpAmpAmplifierVoltageDivider.png"> <img src="/images/synth/OpAmpAmplifierVoltageDivider.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an amplifier configuration, with the resistors rearranged to make the voltage divider more obvious"> </a>
<figcaption>
This Should Make the Voltage Divider More Obvious
</figcaption>
</figure>
<p>I hope you agree that this “amplifier” circuit is the same circuit as the one I’ve been drawing all along, only with the resistors in a slightly different position. Now we can answer the question of “What voltage at <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> will cause the voltage at <span class="math inline"><em>V</em><sub>−</sub></span> to reach 1V?”</p>
<p>Well, let’s just substitute in the values we know into the formula (5) above. In particular, let’s use 1V for V<sub>out</sub> in the voltage divider, which is the point we are connecting to the <code>-</code> input of the op amp. For <em>the voltage divider alone:</em> <br /><span class="math display">$$ \begin{align} \begin{split} V_{out} = V_{in} \times \cfrac {R_2} {R_1 + R_2} \\ 1V = V_{in} \times \cfrac {50} {100 + 50} \\ 1V = V_{in} \times \cfrac {1} {3} \\ V_{in} = 3V \end{split} \end{align}$$</span><br /> So a voltage of 3V applied at V<sub>in</sub> will cause V<sub>out</sub> in the voltage divider.</p>
<p>Therefore, if our op amp is sending 3V to its output (which corresponds to V<sub>in</sub> on the voltage divider), the voltage divider will result in sending 1V to the <code>-</code> input (labeled below as <span class="math inline"><em>V</em><sub>−</sub></span>, which corresponds to V<sub>out</sub> on the voltage divider diagram above). Just to make that clear, I ran it in a simulator and applied voltage probes to the output and to the <code>-</code> input:</p>
<figure>
<a href="/images/synth/OpAmpAmplifierLabeledVoltages.png"> <img src="/images/synth/OpAmpAmplifierLabeledVoltages.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an amplifier configuration, with the voltage at the output of the amplifier labled with a 3V and the voltage between the two resistors labled 1V"> </a>
<figcaption>
Same Circuit with Two Voltage Probes Added
</figcaption>
</figure>
<p>So, when we make the two input voltages to the op amp different by raising <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> to 1V, the op amp will note that <span class="math inline"><em>V</em><sub>+</sub> − <em>V</em><sub>−</sub></span> is positive, and will start to swing <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> way up, only stabilizing when <span class="math inline"><em>V</em><sub>−</sub></span> also reaches 1V, which happens when <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> reaches 3V. Hence, with the specific resistor values of 100k and 50k, the gain is:</p>
<p><br /><span class="math display">$$ \begin{align} \begin{split}Gain =\left(1 + \cfrac {R_f} {R_g}\right)\\=\left(1 + \cfrac {100k} {50k}\right)\\=\left(1 + 2\right)\\=3 \end{split} \end{align} $$</span><br /></p>
<p>As I mentioned previously, the “buffer” is just an extreme case of the amplifier; <span class="math inline"><em>R</em><sub><em>f</em></sub></span> is 0 Ohms and <span class="math inline"><em>R</em><sub><em>g</em></sub></span> is infinity. And that’s why the “amplifier” circuit can’t ever have a gain of less than 1; once you get to the point where your “amplifier” becomes a “buffer” there are no resistor values which you can plug in which will make your gain any lower.</p>
<h2 id="level-8-impedance">Level 8: Impedance</h2>
<p>Let’s recall the description of the “ideal op amp”:</p>
<blockquote>
<p>An “ideal op amp” has infinite gain, infinite input impedance, zero output impedance, infinite bandwidth, and zero noise.</p>
</blockquote>
<p>What does “infinite input impedance” and “zero output impedance” mean?</p>
<p>Well, “impedance” is the sum of any resistors and the resistive effects of capacitors/inductors on the circuit. For direct current impedance is resistance. For alternating current/audio you have to consider both the resistance from resistors and the reactance from any capacitors or inductors in the cirucit.</p>
<p>Infinite input impedance means that current does not flow into either input of an ideal op amp. Real op amps are not ideal and some current goes in, but not much.</p>
<p>Note that the op amp has zero input impedance <em>at its inputs.</em> If you build a circuit such an an inverting amplifier with a resistor before the <code>-</code> input, then the input impedance <em>of the whole circuit</em> is the resistor value, not infinity. This means that if you connect a source to the input of an inverting amplifier with a fairly high impedance relative to the resistor, you will change the amount of feedback and hence the amplification! In such cases you will want to add a buffer prior to the inverting amplifier to isolate the source’s impedance.</p>
<p>Zero output impedance is a little harder to understand! The op amp will try to hold its output at some voltage. Let’s say you have it configured as a buffer and then connect 1V to the <code>+</code> input. Then the op amp will try to hold its output voltage at 1V. The tricky part is that it will try to do this for any load you put on it. In other words, it will try to supply the same 1V for any current you attempt to draw.</p>
<p>Let’s say the output load is a 10k ohm resistor. Then the op amp will emit 1V at a current of 100 µA (because of <a href="https://www.allaboutcircuits.com/textbook/direct-current/chpt-2/voltage-current-resistance-relate/">Ohm’s Law</a>). Similarly, if you change the output load to a 1k resistor, then the op amp will emit 1V at 1 mA.</p>
<p>Again, real op amps are not ideal, and of course the current a real op amp can emit is not infinite!</p>
<h2 id="level-9-how-the-inverters-work">Level 9: How the Inverters Work</h2>
<p>As we’ve seen, the buffer circuit is just a special case of the amplifier circuit, and as I hinted when I first mentioned the resistor values in the “inverting amplifier” configuration, the same thing is true of the inverter and the inverting amplifier; the inverter is just a special case of the inverting amplifier. Namely, it’s what you get when both resistors have the same value. But it’s not <em>the same</em> special case.</p>
<p>To cut to the chase, the formula for the gain of an inverter is:</p>
<p><br /><span class="math display">$$ \begin{align} V_{output} = -V_{input} \times \cfrac {R_f} {R_{input}} \end{align} $$</span><br /></p>
<p>As with the amplifier, it is worth memorizing this formula. Just like before, we will look at <em>why</em> this formula is true.</p>
<h3 id="comparison-with-amplifiers">Comparison with Amplifiers</h3>
<p>With a (non-inverting) amplifier if both resistors have the same value then you get a gain of 2. To get unity gain in the non-inverting amplifier case (a buffer), you use one “resistor” of 0 Ohms (a wire) in the feedback loop and one “resistor” of infinity ohms (no connection whatsoever) going to ground. With an <em>inverting</em> configuration you get unity gain (a plain inverter) if both resistors have the same value. Clearly, these two don’t work in quite the same way! The differences don’t end with the formula, either.</p>
<p>Let’s recall what the inverter circuit looks like:</p>
<figure>
<a href="/images/synth/OpAmp3.png"> <img src="/images/synth/OpAmp3.png" loading="lazy" alt="Schematic diagram of an op amp in an inverter configuration, with the + input running to ground, and the output feeding back into the - input via a 50k resistor. The input of the circuit is also connected to the - input of the op amp, via a separate 50k resistor"> </a>
<figcaption>
An Op Amp In an “Inverter” Configuration
</figcaption>
</figure>
<p>These circuits, despite their superficial similarity, are just <em>different.</em></p>
<table style="width:40%;">
<colgroup>
<col width="13%" />
<col width="26%" />
</colgroup>
<thead>
<tr class="header">
<th>Amplifier<br/><img src="/images/synth/OpAmp4.png" loading="lazy" width="100em" /></th>
<th>Inverting Amplifier<br/><img src="/images/synth/OpAmp3.png" loading="lazy" width="100em" /></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> goes directly to <code>+</code> input</td>
<td><span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> goes to <code>-</code> input via a resisitor</td>
</tr>
<tr class="even">
<td>The “other” op amp input (<span class="math inline"><em>V</em><sub>−</sub></span>, the one not connected to <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>) is connected to the output.</td>
<td>The “other” input is connected to ground. <span class="math inline"><em>V</em><sub>+</sub></span> will <em>always</em> be 0V, and hence <span class="math inline"><em>V</em><sub>−</sub></span> will be held at 0V by the feedback loop.</td>
</tr>
<tr class="odd">
<td>The feedback and the input are connected to two different op amp inputs</td>
<td>The feedback and the input are connected to the same op amp input (<code>-</code>)</td>
</tr>
<tr class="even">
<td><br /><span class="math display">$$V_{output} = V_{input}\left(1 +\cfrac {R_f} {R_g} \right)  $$</span><br /></td>
<td><br /><span class="math display">$$V_{output} = -V_{input}\cfrac {R_f} {R_{input}}$$</span><br /></td>
</tr>
</tbody>
</table>
<p>The question is, why are they different? We have already examined why the non-inverting amplifier behaves the way it does. Let’s take a deeper look at the inverting case.</p>
<h3 id="why-the-inverters-invert">Why the Inverters Invert</h3>
<p>The op amp will emit whatever voltage is required to hold the difference between the two inputs to 0, but one input is always 0V, being connected directly to ground! Therefore, the op amp must adjust its output so that <em>both</em> inputs will be held at 0V. The phrase commonly used to describe this is that the <code>-</code> input is “held to a virtual ground,” because there is not a direct connection to ground, but the op amp will ensure, via feedback, that <span class="math inline"><em>V</em><sub>−</sub></span> cannot ever be anything but 0V. (Saying “cannot ever be anything but 0V,” however, is not the same as saying “shorted to ground.” If you were to short the <code>-</code> input to ground then <a href="#virtual-ground">the circuit would stop working</a>.)</p>
<p>In the discussion that follows it will be helpful if we add some labels to the schematic:</p>
<figure>
<a href="/images/synth/OpAmp3WithAnnotations.png"> <img src="/images/synth/OpAmp3WithAnnotations.png" loading="lazy" alt="Schematic diagram of an op amp in an inverter configuration, with labels for Vinput, V-, and Voutput."> </a>
<figcaption>
An Op Amp In an “Inverter” Configuration
</figcaption>
</figure>
<p>If the voltage at the input of the circuit (the far left-hand side, above), which I’ll call <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, goes high, then it stands to reason that this will tend to raise the voltage at the <code>-</code> input of the op amp, which I’ll call <span class="math inline"><em>V</em><sub>−</sub></span>, even though there is a resistor in between them. This is going to cause the difference between the two inputs, <span class="math inline"><em>V</em><sub>+</sub> − <em>V</em><sub>−</sub></span>, to be negative, because <span class="math inline"><em>V</em><sub>+</sub></span> is fixed at ground, 0V, and therefore the difference is negative. So the op amp will put out a large negative voltage at its output, and this will have the effect of lowering <span class="math inline"><em>V</em><sub>−</sub></span> back down to 0 (due to the feedback wire, through the resistor) and bringing everything back into equilibrium. So we can see how this configuration is “inverting,” at least as far as the <em>sign</em> of the gain is concerned.</p>
<h3 id="why-the-inverter-uses-a-different-formula-for-its-gain">Why the Inverter Uses a Different Formula for Its Gain</h3>
<p>But why is the formula different? Why does using the same resistor value for both resistors result in (negative) unity gain for the inverting case but result in a gain of 2 for the (non-inverting) amplifier case? The two resistors in series are a voltage divider in both cases, but they have different voltages being applied to them. In the case of an inverting amplifier, however, the 0V is at the <em>middle</em> of the voltage divider (the node we called <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em></sub></span> when we discussed voltage dividers), not at the bottom.</p>
<p>We are changing <em>both ends</em> of the voltage divider at the same time, one via <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> and one via the feedback loop, so we can’t use the “simple” voltage divider formula to know calculate the middle value — which we know anyway, since it’s held at 0V. It will turn out, in the next Level, that there are additional reasons not to analyze this circuit as a simple voltage divider. Instead the easiest way to understand what is happening in this circuit is to consider <a href="https://www.allaboutcircuits.com/textbook/direct-current/chpt-6/kirchhoffs-current-law-kcl/">Kirchhoff’s Current Law</a>, which says that the current going into and out of any point in a circuit must sum to 0. Let’s examine the point at the <code>-</code> input to the op amp, where we are measuring <span class="math inline"><em>V</em><sub>−</sub></span>.</p>
<p>In this case the analysis is pretty simple! For an “ideal” op amp, the amount of current going into the op amp itself is 0 amps. (Remember, that’s what the “infinite input impedance” part of the description of an ideal op amp means.) Therefore, the amount of current coming from the input, <span class="math inline"><em>i</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, must be exactly the same as the amount going to the output, <span class="math inline"><em>i</em><sub><em>f</em><em>e</em><em>e</em><em>d</em><em>b</em><em>a</em><em>c</em><em>k</em></sub></span>. (Don’t read too much into the direction of current flow here; pick a direction and then you can set the sign of the current positive or negative as needed. The important point is that the current is <em>the same</em> across both wires.)</p>
<p>The currents are the same, the resistors are the same, and we know one voltage. Therefore, both voltages, per <a href="https://www.allaboutcircuits.com/textbook/direct-current/chpt-2/voltage-current-resistance-relate/">Ohm’s Law</a>, must also be the same magnitude! Only the signs are different. Any voltage we apply at <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> must drop to 0V at <span class="math inline"><em>V</em><sub>−</sub></span> due to:</p>
<ol style="list-style-type: decimal">
<li>the fact that <span class="math inline"><em>V</em><sub>+</sub></span> is directly connected to ground and</li>
<li>the feedback mechanism which makes the op amp hold its two inputs to the same value</li>
</ol>
<p>Therefore, if we apply 1V to <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> then it will drop to 0V at <span class="math inline"><em>V</em><sub>−</sub></span>. <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> will be set to whatever voltage is required to set <span class="math inline"><em>V</em><sub>−</sub></span> to 0V. What voltage is that? Because <span class="math inline"><em>i</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> and <span class="math inline"><em>i</em><sub><em>f</em><em>e</em><em>e</em><em>d</em><em>b</em><em>a</em><em>c</em><em>k</em></sub></span> are the same, and because the two resistor values are the same, Ohm’s Law tells us <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> and <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> must be the same, except that the sign flips because the voltage must drop in the same direction, and in the case of the difference between <span class="math inline"><em>V</em><sub>−</sub></span> and <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> the voltage is going down from 0V. So for <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> = 1V, <span class="math inline"><em>V</em><sub><em>o</em><em>u</em><em>t</em><em>p</em><em>u</em><em>t</em></sub></span> must equal -1V.</p>
<h3 id="comparing-and-contrasting-the-buffer-and-inverter-circuits">Comparing and Contrasting the Buffer and Inverter Circuits</h3>
<p>This may be clear by now, but just to review:</p>
<p>The way buffer circuit works is that you send some voltage to <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, which is directly connected via a wire to the <code>+</code> input of the op amp. So the <code>+</code> input is at the same voltage as <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, and there is a feedback loop connecting the output of the op amp to its <code>-</code> input. When <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> is higher than the output/the <code>-</code> input, the op amp notices that the difference between its two inputs is positive swings the output higher until both the <code>+</code> input and the output are at the same level, at which point the feedback tends to hold the output steady. When <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span> is lower than the output, the op amp notices that the difference between its two inputs is negative and swings the output lower until both the <code>+</code> input and the output are at the same level, at which point the feedback tends to hold the output steady.</p>
<p>The way an inverter circuit works is that the <code>+</code> input of the op amp is directly connected to ground and can never be at any level other than 0V. When you send some voltage to <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, if the voltage is greater than 0V then the op amp notices that the difference between its two inputs is negative and must emit a negative voltage to counteract the positive voltage at its <code>-</code> input via the feedback loop, which is connected, via a resistor to the same <code>-</code> op amp input as <span class="math inline"><em>V</em><sub><em>i</em><em>n</em><em>p</em><em>u</em><em>t</em></sub></span>, also via a resistor. If the voltage is less than 0V then the op amp notices that the difference between its two inputs is positive and must emit a positive voltage to counteract the negative voltage at its <code>-</code> input via the feedback loop.</p>
<h2 id="level-10-passive-and-active-mixers">Level 10: Passive and Active Mixers</h2>
<p>Thus far we have examined why the non-inverting and inverting amplifier circuits have different formulas, but, as I’ve hinted, that’s not the end of the story. Let’s change the number of inputs from one to two.</p>
<h3 id="non-inverting-passive-mixer">Non-inverting, Passive Mixer</h3>
<p>Here’s the non-inverting configuration:</p>
<figure>
<a href="/images/synth/OpAmpPassiveMixer.png"> <img src="/images/synth/OpAmpPassiveMixer.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in a non-inverting configuration with two inputs with a 100k resistor on each input"> </a>
<figcaption>
A Passive Mixer and a Buffer
</figcaption>
</figure>
<p>This is a passive audio mixer followed by a buffer. Why use the resistors at all? Because if we connect one signal at 1V to one input and one signal at ground to the other input, we don’t want to just short the first voltage source to ground. The sending audio equipment will probably not be built to withstand that!</p>
<p>This actually works, but it has a number of problems. If you build the <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-mixer/">mks x es.EDU Mixer kit</a> you get to explore these problems, but I will explain them here. All of them stem from the fact that the resistors between <span class="math inline"><em>V</em><sub>1</sub></span>, <span class="math inline"><em>V</em><sub>+</sub></span>, and <span class="math inline"><em>V</em><sub>2</sub></span> are a voltage divider – or, at least, they are when there is a connection to <span class="math inline"><em>V</em><sub>2</sub></span> at all, which may or may not be the case with an audio mixer!</p>
<ul>
<li>If you connect 1V to <span class="math inline"><em>V</em><sub>1</sub></span> only (and nothing whatsoever to <span class="math inline"><em>V</em><sub>2</sub></span>), then the voltage at <span class="math inline"><em>V</em><sub>+</sub></span> is 1V. So far, so good! The resistor connected at <span class="math inline"><em>V</em><sub>2</sub></span> isn’t involved at all with nothing connected to <span class="math inline"><em>V</em><sub>2</sub></span>.</li>
<li>If you then connect 0V to <span class="math inline"><em>V</em><sub>2</sub></span>, then the voltage at <span class="math inline"><em>V</em><sub>+</sub></span> will drop to 0.5V, because now the second resistor is in the circuit and the two resistors form a voltage divider. This will be unexpected for an audio engineer! It is not generally the case that plugging in a silent signal reduces other signals.</li>
<li>You might replace the two 100k resistors with potentiometers so that the engineer can set audio levels for both inputs. This works, but they will find that adjusting the level of the input at <span class="math inline"><em>V</em><sub>1</sub></span> also affects the level of <span class="math inline"><em>V</em><sub>2</sub></span>, again due to the voltage divider. This will again be surpising to most audio engineers, and massively inconvenient if you’re mixing 32 inputs instead of 2.</li>
</ul>
<p>So, maybe not the best design.</p>
<h3 id="inverting-active-mixer">Inverting, Active Mixer</h3>
<p>Instead, let’s try grafting the same “passive” mixer onto an op amp in an inverting amplifier configuration and see what we end up with?</p>
<figure>
<a href="/images/synth/OpAmpActiveMixer.png"> <img src="/images/synth/OpAmpActiveMixer.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an inverting configuration with two inputs with a 100k resistor on each input"> </a>
<figcaption>
Passive Mixer + Inverting Amplifier = Active Mixer
</figcaption>
</figure>
<p>This is something else entirely! The <code>-</code> input, instead of just being at whatever voltage comes from the two “V” inputs, is now held at ground by the inverting op amp. How much voltage is required to hold the <code>-</code> input at ground? Precisely the same amount that the “V” inputs are supplying. Let’s examine the deficiencies of the “Passive/Non-inverting” mixer and compare:</p>
<ul>
<li>If you connect 1V to <span class="math inline"><em>V</em><sub>1</sub></span> only (and nothing whatsoever to <span class="math inline"><em>V</em><sub>2</sub></span>), then the op amp must emit a voltage of -1V to counteract the input and reduce the voltage at <span class="math inline"><em>V</em><sub>−</sub></span> to 0V. So far, so good; we’re inverting!</li>
<li>If you then connect 0V to <span class="math inline"><em>V</em><sub>2</sub></span>, no current flows through the resistor connected to <span class="math inline"><em>V</em><sub>2</sub></span>, because <span class="math inline"><em>V</em><sub>−</sub></span> is also held to ground. There is no voltage difference across the resistor and hence no voltage flows. The feedback voltage is still set to -1 V just like before to counteract the voltage from <span class="math inline"><em>V</em><sub>1</sub></span>.</li>
<li>You can’t “replace” the two resistors with potentiometers, because potentiometers can be set to 0 ohms, and you need at least 100k (in the case pictured) to balance the resistor on the feedback loop. However, you can add a potentiometer in series with a 100k resistor:</li>
</ul>
<figure>
<a href="/images/synth/OpAmpActiveMixerWithPots.png"> <img src="/images/synth/OpAmpActiveMixerWithPots.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an inverting configuration with two inputs with a 100k potentiometer and a 100k resistor on each input"> </a>
<figcaption>
Passive Mixer + Inverting Amplifier = Active Mixer
</figcaption>
</figure>
<p>It’s probably worth talking about how I am choosing these resistor values. The exact resistance of any resistor in the circuit is not as important as its <em>relationship</em> to the values of other resistors. By equation (8) we know that the gain of an inverting amplifier is governed by the ratio between the feedback resistor and the input resistance. So in principal we could use 100 ohm or 100M ohm resistors in the circuit and it would be fine.</p>
<p>Well, sort of: It turns out that using 100 ohms is asking the op amp to push a lot of current, which is not so great for its lifespan, and also has effects which show up as noise in the output. Using 100M ohms is also signing up for a lot of noise, for different reasons. The values used in this article are, to be honest, just copied from other examples, such as the mki x es.EDU schematics, which I have observed work well. But if all you have on hand are a bunch of 68k ohms resistors, you’ll be fine.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article I have focused on some specific examples of useful circuits you can build with an op amp. However, I want to reiterate that these are not the <em>only</em> useful circuits you can build, and you should expect to see other examples as you review schematics “in the real world.” <a href="https://en.wikipedia.org/wiki/Operational_amplifier_applications">Wikipedia has a list</a> with more examples, and there are even more to be found in the world. It’s amazing what you can do with a simple, 2 input IC and a few passive parts!</p>
<p>I will also reiterate that if you’ve read this far, then you are certainly on my A-list of favorite people in the world, and you should feel free to <a href="/about.html">reach out</a> if something doesn’t make sense to you or if I’ve made any obvious errors you’d like to point out!</p>
<p>Next time we will return to synth construction and <a href="2023-05-22-building-a-synthesizer-5.html">build the VCO on a PC board</a>.</p>
<blockquote>
<p>“I have made this longer than usual because I have not had time to make it shorter.”<br/> -<a href="https://quoteinvestigator.com/2012/04/28/shorter-letter/">Blaise Pascal</a></p>
</blockquote>
<h2 id="glossary">Glossary</h2>
<dl>
<dt>Closed loop gain</dt>
<dd>We’ve just been calling this the “gain” so far in this article. The closed loop gain is the gain of an entire op amp circuit when wired in a feedback (that’s the “closed loop”) configuration. For example, if you use two resistors of the same value in an amplifier configuration, then the op amp has a closed loop gain of 2.
</dd>
<dt>Impedance</dt>
<dd>Impedance is just resistance in a DC circuit and the sum of resistance plus reactance from capacitors, inductors, and the like in an AC or audio circuit. However, we tend to talk about a circuit’s “input impedance” and “output impedance,” and although the term “impedance” means the same thing in these contexts, saying “the sum of resistance and reactance” may not be the best mental model for understanding input and ouput impedance. I find it helpful to think of a circuit’s <strong>input impedance</strong> as “how much current can flow into the circuit?” Likewise, I think of a circuit’s <strong>output impedance</strong> as “How much current can the circuit supply?” These questions are of course the same as saying “the sum of resistance and reactance,” per Ohm’s Law, but I find them to be a more helpful model.
</dd>
<dt>Open loop gain</dt>
<dd>The open loop gain is the gain of the op amp by itself, without anything connected to it. It’s typically a very large value in the neighborhood of 100,000
</dd>
<dt><a name="virtual-ground"></a>Virtual ground</dt>
<dd>When an op amp is in an inverting configuration with the <code>+</code> input tied directly to ground, we say that the <code>-</code> input is “held to a virtual ground.” This is not the same thing as being connected directly to ground with a wire! If you connect the <code>-</code> input directly to ground with a wire, then your inverting amplifier will cease to function. The reason is that then the difference between the two inputs will <em>always</em> be <span class="math inline">0 − 0 = 0</span>, so there will never be any voltage output from the op amp. In order for an inverting amplifier to function, the op amp needs to detect the <code>-</code> input <em>trying</em> to increase in voltage so that it can note a difference between its two inputs and emit a voltage at the output to force it back down to 0V.
</dd>
</dl>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">mki x es.EDU VCO User Manual</a> This manual has a section discussing how the “buffer” configuration works, and it also (in a separate context from op amps) explains voltage dividers.</li>
<li><a href="https://www.ericasynths.lv/media/MIXER_MANUAL.pdf">mki x es.EDU Mixer User Manual</a> This manual has experiments with and explanation of different op amp configurations in the context of building a mixer, and includes discussion of passive vs. active mixers using both non-inverting (“buffer”) and inverting configurations.</li>
</ul>
<h3 id="videos">Videos</h3>
<p>If you prefer to learn from a video lecture, here’s a good one which covers similar material to the one in this post</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=7FYHt5XviKc">EEVblog #600 - OpAmps Tutorial - What is an Operational Amplifier?</a>, by EEVblog (49:31)</li>
</ul>
<p>If you’re even passingly interested in analog synthezier electronics then all of Prof. Aaron Lanterman’s videos are probably worth your time, but these three are particularly relevant to this topic</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=vqtFsU97qw8">3 Op Amp Circuits All Electrical &amp; Computer Engineers Should Know by Heart (ECE Design Fundamentals)</a>, by Prof. Aaron Lanterman (14:11)</li>
<li><a href="https://www.youtube.com/watch?v=vbr4XbAhlnQ">Passive Signal Summing/Mixing, Using Only Resistors (ECE Design Fundamentals, Georgia Tech course)</a>, by Prof. Aaron Lanterman (19:13)</li>
<li><a href="https://www.youtube.com/watch?v=k4B43nhb91I">Active Signal Summing/Mixing, Using Op Amps in Inverting Configurations (ECE Design Fundamentals)</a>, by Prof. Aaron Lanterman (12:53)</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Mon, 03 Apr 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-04-03-building-a-synthesizer-4.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 3: Breadboarding the VCO</title>
    <link>https://www.craigstuntz.com/posts/2023-03-02-building-a-synthesizer-3.html</link>
    <description><![CDATA[<div class="info">
    Posted on March  2, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li>3: Breadboarding the VCO</li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>Having previously <a href="2023-02-22-building-a-synthesizer-2.html">built the power supply</a>, it’s now time to go on to building actual synth modules. Yay!</p>
<p>There doesn’t seem to be any proscribed order to build the mks x es.EDU modules in. But it makes sense to start with a Voltage Controlled Oscillator (VCO), so that the other modules will have some sound to modify when built, and the sawtooth/Pulse Width Modulation (PWM) VCO is the most generally useful oscillator in the series, so I started with that kit.</p>
<h2 id="on-making-mistakes">On Making Mistakes</h2>
<p>I’m going to describe the whole build process, with a particular focus on the mistakes I made. This is partly to help others fix similar problems they might have, but mostly it’s because I think that this is where the real learning happens.</p>
<blockquote>
<p>“Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.” - Brian W. Kernighan</p>
</blockquote>
<p>The quote above goes both ways. Debugging teaches you more about writing code than just reading correct code in a book. Likewise, making a mistake on a breadboard, and then finding and fixing that mistake, teaches you much more than just soldering a circuit together. When something doesn’t work and you have to find the problems with a continuity tester and an oscilloscope, that’s what helps you to really understand what is happening in the circuit, and how to find this information using tools such as a digital multimeter, an oscilloscope, and your brain.</p>
<h2 id="breadboarding">Breadboarding</h2>
<p>The heart of the kit, in my opinion, is breadboarding. This is what distinguishes the mks x es.EDU kits from many other DIY synth kits. In contrast to other kits, where you build a completed circuit from start to finish and then power it on, with breadboarding you build <em>and evolve</em> the circuit for the VCO, adding features as you go.</p>
<p>The breadboard constuction proceeds in several phases.</p>
<h4 id="vco-core">VCO Core</h4>
<figure class="inlineLeft">
<a href="/images/synth/VCOOscillatorCore.jpg"> <img src="/images/synth/VCOOscillatorCore.jpg" width="140px" loading="lazy" alt="The VCO core built on a breadboard. Next to it is an oscilliscope showing the oscillation on its display."> </a>
<figcaption>
It’s… oscillating!
</figcaption>
</figure>
<p>Building the oscillator core on the breadboard went easily, and the circuit worked the first time I tried it. This part “just worked.”</p>
<p>Note that the wave you can see in the image is sometimes called an “inverted” sawtooth: It shoots up to its maximum voltage and then falls slowly down to the minimum. This distinction (from a “ramp” or “regular” sawtooth wave, which grows slowly to its maximum and then falls quickly to the minimum) will be inaudible at audio frequencies, but it will be “different” if you’re using this oscillator as an <a href="https://en.wikipedia.org/wiki/Low-frequency_oscillation">LFO</a>.</p>
<p>What frequency is the oscillator producing? Well, my oscilloscope tells me that the period of the period of the oscillation is 126.7 µS, so the frequency is the reciprocal of that, which is about 7893 Hz. This is approximately a B8 (a B on the 8th octave – about an octave above the range of a standard piano). So it’s a pretty high pitch!</p>
<p>One thing which I will not do in this series is to explain <em>how</em> the circuits work. For that you can <a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">read the very fine manual</a>, where the author, Moritz Klein, does a better job than I could do explaining just that. Honestly, even if you have no intention of ever building these kits, the instructions are very useful reading. They are the clearest “starting from nothing, no knowledge assumed” explanations I’ve seen of audio circuitry.</p>
<p>Having said that, I do think it’s worth sharing <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIq1XMgdgMwAsuquY+kAnNrriLoSBopEwKYC0YYAUGABz4Q-ZI0JhkISrknjJrGBjDRkk-NHxCMkHgBMpMkJskjGxkKnAA5cYX48A7gdkTnR-PMfDRIOd7MeUDwAxv6+rqa+lPIWWPDxCXD4nJSxiPj8uPyohIiUkPyElISMMHC8AOZhRSY+iGCWCl6Rfvxw4Z5OLa7SstFBTr1RkmBw-MNBAIbgY75tMyRzrONIIFxKiWkZuIi4eEhghKioqajQ6ZnZufmFxYyj8V6ji3asz5aE+I1PeB9fMwVfP8dE4HuNPpYwb4fDpQu8luByLJ5gpYPEIOoZCwcAJkPVIGgwHQyggeAAnRGBV6UySIEpQAHwHhVbiBOn3JFMHAMkE0hHcQoInSobiIwXUhqualvYTwcDk2WsVrtGoMh6PKptJX9LVMBo8ngAe3AJgZhCoqVGmHivRQ6AZkLUPCAA">this simulation</a> of the oscillator core, because it’s super-helpful to be able to see how current moves inside the wires. The dots represent current, voltage is represented by color: higher voltages are green for positive, gray for neutral, and red for negative. (By default; use Options-&gt;Other Options…to change the colors if distinguishing red and green is challenging for you.)</p>
<div style="clear: both;">

</div>
<h4 id="add-output-buffer">Add Output Buffer</h4>
<p>So now we have an oscillation, we’re done with the “VCO,” right? Not by a long stretch! The next step is to buffer the output so that you can connect headphones or another module and have the circuit keep working. Without this, the resistance of the headphones, etc., will change the frequency of vibration.</p>
<p>The circuit is quite simple, but I encountered a few issues building it.</p>
<figure class="inlineLeft">
<a href="/images/synth/BreadboardWhatIsThis.png"> <img src="/images/synth/BreadboardWhatIsThis.png" width="156px" loading="lazy" alt="Close-up of breadboard illustration showing a component which looks like an empty box"> </a>
<figcaption>
What is this component?
</figcaption>
</figure>
<p>One minor frustration I had with the instructions for this kit concerned the breadboard assembly. The breadboarding instructions were primarily hand-drawn illustrations, and there was no accompanying schematic at each breadboard step. (There is a schematic for the whole VCO as assembled on the PC board.) I spent more time than I’d like to admit staring at the component circled in red at left, trying to figure out what it was, before I eventually realized it was just a very short wire!</p>
<figure class="inlineRight">
<a href="/images/synth/VCOOpAmpMisleading.png"> <img src="/images/synth/VCOOpAmpMisleading.png" width="156px" loading="lazy" alt="Op amp from breadboard illustration in instructions showing incorrect text orientation"> </a>
<figcaption>
Actual diagram from instructions
</figcaption>
</figure>
<p>A much bigger problem was that when I powered up the circuit the TL074 op amp chip became very hot. This tells me that power is going somewhere where it should not.</p>
After a couple of minutes staring at the illustration, it traspired that I had installed the TL074 op amp chip upside down. <a href="https://modwiggler.com/forum/viewtopic.php?t=257249&amp;start=75">It turns out I’m not the first to make this mistake!</a> It’s a very easy mistake to make because the instructions are confusing. The two ICs are oriented differently on the breadboard (and probably need to be because of the locations of their power pins), and this is not called out in the instructions.
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/VCOOpAmpSuggestedChange.png"> <img src="/images/synth/VCOOpAmpSuggestedChange.png" width="156px" loading="lazy" alt="A suggested change to the instructions showing the op amp text correctly oriented"> </a>
<figcaption>
Suggested/corrected diagram
</figcaption>
</figure>
<p>Worse, the TL074 is pictured incorrectly in the instructions! The text is depicted upside down. Above and to the right is the actual diagram from the instructions showing the IC text printed in the inverse of how it actually appears on the chip, and below that is my suggestion for how the diagram could be changed to clarify the actual way the chips could be installed.</p>
<p><em>Also,</em> a further warning, just because the instructions seem to be going out of their way to confuse you on this point: The orientation of the two ICs is <em>different</em> in the breadboard layout vs. the PC board layout. All I can say is to double and triple-check the orientations vs. the specific step you are building at every step before turning on power, because they are not always the same, and getting it wrong means a cooked op-amp chip.</p>
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/tl074-pinout-diagram.png"> <img src="/images/synth/tl074-pinout-diagram.png" width="300px" loading="lazy" alt="A pinout diagram of the TL074 op amp chip"> </a>
<figcaption>
TL074 pinout
</figcaption>
</figure>
<p>So I “borrowed” another TL074 from a different kit installed the chip correctly, and the circuit worked. I could measure the signal with my oscilliscope, which looked exactly like it did without the buffer, only without the DC offset. The instructions say to:</p>
<blockquote>
<p>Plug some cheap headphones into the audio jack socket, and you should be able to hear a very high-pitched tone.</p>
</blockquote>
<p>When I plugged my headphones into the jack I heard… mostly a low-frequency (5-10 Hz) clicking sound. After… a lot of debugging, I found that I had connected the wire which runs from the output of the op amp to the 1 µF capacitor just above the headphone jack incorrectly. I had the wire running to pin 10, the + input of the op amp, instead of pin 8, the output. Correcting this wire fixed the click, and I could hear the correct oscillation.</p>
<p>Let me spell this out with schematics, since <a href="https://modwiggler.com/forum/viewtopic.php?p=3696054#p3696054">it seems like others have had this problem</a>:</p>
<figure class="inlineLeft">
<a href="/images/synth/VCOWithOpAmpWrong.png"> <img src="/images/synth/VCOWithOpAmpWrong.png" width="300px" loading="lazy" alt="Schematic of VCO core with op-amp connected to the output incorrectly by the + input pin on the op amp instead of the output pin"> </a>
<figcaption>
This causes 5-10 Hz clicking
</figcaption>
</figure>
<figure class="inlineLeft">
<a href="/images/synth/VCOWithOpAmp.png"> <img src="/images/synth/VCOWithOpAmp.png" width="300px" loading="lazy" alt="Schematic of VCO core with op-amp correctly connected"> </a>
<figcaption>
Correctly wired circuit
</figcaption>
</figure>
<div style="clear: both;">

</div>
<p>The schematics make my mistake super-clear! Whereas if you look at the actual breadboard (see the photo below), or the illustrations in the manual, it’s a lot less clear what is happening in the circuit. So I spent a fair amount of time drawing schematics of the breadboard experiments which followed. I hope you find them useful!</p>
<p>After working through all of these problems, I think that these mistakes, which were mostly mine, are exactly what I wanted from this whole project. The chance to screw up and then find the problems. This is, in my opinion, the best way to learn. You don’t get this kind of knowledge from a kit where you just solder chips onto a board and then you’re done. It’s wonderful!</p>
<p>(Note that the audio output is somewhat loud. If your headphones don’t have a volume control on them, I’d recommend keeping them off of your ears, at least at first.)</p>
<h4 id="digression-an-optimization">Digression: An Optimization?</h4>
<p>The VCO at this point has essentially three sub-circuits, identifed below:</p>
<figure>
<a href="/images/synth/VCOSubcircuits.png"> <img src="/images/synth/VCOSubcircuits.png" width="500px" loading="lazy" alt="Schematic for the VCO with subcircuits of the VCO core, the buffer, and the DC high pass filter identified."> </a>
<figcaption>
Sub-circuits
</figcaption>
</figure>
<p>The oscillator core emits a sawtooth wave ranging from about 1.7 to 7.2V. This is well within the range of the op amp, but it’s not centered at 0. The DC (passive high pass) filter will center the oscillation around 0. I wondered if it would make more sense to switch the order? My thought had been that putting the DC filter before the buffer would result in the oscillator’s voltage range being more centered in the op amp’s range.</p>
<p>Since I find it easier to think in schematics than in board layout, I first modeled this in the simulator, thinking that I would try it on my breadboard when I was happy with the result. It’s worth noting that the simulator is not perfect, and some things work in real life which look strange in the simulator. But in this case my “improved” circuit doesn’t work at all, and I could immediately see why:</p>
<figure>
<a href="/images/synth/VCOCoreBroken.png"> <img src="/images/synth/VCOCoreBroken.png" width="500px" loading="lazy" alt="VCO with DC high pass filter before the buffer, which does not work."> </a>
<figcaption>
This does not work
</figcaption>
</figure>
<p>Instead of being two distinct sub-circuits separated by the buffer, the resistors and capacitors from the oscillator core and the passive high-pass filter are now a combined impedance, which breaks both sub-circuits! The oscillator now runs at the wrong rate, and the DC filtering doesn’t work at all. So much for that idea!</p>
<h4 id="changing-the-frequency-with-a-potentiometer">Changing the Frequency with a Potentiometer</h4>
<p>Next, we experiment with changing the frequency of oscillation by substituting different values for the capacitor and the resistor in the oscillator core, which does indeed change the pitch of the tone that’s generated. Then we substitute a transistor for the resistor, which allows us to have a variable pitch by using a potentiometer connected to the transistor’s base. This potentiometer will eventually become the tuning knob.</p>
<p>The only real problem in this phase of the build was mounting the potentiometer to the breadboard; the pot I was given in the kit was much bigger than the pot drawn on the assembly diagram. I found a way to make it work (see below).</p>
<figure>
<a href="/images/synth/VCOWithVoltageControl.jpg"> <img src="/images/synth/VCOWithVoltageControl.jpg" width="400px" loading="lazy" alt="A breadboard with the VCO circuit on it."> </a>
<figcaption>
VCO at the end of this stage
</figcaption>
</figure>
<p>I find it helpful to look at a schematic, but there is no (complete) schematic for this stage in the directions, so here’s one I made:</p>
<figure>
<a href="/images/synth/VCOCoreWithPot.png"> <img src="/images/synth/VCOCoreWithPot.png" width="500px" loading="lazy" alt="Schematic of VCO core with potentiometer for pitch control"> </a>
</figure>
<h4 id="changing-the-frequency-with-a-voltage-control-input">Changing the Frequency with a Voltage Control Input</h4>
<p>Here we just add a jack and use a passive mixing circuit – nothing more than a couple of resistors – so that we can control the pitch with <em>both</em> an external CV input and the potentiometer from the previous step. Really, they’re both just sources of variable voltage. Finally we tie the output to ground with a 4 or 14k resistor to bring the sum down a bit.</p>
<p>Now here’s the schematic:</p>
<figure>
<a href="/images/synth/VCOCoreWithCVInput.png"> <img src="/images/synth/VCOCoreWithCVInput.png" width="500px" loading="lazy" alt="Schematic of VCO core with CV input and potentiometer for pitch control"> </a>
</figure>
<h4 id="deal-with-component-temperature-variations">Deal with Component Temperature Variations</h4>
<p>Having added a Control Voltage input in the previous step, we now must rip it out to add support for additonal components.</p>
<p>Because the NPN transistor warming lowers its resistance to ground, raising the pitch of the oscillator, we add a PNP transistor, which has the opposite effect when warmed. The idea here is that the two transistors will counteract each other (hopefully!), producing a mostly steady pitch once the oscillator is tuned. The base of the PNP transistor is connected to ground because – well, because it’s handy at the moment, really. This is not how we will have it long-term.</p>
<p>I really needed the schematic here:</p>
<figure>
<a href="/images/synth/VCOWithPNP.png"> <img src="/images/synth/VCOWithPNP.png" width="500px" loading="lazy" alt="Schematic of VCO with PNP transistor added"> </a>
</figure>
<p>One thing to point out here is that the PNP transistor’s collector is connected to -12V, not ground! This is on purpose as we are trying to keep the voltage at the emitter within the 0-550mV range that is appropriate for the NPN transistor’s base, as you can see from the schematic. Connecting the PNP transistor’s collector to -12V instead of ground does that.</p>
<h4 id="add-tuning">Add Tuning</h4>
<p>Now we add the tuning knob and CV input back into the circuit, also adding a fine tuning adjustment.</p>
<figure>
<a href="/images/synth/VCOWithTrimmers.png"> <img src="/images/synth/VCOWithTrimmers.png" width="500px" loading="lazy" alt="Schematic of VCO with tuning and fine-trimming potentiometers added"> </a>
</figure>
<p>There’s a trim potentiometer which is connected to a 1.5kΩ resistor in the schematic, but I didn’t have any special symbol for that, so I just used a standard potentiometer symbol. That potentiometer is used for the oscillator’s fine tuning adjustment.</p>
<p>The biggest problem I had with building this part of the circuit was that I couldn’t find the trim pot. There’s about a 95% chance I lost it while digging through the bag for a diode. I picked one up from my local supplier at a price which bordered on highway robbery, but <em>I don’t care,</em> because I can’t tell you how nice it is to have an electronics parts store within a few blocks of my house and I would very much like them to remain in business.</p>
<p>The coarse tuning potentiometer has returned, now connected to -12V instead of ground. The oscillator has been fairly high-pitched, and the designer wants to bring the pitch down by lowering the voltage sent from the tuning potentiometer. How low?</p>
<p>The tuning potentiometer forms part of a voltage divider between the +12V and -12V supplies. The voltage divider output is:</p>
<table>
<thead>
<tr class="header">
<th>Potentiometer setting</th>
<th>Voltage divider calculation</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0%</td>
<td>24V * 100kΩ / (100kΩ+133kΩ) - 12V</td>
<td>-1.7V</td>
</tr>
<tr class="even">
<td>50%</td>
<td>24V * 150kΩ / (150kΩ+83kΩ) - 12V</td>
<td>3.4V</td>
</tr>
<tr class="odd">
<td>100%</td>
<td>24V * 200kΩ / (200kΩ+33kΩ) - 12V</td>
<td>8V</td>
</tr>
</tbody>
</table>
<p>Compare that to the circuit in the “Changing the Frequency with a Voltage Control Input” section:</p>
<table>
<thead>
<tr class="header">
<th>Potentiometer setting</th>
<th>Voltage divider calculation</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0%</td>
<td>12V * 0kΩ / (0kΩ+100kΩ)</td>
<td>0V</td>
</tr>
<tr class="even">
<td>50%</td>
<td>12V * 50kΩ / (50+50kΩ)</td>
<td>6V</td>
</tr>
<tr class="odd">
<td>100%</td>
<td>12V * 100kΩ / (100kΩ+0kΩ)</td>
<td>12V</td>
</tr>
</tbody>
</table>
<p>So we can see that the voltage is indeed lower. More importantly, the range of the coarse tuning adjustment is now closer to a “musically useful” range, which is around 0-8V.</p>
<h4 id="add-pwm-wave-shape">Add PWM Wave Shape</h4>
<p>Other than the breadboard getting a bit crowded and the potentiometers not really fitting into the breadboard well as usual, this step went fairly easily.</p>
<figure class="inlineRight">
<a href="/images/synth/OpAmpComparitor.png"> <img src="/images/synth/OpAmpComparitor.png" width="300px" loading="lazy" alt="Schematic of op amp in comparitor mode with variable voltage input to inverting input and with PWM waveform on the output"> </a>
<figcaption>
Op amp comparitor, from the directions to the VCO kit
</figcaption>
</figure>
<p>The general idea of this step is to use an op amp wired as a <a href="2023-04-03-building-a-synthesizer-4.html#comparator">comparator</a>: a circuit which returns a high voltage if the <code>+</code> input is higher than the <code>-</code> input and a low voltage otherwise. Sending the sawtooth wave through such a circuit results in a pulse wave which we can vary the width of by adjusting the voltage going to the <code>-</code> input of the op amp.</p>
<p>I do find the explanation of using an op amp as a comparitor in the directions a bit confusing, however. I much prefer this version, from <em>Make: Analog Synthesizers,</em> by Ray Wilson:</p>
<blockquote>
<p>Here we are applying a… voltage to the inverting input [<code>-</code>] of the op amp, and the noninverting input [<code>+</code>] is the input to the comparator. If we apply a [lower voltage] to the noninverting input, the output of the op amp will go as low as it can. The op amp really wants to pump current away from the inverting input through the nonexistent feedback resistor. As long as the voltage on the noninverting input is lower than the voltage on the inverting input, the op amp’s output will remain saturated low (stuck at its maximum negative output voltage). If the voltage on the noninverting input goes above [the voltage on the inverting input], the output of the op amp will become saturated high (stuck at its maximum positive output voltage) again in a vain effort to pump current to the inverting input through the nonexistent feedback resistor.</p>
</blockquote>
<p>In short, think of the op amp comparitor as a buffer with the feedback resistor set to infinity instead of nothing.</p>
<h4 id="add-pwm-width-control">Add PWM Width Control</h4>
<p>This is just a potentiometer voltage divider going into the inverting [<code>-</code>] input of the comparitor op amp above.</p>
<p>This pretty much just worked, although once again getting the potentiometer to stay in the breadboard was a bit fiddly. Also I ran out of room on the tiny breadboards I had, so I ended up daisy chaining three of them together. I have purchased a larger breadboard for the remaining kits.</p>
<h4 id="add-output-level-control">Add Output Level Control</h4>
<p>Here we add a couple of op amps to normalize both the sawtooth and the square wave outputs. Finally we can hear the square wave as the output is no longer so hot that it would damage your headphones if you connect it.</p>
<p>Here’s my final physical circuit:</p>
<figure>
<a href="/images/synth/VCOCoreBreadboardFinal.jpg"> <img src="/images/synth/VCOCoreBreadboardFinal.jpg" width="100%" loading="lazy" alt="The full VCO on a breadboard"> </a>
<figcaption>
I’m going to need a bigger breadboard
</figcaption>
</figure>
<p>Also, I made <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEJ1Q5U4ZHBFgpk6WxgYw0WiELRizKLwAmMuUlRtR48ImOZwAOQZgGA3gHcDbWdO6GLi5yLET3E39zS0heAGM-M0CogOQBRUxoY3hUtKIuPCSKOwQhQUJ0VGRhGDg+AHNYyQTq2Tw6HxdTOI9iOhiw5uCYzzd4ptcakzBUAWGdAEMZMclkJk55uaZx0ZnwdOz7SEZkMkgBFCQMLBywPMICopKN1N9Fplklh8lZHWal2TfuWa-G+9Gq2Q30BkgcOkiLyeTH6S0UsFSECwVCEhVQDBIqAI5CgCL4ACcoMsieRZm40rwqm5xONqQwYe8SbQmODoToAC4iQgWV50TjtXkkvzJISQRCIBg4ARS-CIN4wDHnBglRDUem4BgoW4gXTsABmkwArgAbdmUrmEDolCT8y2SBpEsKczh2K2FLkCR7WonccAqPBy0aUQgUHDiHYiBX4PDouyIATIHCWpPa3UGk1m5qET2C-k8v46Qn8nMF4uPbwk9K8ABKHvLljL5kgDLYDDcEkSShrdbB40b5DWiTb6072F4RblcXdnEn9saTa6IlnsmnDn67rC5AWy72fOXNPAt3hcAwADEAJYAO3Y5pdDoHNoY95wch8E7WK5ty4r5LuW5EUhAh4gG9oe5wKAiGAAMIAPaTPiADON5FiBvSoaq87gfA44AQcxKLHhpK0uo1BwN2BGrAeFHgC+nYgMOPyOriiDkehdrUUgzZMcOg6OmO75Tl+MaSBuR5kdMbj0mwtT2MOqw2h+mwKqgxiurgcCKkQkbJOi6A4OKYwYm2YDulhZEuJJWqwjC-CMDIH4hny96SgEYnwoUgjpOkwgAAomkhIAAOrnro7IABY4ZwznolyAQMDFv7YbW3AOS+9kBJadE8R2fEsclPBxWYKVxQIxGtiMOXwixWZxTFnjgPFNlFqZjWxQ1pUkm2ZFVPyJV9qZrAtgCHStZJCW8NM5AjVq6DTXQWRIDIyibC60CHBQqltgIBVYiIDBrbg9QIMYSAlDgbkTfRQIyb8AwgAtGDcMtaTaSp8WsKqBBPngmpZJwMBvXpBmeoQxmmRSLhTQ10RpZxNmQ7Dg2YFqcOMrNTZMOj9hWb4rK7ldNFkjhrIHqCRGVnckO-KTt21GEhIk7MJPCa2ODYVUzMSKyCRlbwqA8OAtNuMJsh04eCTSASIAyVJgurLLiVkYSZOy2TBlEgM5lyw1PGwwrfMC1jmp0GqDVWeL8CYOaav5r8KC86SS4fhWM7O1xbDnSoEgYKO0EAGogD557suEYUgAAkpeAAOhpms1tULKZmUaxLm52b14DJxnJkfsjqS4vYdo+YFACyIBQQHAAy7AAG7sMatk2qZWJ8s3cL0ESPu5YHgXl379ysoUfaD6+A+rFnSej80a4iY+eMbgP8+Pm8n46AAHku+YOI9v3teMmNMEHIdhQAOghFe2Qs9KrBhe14yvbnHmKICniXA8DTmLqmcC-zT9-3zX0FPTO+N92KAPsB1RWac57yw6i6VkxsiSezWtoX2L8y4Xw3i6YEOtzoujEGbVsmAmCv14Fg+Mgs0AkmKBgA+Pc34wXolkYibZSCoIRHAPAL4UDoCJFzLIhBeCMPFNLahWI2AaDwAmZUrBID8ykQ0H6uJ4AQFUbwIAA">a simulation of the full VCO</a> as built on the breadboard which I invite you to play with. You can interact with the simulation via the sliders on the right, and you can hear the oscillator by pressing the two “Play Audio” buttons.</p>
<figure>
<a href="/images/synth/VCOSimulation.png"> <img src="/images/synth/VCOSimulation.png" width="100%" loading="lazy" alt="Screenshot of the VCO circuit running in the simulator"> </a>
<figcaption>
Simulated VCO
</figcaption>
</figure>
<h2 id="coming-soon">Coming Soon!</h2>
<p>Having built a working circuit, it’s now time to rip all of the components out of the breadboard and solder them (plus a few extras) onto the PC board. But before I do that, I’m going to take some time to <a href="2023-04-03-building-a-synthesizer-4.html">explain how op amps work</a>. Sorry, folks, that’s about as much of a cliffhanger as I can manage.</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">mki x es.EDU VCO User Manual</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://www.modwiggler.com/forum/viewtopic.php?t=257249">Modwiggler thread</a></li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-vco">Modulargrid page</a></li>
</ul>
<h3 id="simulation">Simulation</h3>
<ul>
<li>The <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkzoBZHwJwDMky2AHIogOxmbIgZ4MCmAtGGAFBhmEhmkQ2MPXxV6w+pCjQMYaMnqFohPhkicAJiDFLC9AdhCr6qcADlh5TgHcd4oSPt6pt-oMnujJqJwDGXo4GHvhSIKjQqPDRMXCEbPjGsBxk2IToiIRU4thGMHBcAOaB2KGBiGBm0hp2hkH8cPU1JU66QmXNbaX0YHC03b4AhuB9QmTSvVRm5NK0SCDscrFJCDxghOtT2GhUPCspaRlZOUa90W6T0+MjU0LpvnaXd2Zn-ffNr88jkP2CGgFPGbgdYSa7VWDRCDKcRkbKQdLIfAkMRkWj5BCcABOwP0YwmIIYuSg33gnGKHFxiCJFPoKGqDxxoPxqTxvlQHGBLKBlScQImDUaXGx42knhF7TCZ3OxXFA3FFSqvgA9uADMTsJB8IlejJoroUOhiS8lJwgA">VCO core</a></li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEAIFtidUqhASoUbOGi0Z0Ysyi8AJiCmYUIsXrrSwAOQZgGA3gHcdeabN3o6kWwfGE6oti40BjDxkvIItXTGhUeGiYuEIuPAjUK0gBVGS8ZBws6gwYOD4Ac1Cwb0MGQmk2NzsfYO9S+o1awycHEDDm+2lOsEhkjsa3AENwfqYGODHRDqmBcAxuDD6YpJTEPGyCfCJMtbE0jKycyGWY9z6ZybZL+cJEKovUu4exgfvHuz731++mQgETDcgVusxuSB6U2qsGiECwZDAhB4olQpQoeRhfAATuAIWDca8GMggWNorxijxCcSCT1DNULnjruAomwmW5URAwCz8VzKvibiJ4OBeAAXQXiV4CRofOQQbjQIRiEjJHACCj9GYwCxwCoFMS4BACOgrECadgAM2GAFcADYi8kiaXIeZSugVKoaMU4EJeebZO7OuTcXHQKhwViI0qWHCoOicLX4KRqhAETbIIik00W6129z+mSSqYytw4-My-N+G6xXgAJXogb8FcmclZNw90MQtfrd0B3Y6VhbsxA3Hb8k7pcg-0DOEnHT5N1YNXos999B9gbc5CYM4mfJ3HWpnKF+VOIAAYgBLAB27AdMdZA-vHT29InU79s8rpPgvCiOGXTCNp+AxMAAwgAavwjAgOmdwhLBMi9keUIwhgoEAPbDFiADOt44ghsgIagMayuc+GpPiCFEiSxA-nWVHUlRL5yM2I6DjAnb0RRxHSERzbVEOXLsdgvBvjIgZoO+pFkuh4DeCxkCkBEGLRGmKDoHIJh0IQvBAA">VCO core with CV and tuning</a></li>
<li>The <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEJ1Q5U4ZHBFgpk6WxgYw0WiELRizKLwAmMuUlRtR48ImOZwAOQZgGA3gHcDbWdO6GLi5yLET3E39zS0heAGM-M0CogOQBRUxoY3hUtKIuPCSKOwQhQUJ0VGRhGDg+AHNYyQTq2Tw6HxdTOI9iOhiw5uCYzzd4ptcakzBUAWGdAEMZMclkJk55uaZx0ZnwdOz7SEZkMkgBFCQMLBywPMICopKN1N9Fplklh8lZHWal2TfuWa-G+9Gq2Q30BkgcOkiLyeTH6S0UsFSECwVCEhVQDBIqAI5CgCL4ACcoMsieRZm40rwqm5xONqQwYe8SbQmODoToAC4iQgWV50TjtXkkvzJISQRCIBg4ARS-CIN4wDHnBglRDUem4BgoW4gXTsABmkwArgAbdmUrmEDolCT8y2SBpEsKczh2K2FLkCR7WonccAqPBy0aUQgUHDiHYiBX4PDouyIATIHCWpPa3UGk1m5qET2C-k8v46Qn8nMF4uPbwk9K8ABKHvLljL5kgDLYDDcEkSShrdbB40b5DWiTb6072F4RblcXdnEn9saTa6IlnsmnDn67rC5AWy72fOXNPAt3hcAwADEAJYAO3Y5pdDoHNoY95wch8E7WK5ty4r5LuW5EUhAh4gG9oe5wKAiGAAMIAPaTPiADON5FiBvSoaq87gfA44AQcxKLHhpK0uo1BwN2BGrAeFHgC+nYgMOPyOriiDkehdrUUgzZMcOg6OmO75Tl+MaSBuR5kdMbj0mwtT2MOqw2h+mwKqgxiurgcCKkQkbJOi6A4OKYwYm2YDulhZEuJJWqwjC-CMDIH4hny96SgEYnwoUgjpOkwgAAomkhIAAOrnro7IABY4ZwznolyAQMDFv7YbW3AOS+9kBJadE8R2fEsclPBxWYKVxQIxGtiMOXwixWZxTFnjgPFNlFqZjWxQ1pUkm2ZFVPyJV9qZrAtgCHStZJCW8NM5AjVq6DTXQWRIDIyibC60CHBQqltgIBVYiIDBrbg9QIMYSAlDgbkTfRQIyb8AwgAtGDcMtaTaSp8WsKqBBPngmpZJwMBvXpBmeoQxmmRSLhTQ10RpZxNmQ7Dg2YFqcOMrNTZMOj9hWb4rK7ldNFkjhrIHqCRGVnckO-KTt21GEhIk7MJPCa2ODYVUzMSKyCRlbwqA8OAtNuMJsh04eCTSASIAyVJgurLLiVkYSZOy2TBlEgM5lyw1PGwwrfMC1jmp0GqDVWeL8CYOaav5r8KC86SS4fhWM7O1xbDnSoEgYKO0EAGogD557suEYUgAAkpeAAOhpms1tULKZmUaxLm52b14DJxnJkfsjqS4vYdo+YFACyIBQQHAAy7AAG7sMatk2qZWJ8s3cL0ESPu5YHgXl379ysoUfaD6+A+rFnSej80a4iY+eMbgP8+Pm8n46AAHku+YOI9v3teMmNMEHIdhQAOghFe2Qs9KrBhe14yvbnHmKICniXA8DTmLqmcC-zT9-3zX0FPTO+N92KAPsB1RWac57yw6i6VkxsiSezWtoX2L8y4Xw3i6YEOtzoujEGbVsmAmCv14Fg+Mgs0AkmKBgA+Pc34wXolkYibZSCoIRHAPAL4UDoCJFzLIhBeCMPFNLahWI2AaDwAmZUrBID8ykQ0H6uJ4AQFUbwIAA">full VCO</a> (as breadboarded; this is missing a few components not on the breadboard such as thermistors and output protection resistors)</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23). This is a super-short overview with a demo of the full system.</li>
<li><a href="https://www.youtube.com/watch?v=QBatvo8bCa4">DIY VCO Part 1: The analog oscillator core anyone can build</a>, <a href="https://www.youtube.com/watch?v=4qxgwN9aq8E">DIY VCO Part 2: The simplest exponential converter</a>, <a href="https://www.youtube.com/watch?v=dd1dws6pSNo">DIY VCO Part 3: Tuning your VCO (and making sure it stays in tune)</a>, and <a href="https://www.youtube.com/watch?v=E76z9ZTc5po">DIY VCO Part 4: Shaping Sawtooth to Square</a>. Four-video series by Moritz Klein, 1:02:00 all together. It’s important to note that in this series he builds a <em>somewhat different</em> VCO than the one which ships in the mks x es.EDU kit. But it has a lot in common and I still think this video series is very, very useful.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Thu, 02 Mar 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-03-02-building-a-synthesizer-3.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer: Glossary and Electrical Connections</title>
    <link>https://www.craigstuntz.com/posts/2023-02-23-building-a-synthesizer-glossary.html</link>
    <description><![CDATA[<div class="info">
    Posted on February 23, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li>Glossary and Electrical Connections</li>
</ul>
</div>
<p>If you play synths, are quite familiar with modular synths, and already understand why you can’t just plug a keyboard into a modular synth and expect stuff to work, or if you don’t care much about how modular synths work then feel free to skip this article.</p>
<h2 id="a-glossary">A Glossary</h2>
<p><strong>DIY</strong> stands for “Do It Yourself,” and, in this context, refers to building synths either from a kit or from just plain electronic components.</p>
<p>A <strong>modular</strong> synth is one which is comprised of separate modules, such as oscillators and filters, which can usually be purchased separately and interconnected using patch cables. Most big-name synths that you buy from Roland, Korg, Yamaha, etc., today are <em>not</em> modular. Modular does not mean “any synth with patch cables,” however. There are synths called “<strong>semimodular</strong>” synths which can be patched but are part of a single, inseparable case and which are typically “normalled” together (that is, the synth will make a sound without any patch cables, and then you can change the sound via patching). A modular synthesizer is distinguished by the ability to mix and match modules from various manufacturers to produce a tone.</p>
<p>A <strong>monophonic</strong> synth can only play one note at a time, like a trumpet. A <strong>polyphonic</strong> synth can play multiple notes at a time, like a piano. Polyphonic synths have a limited number of “voices,” which is very roughly the number of notes they can play at once. Polyphonic synths can usually play more than one preset at a time, perhaps splitting the keyboard between two or more instruments.</p>
<p>Modular synths are monophonic, for the most part, because each module <em>usually</em> handles a single sound at a time. A polyphonic synth, on the other hand, will generally allow the player to create a preset once and play chords with it, by default. It’s pretty common to use multiple modules to make multiple sounds, concurrently, but this is closer to having multiple monophonic synths than to having a single, polyphonic synth.</p>
<p><strong>MIDI</strong> stands for Musical Instrument Digital Interface. It’s an old, slow networking protocol which was designed to be the cheapest possible solution to a particular problem in the 1980s: How to play one polyphonic synthesizer using an external keyboard or sequencer. At one point in time (also during the 80s), it was accurately described as “the local area network with the world’s larget installed user base.” It’s hard to overstate the effect that MIDI had on music. For many, it made “home studios” <em>possible.</em> Today it’s <em>still</em> in use, almost entirely unchanged, although it’s being ever-so-gradually edged out by USB.</p>
<p>An <strong>analog synthesizer</strong> makes sounds using analog circuitry, as opposed to a <strong>digital synthesizer</strong>, which makes sounds using digital signal processing. Modular synth components <em>tend</em> to be analog, but there’s no rule which says they have to be, and digital modules do exist. I mention this because it’s orthogonal to the interface. In other words, MIDI is a digital interface which can be used to control either analog or digital synths. Voltage control is an analog interface which can be used to control either analog or digital synths or modules.</p>
<h2 id="voltage-control">Voltage Control</h2>
<p>Most commercial synths include a MIDI interface, with the exception of modular gear which more often uses an <em>even older…</em> well… “standard” is not quite the right word. Anyway, you can connect modules together using an analog protocol called “Voltage Control” (or “CV/Gate” after the specific connections). You can also connect a keyboard or sequencer to a modular synth using the same connections, which might be useful if your keyboard or hardware sequencer has CV/Gate outputs (some do, some don’t) and your modular synth does not have a MIDI interface… module.</p>
<p>These are analog signals, and will allow you, if you plan carefully, to connect two modules together and probably control them with a keyboard or external sequencer, although with greatly limited features in comparsion with a keyboard-to-synth MIDI connection. “Greatly limited” here means that features of MIDI such as support for chords, multiple channels over a single wire, and such niceties as keyboard velocity and aftertouch, either don’t exist at all or require additional work to support.</p>
<p>Taking a simple example, where you want to plug a keyboard into a modular synth, well, you have to look and consider your options. If your keyboard has only a MIDI output, then you must use a MIDI-to-CV module. If your keyboard has outputs labeled “CV,” “Gate,” “Pitch,” “Trigger,” “Mod,” or similar, then you can probably connect these directly to some modules on a modular synth. However, the signals carried on these outputs can vary, depending upon who implemented them.</p>
<figure>
<a href="/images/synth/NovationSLMKIIIBackPanel.png"> <img src="/images/synth/NovationSLMKIIIBackPanel.png" width="786px" loading="lazy" alt="The back panel of a Novation SL MkIII, showing CV, Gate, and Mod outputs"> </a>
<figcaption>
The back panel of a Novation SL MkIII, including CV outputs
</figcaption>
</figure>
<p>On a modular synthesizer, there are three general kinds of signals: CV/pitch, gate/trigger, and audio. Although note that it’s generally fine, encouraged, even to plug, say, the CV output of one module into the audio input of another module, or whatever. <em>In general</em> you can plug anything into anything, although there is no guarantee it will make a pleasing sound!</p>
<h3 id="cv-or-pitch">CV (or Pitch)</h3>
<p>A pitch Control Voltage (CV) is expected, in the <a href="#eurorack">Eurorack</a> world (although not necessarily in modular synthesis in general), to be 1V per octave. This mostly means that an A1 (the note “A” in the second octave of a standard, 88 key piano) is 1V and an A5 is 5V. Mostly! You may encounter other “encodings” of pitch, such as those where the voltage goes into the negative. But 1V/octave, starting at 0V is the system most commonly used and that’s what the mks x es.EDU modules use.</p>
<p>Given that the CV will have a voltage corresponding to the note that you’re playing, you might ask, “But what if I play a chord?” Simple! You don’t get to encode chords with CV. Most keyboards will just choose the highest or most recent note that you’ve played and set the CV to that. The expectation is that you’re going to use this connection with a monophonic synthesizer or with a single modular “voice.” If you wanted to play a three-note chord on a keyboard and have that voiced by a modular synth, you would need three separate CV and Gate outputs from your keyboard, and three separate oscillators on your modular synth. I’ve never seen a keyboard with three CV outputs, although you can buy <a href="https://six4pix.net/product/cvocd/">a MIDI-to-CV interface which has more</a>.</p>
<p>[In 1968, Wendy Carlos released the album <em><a href="https://www.wendycarlos.com/+sob.html">Switched-On Bach,</a></em> where she played many of Bach’s (very much polyphonic) compositions on the (very much monophonic) Moog synthesizer. How did she do this? Simple, she played one voice at a time into an 8-track tape recorder. It’s an incredible feat of musicianship that the result sounds so good!]</p>
<h4 id="mod">Mod</h4>
<p>It’s not uncommon for keyboards to have an output or two called “Mod.” Mod is electrically the same as CV/Pitch, but instead of sending pitch there the keyboard can translate some other MIDI <a href="https://www.whippedcreamsounds.com/midi-cc-list/">continous controller</a> to a voltage sent to that jack. Judging by the name I guess the expectation is that you’ll assign the mod wheel, but it could be set to anything. From there it translates whatever you’ve set it to a 0-5V output on the Mod jack.</p>
<figure class="inlineRight">
<a href="/images/synth/MoogLittlePhattyCVInputs.png"> <img src="/images/synth/MoogLittlePhattyCVInputs.png" width="180px" loading="lazy" alt="The CV inputs of a Moog Litte Phatty synthesizer, showing Pitch CV, Vol CV, Filter CV, and KB Gate jacks"> </a>
<figcaption>
Moog Little Phatty CV inputs
</figcaption>
</figure>
<h4 id="other-cv">Other CV</h4>
<p>If you just say “CV” and don’t say anything else, people will tend to presume you are talking about pitch CV (e.g., on the Novation back panel above the “CV” jack carries pitch information). But as seen with “Mod,” other information can be carried using a Control Voltage as well. The Moog Little Phatty seen at right will take Volume and Filter controls as well as pitch and gate over its CV inputs.</p>
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/MoogModelDCVOuts.png"> <img src="/images/synth/MoogModelDCVOuts.png" width="213px" loading="lazy" alt="The CV outputs of a Minimoog synthesizer, showing After Pressure, Pitch, V-Trig, and Velocity jacks"> </a>
<figcaption>
Minimoog CV Outputs
</figcaption>
</figure>
<h3 id="gate-or-trigger">Gate or Trigger</h3>
<p>In addition to Control Voltage you may have noticed a “Gate” output. This is a simple on and off, binary signal (where “on” might be anywhere between 5V and 10V, and “off” is 0V), representing whether the key is pressed/on or released/off. A few devices, such as the Minimoog, have “<a href="https://noiseengineering.us/blogs/loquelic-literitas-the-blog/getting-started-gates-vs-triggers">Trigger</a>” outputs instead of or in addition to Gate; trigger is a short pulse which happens at the start of a note and returns quickly to zero, in contrast to Gate which stays high as long as the note is played.</p>
<p>Why not put pitch CV and Gate on the same signal? One reason is because CV goes down to 0. Another reason is that you might want to send them to different modules, say, a pitch CV to an oscillator and gate to an envelope generator.</p>
<h2 id="eurorack"><a name="eurorack"></a>Eurorack</h2>
<p>Not all modules play nicely together, but a plurality of modules sold today follow the <strong>Eurorack,</strong> um, again, not “standard,” exactly. Suffice it to say that if you buy two Eurorack modules and play with them enough, you can probably get them to do something interesting. Anyhow, Eurorack includes both a common physical form factor, CV voltage (mostly!), and power requirements. Usually.</p>
<p>In the absence of a “Eurorack standard,” most makers take a “look at what Doepfer did on the <a href="https://doepfer.de/a100e.htm">A-100</a> and do something similar” approach. “Eurorack compatible” synth modules tend to follow the following conventions:</p>
<p>The <strong>physical form factor,</strong> or the size of the modules. Eurorack modules are (mostly!) 3U (three rack units, or 128.5 mm) high, and their widths are “quantized” by “HP,” or Horizontal Pitch units. This means they are usually some multiple of 5.08 mm wide.</p>
<p>The <strong>power requirements.</strong> The Eurorack power bus has a 16 pin connector for each module. However, it’s very, very common for modules to not use the first 6 pins and only have a 10-pin connector on the “module” end of the power cable.</p>
<p><a href="/images/synth/EurorackPowerPinout.png"><img src="/images/synth/EurorackPowerPinout.png" width="151px" alt="a list of pins in the Eurorack power connectors and which voltages each one carries" style="float: left;"></a> <a href="/images/synth/EurorackPowerConnector.png"><img src="/images/synth/EurorackPowerConnector.png" width="112px" alt="A Eurorack power connector socket" style="float: right;"></a> At the left is a pinout from the mks x es.EDU schematic. To the right is a picture of one of the 14 sockets in the mks x es.EDU power supply, which you can connect to a single module.</p>
<p>The first thing you’ll notice is there’s a lot of redundancy there. The connectors are 16 pins, organized into two columns of eight pins each. Each two-pin “row” carries exactly the same signal; they are connected together. Furthermore, there are three rows (six pins total) of ground pins, which, again, are connected together.</p>
<p>The power provided by the bus is +12 and -12 VDC. Some have argued that it would have been better if it specified ±15VDC, but Eurorack really was aligned to the specific needs of one system, the Doepfer A-100, not modular synths in general.</p>
<p>Finally, there are CV, Gate, and +5V power wires. Most modules do not use, and don’t even include wires for, the Gate and CV on the bus (expecting you to instead connect Gate and CV via jacks on the front of a module), and +5V connections. I guess the idea behind the Gate and CV connections is you could plug a keyboard or MIDI interface into these and then have the signal “normalled” (connected by default, until you plugged a patch cable in elsewhere) to the CV/gate input on some modules. At any rate, not many modules use this feature at all, requiring you to connect the Gate/CV through the front panel of the module. Similarly, +5V power is simply not needed by most modules.</p>
<p>There is a <a href="http://www.elby-designs.com/webtek/documents/eurosynth-specification.htm">EuroSynth</a> specification which attempts to take the mishmash of Eurorack informal specs and formalize them. Needless to say, essentially no manufacturers have adopted this spec.</p>
<p>In the <a title="The mki x es.EDU DIY System" href="2023-02-21-building-a-synthesizer-1.html">next post</a> we will look at the mki x es.EDU DIY System in more detail.</p>
<h2 id="resources">Resources</h2>
<ul>
<li>The <a href="https://doepfer.de/a100_man/a100m_e.htm">Construction Details</a> document on Doepfer’s site gives information about the physical form factor of Eurorack.</li>
<li>The <a href="https://doepfer.de/a100_man/a100t_e.htm">Technical Details</a> document on Doepfer’s site is a good overview of volatage control in general. It’s also informative if you’d like to know more about the A-100, which other “Eurorack” manufacturers are using as an example.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Thu, 23 Feb 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-02-23-building-a-synthesizer-glossary.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 2: Building the Power Supply</title>
    <link>https://www.craigstuntz.com/posts/2023-02-22-building-a-synthesizer-2.html</link>
    <description><![CDATA[<div class="info">
    Posted on February 22, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li>2: Building the Power Supply</li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>I decided to build the power supply first, so that I could use it when building the other modules. That’s not strictly necessary; you can power them with a pair of 9V batteries (while building) if you like, but I was going to want a functional enclosure and power supply eventually anyway, so this seemed like a good place to start.</p>
<p>Unlike most of the other kits in the series, Moritz Klein did not write the manuals (or design the circuit, I think), and this manual, unlike most of the others, is a “solder everything onto the board” affair instead of a “here are the tradeoffs with different components” and encouraging you to experiment around with a breadboard. Understandable (especially considering there is less “room for experimentation” when dealing with power), but probably not the most compelling introduction to the series.</p>
<p>However, I do think we can learn about (modular) synths from building this project!</p>
<h2 id="eurorack-format">Eurorack Format</h2>
<p>As I metioned in the <a href="2023-02-23-building-a-synthesizer-glossary.html">glossary</a>, there isn’t really a “<a href="https://en.wikipedia.org/wiki/Eurorack">Eurorack</a> standard.” It’s more like, “look at what Doepfer did on the <a href="https://doepfer.de/a100e.htm">A-100</a> and do something similar.” If we want to build a “Eurorack compatible” enclosure and power supply, there are a few things to consider.</p>
<p>The <strong>physical form factor,</strong> or the size of the modules. Eurorack modules are (mostly!) 3U (three rack units, or 128.5 mm) high, and their widths are “quantized” by “HP,” or Horizontal Pitch units. This means they are usually some multiple of 5.08 mm wide. The mks x es.EDU modules range from 4 to 10 HP. See the <a href="https://doepfer.de/a100_man/a100m_e.htm">Construction Details</a> document on Doepfer’s site for the closest thing there is to a standard.</p>
<p>The <strong>power requirements.</strong> The Eurorack power bus has a 16 pin connector for each module. However, it’s very, very common for modules to not use the first 6 pins and only have a 10-pin connector on the “module” end of the power cable.</p>
<p><a href="/images/synth/EurorackPowerPinout.png"><img src="/images/synth/EurorackPowerPinout.png" width="151px" loading="lazy" alt="a list of pins in the Eurorack power connectors and which voltages each one carries" style="float: left;"></a> <a href="/images/synth/EurorackPowerConnector.png"><img src="/images/synth/EurorackPowerConnector.png" width="112px" loading="lazy" alt="A Eurorack power connector socket" style="float: right;"></a> At the left is a pinout from the mks x es.EDU schematic. To the right is a picture of one of the 14 sockets in the mks x es.EDU power supply, which you can connect to a single module.</p>
<p>The first thing you’ll notice is there’s a lot of redundancy there. The connectors are 16 pins, organized into two columns of eight pins each. Each two-pin “row” carries exactly the same signal; they are connected together. Furthermore, there are three rows (six pins total) of ground pins, which, again, are connected together.</p>
<p>Most modules do not use, and don’t even include wires for, the Gate and CV on the bus, requiring you to connect the Gate/CV through the front panel of the module. Similarly, +5V power is simply not needed by most modules.</p>
<p>So when on <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-1x84hp-case/">the order page for the case</a> it says:</p>
<blockquote>
<p><strong>NB! The enclosure &amp; PSU are designed specifically to accommodate DIY modules from mki x es.edu series and are not compatible with other eurorack modules.</strong></p>
</blockquote>
<p>I think it means two things:</p>
<ol style="list-style-type: decimal">
<li>The case is pre-drilled to accomodate modules of certain widths in a specific order. Nothing you couldn’t fix with a drill and a tap, but worth noting.</li>
<li>The kit doesn’t include components for the +5V power, although it does have space/holes for them on the PCB and most modules don’t need +5V anyway.</li>
</ol>
<p>Other than those two <em>caveats</em> I think this case would work fine for most 3U Eurorack modules.</p>
<p>The <a href="https://doepfer.de/a100_man/a100t_e.htm">Technical Details</a> document on Doepfer’s site is informative if you’d like to know more about the system which other “Eurorack” manufacturers are using as an example.</p>
<div style="clear: both;">

</div>
<h2 id="building-the-power-supply"><a name="building"></a>Building the Power Supply</h2>
<p>I’ll be perfectly frank that this kit is not the one which is going to teach you much about electronics.</p>
<p>It would be closer to the truth to say that this one will help teach you patience! There are, for example, 14*16=224 solder joints to connect the power cable adaptors alone. After soldering these, I tested them with both a digital multimeter in continuity mode and by putting cables repeatedly into and out of the adaptors. I did not solder every single joint perfectly on the first try (surprise!), so I fixed those which didn’t work.</p>
<p>Throughout assembling this kit, I had problems with soldering connections to ground; the ground inside the PC board is apparently a large chunk of copper and it was challenging to get it hot enough to melt solder even when the component you were soldering to it was plenty hot and at risk of cooking. It took a lot of patience and mostly a lot of testing to make sure that everything worked.</p>
<p>The instructions said to increase your soldering iron temperature to 400℃ to solder wires to the power plug. I left it there when soldering the switch and melted something inside the switch. I bought a new switch and some spade connectors, and soldered the switch wires to the spade connectors instead and then pushed the spade connectors onto the (new) switch, which worked quite well.</p>
<p>One minor challenge is that the +/- leads of the LEDs were not, as far as I could make out, indicated on the PCB; I had to refer to the schematic to figure out which way to put the LEDs into the board.</p>
<h2 id="building-the-5v-power-supply">Building the +5V Power Supply</h2>
<figure class="inlineRight">
<a href="/images/synth/5VPowerSupply.jpg"> <img src="/images/synth/5VPowerSupply.jpg" width="400px" alt="You can see that the voltage regulator is pushed aside by the module power connector and there is no room for the capacitor."> </a>
<figcaption>
What’s wrong with this power supply?
</figcaption>
</figure>
<p>The PCB comes drilled for parts for a +5V power supply (to pins 11 and 12 of the power sockets), but does not include parts for this. Wanting “the full experience” I sourced the parts from a local supplier (details below) and built this as well. Despite some vagueries about precisely which parts to buy, everything worked, except for the LED. I eventually figured out that the problem was getting the ground connection on the PCB hot enough to really melt solder; I had been hesitant to hold the soldering iron to the LED for the 30+ seconds it took to heat up the connection inside the board. But in the end it worked fine and now the LED lights up indicating +5V power is on.</p>
<p>However, there is another problem with the +5V power supply, and it’s not me this time. Some of the holes for the +5V components fall under the power sockets for modules! I ended up soldering a capacitor to the bottom of the board, and the power regulator is not quite squarely mounted. (See photo at right; there are two capacitors visible on top of the board and a third which is immediately above them mounted under the board; you can see one of the two pins just peeking out from under the black module power connection, immediately above the power regulator pins. Note also that the power regulator is being somewhat pushed off of its heatsink pad by the module power connector above it.) It works fine, but I feel like I’m probably the first person to ever assemble this.</p>
<h2 id="additional-supplies-needed">Additional Supplies Needed</h2>
<p>If you want to add +5V power to your power supply, you will need to buy:</p>
<ul>
<li>2 0.1 µF capacitors, non-polarized (voltage and type unspecified; I used 50V mylar capacitors)</li>
<li>1 10 µF polarized capacitor, 16 V (I used a 50V capacitor because that’s all my supplier had)</li>
<li>1 1k Ohm resistor (wattage unspecified, I used a 1/2 W, which ended up being slightly too long for the pre-drilled holes in the PCB, so I’m guessing it was designed for a 1/4 W resistor?)</li>
<li>1 5V LED (I used a green 4V LED as that’s what my supplier had)</li>
<li>1 78M05 5V voltage regulator, or equivalent (the current is unspecified; my supplier had a 1A in stock, so that’s what I used)</li>
</ul>
<p>All together this cost me about $10.</p>
<p>As you will see, there is <em>considerable</em> vagueness in the bill of materials above! I listed what I used, and these values seem to work, although I haven’t tried putting any real load on the circuit. One suggestion I would make for this kit is to fill in the missing values here!</p>
<p>In the next installment of this series I’ll <a href="2023-03-02-building-a-synthesizer-3.html">breadboard the VCO</a>.</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/instrukcija_2.pdf">mki x es.EDU Eurorack Case User Manual</a></li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=pQKN30Mzi2g">DIY SYNTH PSU: How to design a simple dual power supply</a> by Moritz Klein (26:03). Note that this is for a different design than the one included in the kit! It’s sort of useful, although you can skip this video if you want to.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Wed, 22 Feb 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-02-22-building-a-synthesizer-2.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 1: The mki x es.EDU DIY System</title>
    <link>https://www.craigstuntz.com/posts/2023-02-21-building-a-synthesizer-1.html</link>
    <description><![CDATA[<div class="info">
    Posted on February 21, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li>1: The mki x es.EDU DIY System</li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>This post will be a brief oveview of the mki x es.EDU DIY System. I’ll get to actual construction in <a href="2023-02-22-building-a-synthesizer-2.html">the next post</a>.</p>
<p>Including the power supply, there are 11 modules in the full system, but two of them are the same.</p>
<p>I personally think that the single greatest thing you get with the kits is something which doesn’t ship in the box: The instructions. They are generally excellent, and most of them were written by Mortiz Klein, who did most of the circuit design. If you’re seriously considering building these (or any other synth kits), I’d suggest sitting down with one of the manuals – <a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">here is the VCO manual</a>, for example – as they will not only teach you about electronics and synthesizers but also about how to teach such concepts.</p>
<p>The full system includes:</p>
<ul>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-1x84hp-case/">combination enclosure and power supply</a>.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vco/">VCO</a> (Voltage Controlled Oscillator) which produces either a sawtooth wave or a <a href="https://www.yamahasynth.com/learn/synth-programming/synth-basics-all-squares-pulse" title="Synth Basics: All Squares are Pulse">pulse</a> (a generalized square wave with variable width). This is one of two oscillators in the full system. An oscillator is a “thing which produces sound” which can be filtered and combined by other modules.</li>
<li>Two <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-eg/">envelope generators</a> which produce, well, envelopes. Think of an envelope as (for example) the volume over time of a particular note. If you were making an organ sound, you would want the volume of a note to immediately drop to nothing when you took your finger off of a key. If you were making a xylophone sound, on the other hand, you would want the sound to slowly fade out. The envelope generator produces a voltage which corresponds to this desired change in volume. However, actually affecting the sound produced by an oscillator with this envelope will require another module, the VCA. The full system includes two identical EGs modules. Envelopes are also useful for controlling things besides volume, such as filters.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vca/">dual VCA</a> (Voltage Controlled Amplifier). The primary use case for this module is taking as inputs the sound produced by the oscillator and the envelope produced by an envelope generator and producing as an output a sound which follows the envelope in volume and has a tone produced by the oscillator. There are other ways to use it, but this is the most common thing to do.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-sequencer/">five-note sequencer</a> which produces a 3, 4, or 5 note sequence, such as an arpeggio. What if your compositions require more than 5 notes? Well, you might need a different sequencer! This is just to learn how they work. But, as it’s a modular system, you can also do things like clock the sequencer at an audio rate and use it as a waveshaper.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vcf/">VCF</a> (Voltage Controlled Filter). This changes the sound of the oscillator like an equalizer does. This VCF is just a low-pass (removes higher frequencies). It also has resonance, which is a signal boost at the cutoff frequency, which gives the user of the filter more options for the sound they produce.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-noisesh/">noise and sample and hold</a> module. Noise is simple enough to explain; it’s just a different sort of oscillator which produces <a href="https://en.wikipedia.org/wiki/White_noise">white noise</a> or <a href="https://en.wikipedia.org/wiki/Pink_noise">pink noise</a> instead of a “cleaner” waveform such as a pulse. Sample and hold is much trickier to explain! In fact, I think I will defer discussion of how sample and hold works until I look at this module in depth in a future post, so that I don’t totally derail this post.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-wavefolder/">wavefolder</a> is a module that takes, for example, a triangle wave and quite literally folds the wave over on itself, turning the peak of the triangle upside down and resulting in a jagged edge. In contrast to the rest of the modules, this is a feature which isn’t found on many synthesizers, although some modern synths will allow you to begin with an already-folded oscillator by playing back a sample.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-mixer/">mixer</a> combines up to three input signals as a single output, and also has a distoration feature which can make (possibly) pleasing changes to your signal by clipping it. You don’t have to distort your sounds if you don’t want to, though.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-output/">output</a> module is a different kind of mixer than the mixer above. It will take either one or two inputs and produce a stereo ouput by panning them right or left. It has a headphone amplifier and a line level output.</li>
</ul>
<p>Although the instructions are <em>very</em> good, as I work through each kit I am finding that I often want additional information, such as more explanation of what certain components do or additional schematic diagrams. I will share that information in the post for each kit I build.</p>
<p>That’s the whole system! I will discuss each module in more detail when I write about building them in future posts. The <a title="Building the Power Supply" href="2023-02-22-building-a-synthesizer-2.html">next post</a> in this series discusses building the power supply.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23). Although billed as an intro to the VCO kit, the latter half of the video is a demo of the full system, if you’d like to hear it bleep and bloop.</li>
<li><a href="https://www.youtube.com/watch?v=vHNQQ6yUGyo">Designing a simple 5-step sequencer from scratch</a> by Moritz Klein (32:07) A nice example of the step-by-step, breadboard-based approach to understanding how the circuit works which is used throughout the entire Erica Synths EDU series.</li>
</ul>
<p><img src="/images/synth/DIY_System_web_5.jpg" width="80%" loading="lazy" alt="The mki x es.EDU DIY System -- the entire, complete system in its enclosure"></p>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Tue, 21 Feb 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-02-21-building-a-synthesizer-1.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>

    </channel>
</rss>
