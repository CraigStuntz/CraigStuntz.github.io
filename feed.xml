<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Craig Stuntz's blog</title>
        <link>http://www.craigstuntz.com</link>
        <description><![CDATA[Craig Stuntz's blog]]></description>
        <atom:link href="http://www.craigstuntz.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 29 Jan 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>Gray Failure</title>
    <link>http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html</link>
    <description><![CDATA[<div class="info">
    Posted on January 29, 2020
    
</div>

<p><a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">Gray Failure: The Achilles’ Heel of Cloud-Scale Systems</a> is a delightful paper because it’s easy to read, the findings are directly useful in my day job, and because it reframes an important issue in a way which is not intuitive at first but simplifies it and leads to solutions. </p>
<p>All software fails from time to time, but evidence indicates that cloud scale services fail differently than other software which might be less distributed. The authors characterize this failure mode as “gray failure,” in which “component failures whose manifestations are fairly subtle, and thus defy quick and definitive detection.” This is in contrast to hard failure when a service simply stops working altogether. Examples include “severe performance degradation, random packet loss, flaky I/O, memory thrashing, capacity pressure, and non-fatal exceptions.”</p>
<p>So why is this distinction useful? Failure is failure, right? The authors maintain that, in contrast to hard failures, gray failure tends to increase very rapidly with scale. For example, consider network switches: “increasing redundancy can counter-intuitively hurtavailability because the more core switches there are, the more likelyat least one of them will experience a gray failure.” </p>
<p>This tells us several things. First, a gray failure might be a leading indicator of (in other words, it precedes) a hard failure. Second, the usual response to hard failure, restarting the service or host, may not help at all (as with the case of running out of disk space) and will probably make things much worse by introducing latency into the system. Third, horizontal scaling may make the problem considerably worse, as an increasing number of service hosts increases correspondingly the chances of a gray failure in any of them. </p>
<p>How to detect gray failures is one of the most important contributions of the paper. Gray failures are characterized by “differential observability.” This means that the consumer of a service, say, an application, will observe a different result than another entity which is looking at the service, such as a health check. So the health check might just be checking to see if the service is up, but might not notice that it’s running very slowly due to having consumed most of the hard drive space. The paper notes, “many gray failure cases we investigated are only detectable in a distributed fashion because each individual component has only a partial view of the entire system.” The authors advise detecting gray failure by “closing the observation gaps between the system and the apps it services.” In particular, they recommend “moving from singular failure detection (e.g., with heartbeats) to multidimensional health monitoring.” </p>
<p>If any of the above is interesting to you, I’d recommend reading <a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">the whole paper</a>. It’s short (only five pages), and it’s packed with useful information.</p>

<div class="info">
    
    Tags: <a href="/tags/failure.html">failure</a>, <a href="/tags/cloud.html">cloud</a>, <a href="/tags/papers.html">papers</a>
    
</div>
]]></description>
    <pubDate>Wed, 29 Jan 2020 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Security Talks at Stir Trek and Central Ohio ISSA</title>
    <link>http://www.craigstuntz.com/posts/2018-04-29-shifting-application-security-left.html</link>
    <description><![CDATA[<div class="info">
    Posted on April 29, 2018
    
</div>

<p>I’ll present “<a href="https://stirtrek.com/sessions/session/87">Secure Applications, by Design</a>” on Friday 4 May at <a href="https://stirtrek.com/">Stir Trek</a>, and “Shifting Application Security Left on Monday 14 May at the <a href="https://www.infosecsummit.com/ehome/2018cbusinfosec/agenda/">2018 Central Ohio Infosec Summit</a>.</p>
<p>Both of these talks are about bridging the gap between development and security teams. In fact, they’re almost the same presentation, except that “Secure Applications, by Design” is aimed at developers, and “Shifting Application Security Left” is written for infosec professionals. But the outline of each talk is very similar. The biggest difference between the two is what I <em>don’t</em> say. There are a lot of “security basics” in the former which I skip in the latter.</p>
<p>If you’re interested in the overall idea of how developers and security professionals can work together to create better applications, but haven’t seen that work well in real world projects, I’d be very pleased if you’d attend one of these and share your feedback with me.</p>

<div class="info">
    
    Tags: <a href="/tags/Stir%20Trek.html">Stir Trek</a>, <a href="/tags/Central%20Ohio%20ISSA.html">Central Ohio ISSA</a>, <a href="/tags/presentations.html">presentations</a>, <a href="/tags/security.html">security</a>
    
</div>
]]></description>
    <pubDate>Sun, 29 Apr 2018 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2018-04-29-shifting-application-security-left.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Speaking at CodeMash</title>
    <link>http://www.craigstuntz.com/posts/2017-01-09-codemash.html</link>
    <description><![CDATA[<div class="info">
    Posted on January  9, 2017
    
</div>

<p>I’ll be speaking at <a href="http://www.codemash.org/">CodeMash</a>, twice, on Friday the 13th. Wish me luck!</p>
<h3 id="mashing-up-qa-and-security">Mashing Up QA and Security</h3>
<p>8:30 a.m., Zambezi Room</p>
<p>Security is domain specific quality assurance, but developers, testers, and security professionals often don’t work together. When this type of disconnect exists between big groups of people who are very good at their jobs, there is usually a mostly untapped potential for learning. I’ve been exploring this landscape by writing an open source fuzzer aimed at discovering new test cases (not just crashes!) using binary rewriting of managed executables and genetic modification of a test corpus, implemented in F# and using Mono.Cecil. I’ll ontrast the fundamentals of each discipline, demonstrate tools used by experts on both sides of the security and QA fence, and challenge the audience to find new ways to mix them up. Expect to see lots of code and leave with ideas for making entire communities better, not just your own team!</p>
<h3 id="incredibly-strange-programming-languages">Incredibly Strange Programming Languages</h3>
<p>12:15 p.m., Cypress Room</p>
<p>If you’ve ever suspected that “all programming languages are pretty much the same; they just have different syntax,” well, you will never suspect that again! Covering languages from the unusually powerful (Idris) to the illuminated (قلب) to the profoundly limited (BlooP), and all points in between, these languages will help you think differently about approaches to software problems you face in your day job. Of course we’ll have a lot of fun, but these languages are no joke. The practical benefit of an impractical language is the power to find new approaches to common problems.</p>

<div class="info">
    
    Tags: <a href="/tags/CodeMash.html">CodeMash</a>, <a href="/tags/presentations.html">presentations</a>, <a href="/tags/F%23.html">F#</a>, <a href="/tags/QA.html">QA</a>, <a href="/tags/security.html">security</a>, <a href="/tags/PLT.html">PLT</a>
    
</div>
]]></description>
    <pubDate>Mon, 09 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2017-01-09-codemash.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Identity Theft on Upwork</title>
    <link>http://www.craigstuntz.com/posts/2016-07-08-upwork-identity-theft.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  8, 2016
    
</div>

<ul>
<li>21 June 2016: A stranger reaches out to me on Twitter and Facebook and asks, “Did we just chat on Upwork?” I reply, “Nope, it wasn’t me,” and she responds, “there is someone impersonating you.”</li>
</ul>
<p>Crap.</p>
<p><a href="/images/Screen%20Shot%202016-07-05%20at%2011.06.31%20PM.png"><img src="/images/Screen Shot 2016-07-05 at 11.06.31 PM small.png" alt="Fake profile on upwork.com" /></a></p>
<p>Yes, that’s my name and my picture, and most of the text is plagiarized from <a href="https://stackoverflow.com/jobs/cv/employer/12943">my résumé</a>, but I don’t even have an Upwork account. According to the site, the scammers have done two paid assignments while posing as me.</p>
<p>The scammers were trying to solicit work from her, using my identity and experience.</p>
<ul>
<li>21 June 2016: Both I and the woman who contacted me report the fake profile to Upwork.</li>
<li>22 June 2016: Upwork support responds:</li>
</ul>
<blockquote>
<p>Hello Craig,</p>
<p>Please be informed that we are alreadyinvestigating your report. Rest assured that we will take appropriateaction according to our policies and processes.</p>
<p>We do appreciate your effort in keeping theintegrity, safety and quality of the Upwork Marketplace and we wish you successin your endeavors.</p>
<p>We will now close this Support ticket. Pleaselet us know if we can be of any additional help.</p>
</blockquote>
<p>But they don’t close the account. They do, however, send me a “satisfaction survey” for the support ticket.</p>
<p>I do a bit of looking around, and it unsurprisingly turns out this happens a lot.</p>
<p><a href="http://www.vandelaydesign.com/designers-beware-upwork-scam/">Designers Beware of the Latest Upwork Scam</a></p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
<a href="https://twitter.com/JuliaEMcCoy"><span class="citation">@JuliaEMcCoy</span></a> fyi - there are 5+ accnts spamming <a href="https://twitter.com/Upwork"><span class="citation">@Upwork</span></a> using this pic for skype &amp; sending malware 2 applicants <a href="https://t.co/QXnQ67A4eu">pic.twitter.com/QXnQ67A4eu</a>
</p>
— Rebecca Gatesman (<span class="citation">@BeccaGatesman</span>) <a href="https://twitter.com/BeccaGatesman/status/738876245035896836">June 3, 2016</a>
</blockquote>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
.<a href="https://twitter.com/Upwork"><span class="citation">@Upwork</span></a> Someone else is freelancing as me on your site 🤔 — I never signed up &amp; I don't freelance. Pls fix <a href="https://t.co/xuWZ4e6hHi">https://t.co/xuWZ4e6hHi</a>
</p>
— Ben Cline (<span class="citation">@yocline</span>) <a href="https://twitter.com/yocline/status/734870368586850304">May 23, 2016</a>
</blockquote>
<p>After I responded in the last thread, their social media folks reach out and offer to expedite the case. The fake profile is hidden from anonymous users, but if you create an account and log in to upwork.com, it’s still there. This is not progress.</p>
<ul>
<li>23 June 2016: I email support again and note they’ve hidden the profile from anonymous users only.</li>
<li>23 June 2016: Support responds:</li>
</ul>
<blockquote>
<p>Thanks for your response. Kindly be assured that the the reported freelancer is already under review and necessary action would be taken on the user for fake account creation once proved.</p>
<p>Thanks for your cooperation &amp; support.</p>
</blockquote>
<ul>
<li>23 June 2016: I contact their social media folks again.</li>
<li>23 June 2016: They respond:</li>
</ul>
<blockquote>
<p>Hi Craig, sorry for any confusion this has caused. Our Team is still currently investigating this. Once their investigation is complete, they will update you via your ticket. We appreciate your continued patience and hope to get this resolved soon!</p>
</blockquote>
<ul>
<li>5 July 2016: It’s now been two weeks since I first reported the scammers. I email support again.</li>
<li>6 July 2016: Support responds:</li>
</ul>
<blockquote>
<p>Thank you for patiently awaiting our response and please accept our apologies for the late response as we have received high volume of requests recently and we are trying our best to address all concerns as promptly as possible.</p>
<p>Please be assured that appropriate action has already been taken on the reported fake profile as defined in our Terms of Service. Again, our sincerest apologies for your inconvenience.</p>
<p>Please feel free to contact us if you need further assistance.</p>
</blockquote>
<p>I’n not sure what “appropriate action” is supposed to mean, but the fake profile is still live on their site. Upwork is making money using an identity they know to be stolen.</p>
<ul>
<li>5 July 2016: I lose patience with their support team altogether and <a href="http://sarafhawkins.com/how-to-file-dmca-takedown/">send a DMCA takedown</a> to their <a href="http://www.copyright.gov/onlinesp/agents/u/upwork_global_inc.pdf">legally registered contact</a>. I can do this because the scammers copied text that I wrote.</li>
<li>5 July 2016: A member of their legal team acknowledges receipt of the request in less than half an hour.</li>
<li>7 July 2016: Approximately 40 hours later, she writes back:</li>
</ul>
<blockquote>
<p>I am following-up to inform you that we have removed the profile in question. Thanks for your patience.</p>
</blockquote>
<p>I verify that this is true and thank her.</p>
<h2 id="dmca">DMCA?</h2>
<p>The DMCA is really not the right tool to protect your identity. I probably couldn’t have used it if the scammers hadn’t stolen my writing as well as my identity. But it does have a strong requirement that the online service provider must “expeditiously” remove the copyrighted material. They are not allowed to just send assurances that they’re “investigating” it for weeks on end while profiting off of the scam.</p>
<p>And, yes, <a href="http://www.pcworld.co.nz/article/483729/google_submission_hammers_section_92a/">DMCA takedowns are frequently abused</a>.</p>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="info">
    
    Tags: <a href="/tags/identity%20theft.html">identity theft</a>, <a href="/tags/DMCA.html">DMCA</a>, <a href="/tags/Upwork.html">Upwork</a>
    
</div>
]]></description>
    <pubDate>Fri, 08 Jul 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-07-08-upwork-identity-theft.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>"Static vs. Dynamic" Is the Wrong Question for Working Programmers</title>
    <link>http://www.craigstuntz.com/posts/2016-06-18-static-vs-dynamic-wrong-question.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 18, 2016
    
</div>

<p>It’s common to ask, <em>“Is there evidence that programmers write safer code or are more productive when using a static or a dynamic language?”</em> It’s also common to write really terrible blog post answers to this question. I’m not going to link to examples, but let’s just say that general comparisons of “mainstream dynamic language A” with “mainstream static language B” don’t give a lot of insight into the broader question.</p>
<p>Programmers who say they prefer static or dynamic languages are <a href="https://www.ics.uci.edu/~lopes/teaching/inf212W12/readings/rdl04meijer.pdf">often interested in specific language features</a> rather than static or dynamic type systems, <em>per se.</em></p>
<p>Yet <a href="http://rundis.github.io/blog/2016/type_confused.html">reasonable people do want to know the answer</a>. Can we shed more light on the topic?</p>
<h2 id="science-cannot-give-us-a-definitive-answer-yet">Science Cannot Give Us a Definitive answer – Yet!</h2>
<p>Well-designed, peer reviewed research on human interaction with programming languages is <a href="https://jyx.jyu.fi/dspace/handle/123456789/47698">uncommon</a>. Static typing is <a href="https://www.quorumlanguage.com/evidence/evidence.pdf">better studied than most other PL features</a> but <a href="http://danluu.com/empirical-pl/">tends to examine very specific claims with fairly small effects</a>. Good studies which do exist at all, narrow as their findings might be, are <a href="2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html">generally not reproduced by anyone</a>. There is <a href="http://www.cs.cmu.edu/~NatProg/programminglanguageusability/">an effort to fix this</a>, but for now any argument claiming a “scientific” answer to this question is suspect.</p>
<h2 id="there-arent-two-distinct-buckets-of-languages-named-static-and-dynamic">There Aren’t Two Distinct Buckets of Languages Named Static and Dynamic</h2>
<p>To be honest, I don’t think this question is answerable. In part this is because, increasingly, I think <strong>the notion of a strict distinction between static and dynamic languages is less than helpful</strong>. It’s somewhat more useful to talk about what sort of features the language’s type system has.</p>
<blockquote>
<p>In general, we should strive for strong typing, and adopt static typing whenever possible. –<a href="http://web.cse.ohio-state.edu/~soundarajan.1/courses/788/cardelli85understanding.pdf">Luca Cardelli and Peter Wegner</a></p>
</blockquote>
<p>From the point of view of the working programmer, calling a language “statically typed” confuses a number of different and important ways that both languages and tooling can vary.</p>
<p>Why? Ask yourself these questions:</p>
<h3 id="what-is-a-statically-typed-language">What Is a Statically Typed Language?</h3>
<p>Is Elm a statically typed language? Is Java a statically typed language?</p>
<ul>
<li><a href="http://elm-lang.org/blog/compilers-as-assistants">Elm’s type system acts as a coach</a> to help the programmer complete her work, but doesn’t really affect performance.</li>
<li>Java’s type system is a <a href="http://openjdk.java.net/jeps/286">verbose</a> impediment to code readers and writers, but <a href="http://cr.openjdk.java.net/~jrose/values/values-0.html">improves performance</a> by, for example, supporting many different primitive numeric types.</li>
</ul>
<p>Elm’s type system is substantially more powerful than Java’s, and eliminates entire classes of bugs which plague Java applications such as dereferencing null pointers and inexhaustive <code>switch</code> blocks.</p>
<p>If both languages are called “statically typed” and yet the two languages’ type systems do such different things, then how much value is there in lumping them into the same specific bucket?</p>
<p>Indeed, even the <a href="https://www.cl.cam.ac.uk/~srk31/research/papers/kell14in-author-version.pdf">word “type” itself is used in multiple, not entirely compatible senses</a> in computer science.</p>
<p>Tomas Petricek <a href="http://tomasp.net/blog/2015/against-types/">argues</a>:</p>
<blockquote>
<p>Rather than seeking the elusive definition of what is a type (which does not exist), I believe that we should look for innovative ways to think about and work with types that do not require an exact formal definition.</p>
</blockquote>
<h3 id="what-is-a-dynamic-language">What Is a Dynamic Language?</h3>
<p>Is Erlang a statically typed language? Many would say no, but what if I run <a href="http://erlang.org/doc/man/dialyzer.html">Dialyzer</a> first? Sure, I’m not getting the runtime performance benefits static typing can bring, but if types are inferred statically at build time and can fail the build, then I’m getting at least some help from static typing. So in this case the distinction between statically and dynamically typed has more to do with the tooling I might be using than the language itself. That’s interesting!</p>
<p>You can even <a href="https://github.com/frenchy64/ambrosebs.com/blob/gh-pages/talks/dynamic%20inference%20boston%20pi%202016.pdf">infer static types from unit tests instead of code itself</a>!</p>
<h3 id="whatever-static-and-dynamic-are-production-languages-often-have-both">Whatever “Static” and “Dynamic” Are, Production Languages Often Have Both</h3>
<p>C# has <code>dynamic</code>. Racket has <a href="https://docs.racket-lang.org/ts-guide/">Typed Racket</a>. Java has reflection. Clojure has <code>core.typed</code>.</p>
<p>Statically typed languages typically check certain types of errors at compile time and other types of errors at runtime.<sup>1</sup> Which types of errors are checked when varies by programming language. For example, Idris can statically prove that a program does not divide by zero, whereas C# cannot.</p>
<p>Manuel Chakravarty wrote a much more detailed (and technically rigorous) <a href="http://justtesting.org/post/148297302871/static-versus-dynamic">examination of this idea</a>.</p>
<h3 id="well-ok-but-surely-there-must-be-a-formal-distinction-right">Well, OK, But Surely There Must Be a <em>Formal</em> Distinction, Right?</h3>
<p>Less so than you might think.</p>
<blockquote>
<p>Terms like “dynamically typed” are arguably misnomers and should probably be replaced by “dynamically checked,” but the usage is standard.<br/> – Benjamin C. Pierce, <em>Types and Programming Languages</em><sup>2</sup></p>
</blockquote>
<blockquote>
<p>Thus we see that the canonical untyped language, <strong>Λ</strong> [the untyped lambda calculus], which by dint of terminology stands in opposition to typed languages, turns out to be but a typed language after all. Rather than eliminating types, an untyped language consolidates an infinite collection of types into a single recursive type. Doing so renders static type checking trivial, at the cost of incurring dynamic overhead to coerce values to and from the recursive type.<br/> - Robert Harper, <em>Practical Foundations for Programming Languages</em><sup>3</sup></p>
</blockquote>
<p>One can consider a “dynamic language” as a language which has fewer statically checked types (namely, one) than a “static language.”</p>
<h2 id="what-does-static-typing-really-do">What Does Static Typing Really Do?</h2>
<p>Given some programming language, you can imagine “static typing” as a feature (or, more properly, a family of features) the language designer could add to an otherwise untyped or dynamic language which <strong>might</strong> deliver one or more of the following benefits:</p>
<ul>
<li>Proof that certain kinds of dynamic errors are impossible<sup>4</sup></li>
<li>Automatic and machine verified documentation</li>
<li>Improved runtime performance</li>
<li>Better tooling support</li>
</ul>
<p>It <strong>might</strong> also have one or more of the following drawbacks</p>
<ul>
<li>Increased verbosity or <a href="http://tratt.net/laurie/blog/entries/another_non_argument_in_type_systems.html">reduced expressiveness</a></li>
<li>Rejection of otherwise correct programs<sup>5</sup></li>
<li>Slower programmer iteration (possibly lengthy compile/run cycles)</li>
<li>A need for the developer to learn “static typing” language feature (through she still must understand types to some degree regardless)</li>
</ul>
<p>However, every single one of these benefits and drawbacks could also come from adding a different feature (distinct from “static typing”) to the language.</p>
<p>For example, “proof that certain kinds of dynamic errors are impossible” could come via model checking or <a href="https://www.microsoft.com/en-us/research/project/vcc-a-verifier-for-concurrent-c/">formal verification</a>. “Increased verbosity” is hardly limited to “static languages”; most “dynamic languages” are more verbose than SML or Haskell.</p>
<p>Instead of asking, “Should the whole world use a ‘statically typed’ language?” we could ask “In which cases would it make sense to write formal proofs of (at least some parts of) our programs?”</p>
<h2 id="if-static-vs.dynamic-is-the-wrong-question-then-what-is-the-right-question">If “Static vs. Dynamic” Is the Wrong Question, Then What Is the Right Question?</h2>
<p>If you’re a working programmer, then the right question is:</p>
<blockquote>
<p><strong>How can my languages and tooling help me be a better programmer?</strong></p>
</blockquote>
<p>Follow-up questions might be:</p>
<ul>
<li>If I care about verification of correctness properties above and beyond what I can do with simple tests, what are my choices, in terms of language features and tooling?</li>
<li>What are the properties which are difficult or impossible to verify?</li>
<li>Do the features and tooling of the language steer you towards great solutions to problems, provide you little guidance, or get in your way? Does the answer vary depending on which kind of problem?</li>
<li>What compromises does the language I’m using now make?</li>
<li>Can I use tools to fill in some of the shortcomings?</li>
<li>How do other languages and systems address my pain points?</li>
<li>Given some correct program I want to be the output of my process, how do I arrive at that program? Do I start by writing a specification (possibly in the form of types), or by writing tests, or by writing code, or a mix of these?</li>
</ul>
<p>These are difficult questions, because you can’t really answer them without experience with diverse languages, programming communities, and ecosystems. Zealots need not apply, but be kind to excited newbies!</p>
<p>Importantly, programming is still in its infancy. We are still discovering new methods of designing code. We must keep an open mind, because programmers 50 years from now will laugh at whatever we choose. Today, you can design your code using top-down, bottom-up, test-first, <a href="https://www.manning.com/books/type-driven-development-with-idris">type-driven</a>, or a multitude of other techniques. The design methodologies of the next decade probably haven’t been invented yet.</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
<a href="https://twitter.com/raichoo"><span class="citation">@raichoo</span></a> <a href="https://twitter.com/kamatsu8"><span class="citation">@kamatsu8</span></a> let's have some imagination about where languages and tools might go if we let go of how current tools trade things off
</p>
— Edwin Brady (<span class="citation">@edwinbrady</span>) <a href="https://twitter.com/edwinbrady/status/743865720912609280">June 17, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<h5 id="notes">Notes</h5>
<p><sup>1</sup> Harper, Robert, <a href="http://www.cs.cmu.edu/~rwh/pfpl.html"><em>Practical Foundations for Programming Languages</em></a>, 2nd Edition, §6.3</p>
<p><sup>2</sup> Pierce, Benjamin C. <a href="https://www.cis.upenn.edu/~bcpierce/tapl/"><em>Types and Programming Languages</em></a>, p. 2</p>
<p><sup>3</sup> Harper, §21.4</p>
<p><sup>4</sup> Harper, §6</p>
<p><sup>5</sup> Rémy, Didier, <a href="http://gallium.inria.fr/~remy/mpri/cours1.pdf"><em>Type systems for programming languages</em></a>, p. 29</p>

<div class="info">
    
    Tags: <a href="/tags/programming%20languages.html">programming languages</a>
    
</div>
]]></description>
    <pubDate>Sat, 18 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-18-static-vs-dynamic-wrong-question.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Andreas Stefik on Programming Language Human Factors Research</title>
    <link>http://www.craigstuntz.com/posts/2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 17, 2016
    
</div>

<p><a href="https://www.functionalgeekery.com/episode-55-andreas-stefik/">This interview</a> with <a href="http://web.cs.unlv.edu/stefika/">Andreas Stefik</a> on empirical studies of human productivity with PL features is fascinating. In short: There aren’t many.</p>
<p>Very few randomized, controlled experiments in the field have ever been performed. <a href="https://jyx.jyu.fi/dspace/handle/123456789/47698">This 2015 thesis</a> found only 22!</p>
<p>Much if not most PL human factors research is <a href="http://www.dictionary.com/browse/anecdata">anecdata</a>. Even the few randomized, controlled experiments which have been performed have never been reproduced.</p>
<p>CS folks who have ever looked down their noses at social sciences for soft research standards should be mortified.</p>
<p>Never take blog posts or tweets claiming: “&lt;study&gt; found &lt;author’s pet PL feature&gt; boosts productivity by &lt;x&gt;” at face value. Conclusive, reproduced results on such a thing would be unprecedented in CS research.</p>

<div class="info">
    
    Tags: <a href="/tags/Andreas%20Stefik.html">Andreas Stefik</a>, <a href="/tags/programming%20languages.html">programming languages</a>
    
</div>
]]></description>
    <pubDate>Fri, 17 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-17-Andreas-Stefik-on-PL-Human-Factors.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Hosting a Hakyll Blog On GitHub With a Custom Domain</title>
    <link>http://www.craigstuntz.com/posts/2016-06-14-hakyll.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 14, 2016
    
</div>

<ol style="list-style-type: decimal">
<li>Create a <a href="https://pages.github.com/">GitHub user page</a>. Follow the directions there to create a “Hello world” site. Don’t proceed until that works.</li>
<li>Register a domain.</li>
<li><a href="https://help.github.com/articles/setting-up-your-pages-site-repository/">Point your domain at your GitHub user pages site</a>. It may take 3+ hours before your domain propagates. Don’t continue until this works.</li>
<li>Install <a href="http://www.haskellstack.org">stack</a></li>
<li>Install hakyll via <a href="https://jaspervdj.be/hakyll/tutorials/01-installation.html"><code>stack install hakyll</code></a></li>
<li>Follow <a href="https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html">this tutorial</a>. <em>However!</em> You already have a <code>master</code> branch. That’s OK. But you do want to have a <code>CNAME</code> file (see step 3 in this list) in your <code>develop</code> branch. Ensure your site looks good before proceeding.</li>
<li>You might want to look at some <a href="http://katychuang.com/hakyll-cssgarden/gallery/">sample themes</a>.</li>
<li>If you want code syntax highlighting, you need some <a href="https://www.jdreaver.com/posts/2014-06-22-math-programming-blog-hakyll.html">additional CSS</a>. A list of supported languages can be found in the <a href="https://github.com/jgm/highlighting-kate/tree/master/xml">highlighting-kate</a> source code.</li>
<li>You might also want an <a href="https://thibaud.dauce.fr/posts/2015-11-15-rss-feed-with-hakyll.html">RSS feed</a>.</li>
<li>You might also want <a href="http://javran.github.io/posts/2014-03-01-add-tags-to-your-hakyll-blog.html">tags</a>.</li>
</ol>

<div class="info">
    
    Tags: <a href="/tags/Hakyll.html">Hakyll</a>, <a href="/tags/GitHub.html">GitHub</a>
    
</div>
]]></description>
    <pubDate>Tue, 14 Jun 2016 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2016-06-14-hakyll.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Designing for Problems Too Big to Test</title>
    <link>http://www.craigstuntz.com/posts/2015-12-23-Designing-for-Problems-Too-Big-to-Test.html</link>
    <description><![CDATA[<div class="info">
    Posted on December 23, 2015
    
</div>

<p>In this post, I will show an example of where using unit testing as a design methodology does not work, and how to produce a design for correct code anyway. There is no single design methodology which works for all problems, so it’s useful to have a variety of tools at your disposal.</p>
<p>This post is my contribution to the <a href="https://sergeytihon.wordpress.com/2015/10/25/f-advent-calendar-in-english-2015/">2015 F# Advent Calendar</a>.</p>
<p>I’m implementing a compiler for a tiny language without use of external libraries for things like parsing and code generation. The idea is to produce a minimal example of a purely functional compiler. This is an ongoing project, and some parts are further along than others, but you can see the source code as I work, and it does produce working EXEs today.</p>
<p>Designing a compiler is harder than many problems in programming, because they do something difficult: A compiler must be able to accept any string and either produce an equivalent program or explain clearly to a human being why this is string is not a valid program. And there are a lot of possible strings!</p>
<p>Designing a compiler is also easier than many problems in programming, because there exist formal methods for solving many of the harder sub-problems in the design. You can think of “formal methods,” here, as recipes for a solution, but very special recipes which guarantee that you’ll touch all possible cases in the problem space.</p>
<h3 id="design-methodologies">Design Methodologies</h3>
<p>Over the years, programmers have used a number of different methodologies when approaching program design. These include:</p>
<ul>
<li><strong>The Big Ball of Mud.</strong> Arguably the most common methodology, this involves just poking at the problem until things seem to work for the most common case, maybe.</li>
<li><strong>Big Design Up Front.</strong> In this methodology, a full specification for the implementation of the system is developed before coding begins. Many people consider this obsolete or, at best, wildly inefficient.</li>
<li><strong>Test Driven Design.</strong> I’m going to distinguish this from test driven development, because tests are useful both as a methodology for program design and for implementing a program design. In practice, people tend to combine these. As a design methodology, the general idea is that you start with either high or low level simple cases, and continue working until a design evolves. Some people divide this into sub-schools of test driven design. Despite its ubiquity, few defend the big ball of mud as a design practice. Big design up front is widely ridiculed. That leaves TDD as the most prevalent design methodology that people are willing to publicly defend. Unfortunately, testing, while useful, is fundamentally limited.</li>
</ul>
<blockquote>
<p>“…program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.” Edsger Dijkstra</p>
</blockquote>
<p>In cases where “the happy path” is far more prevalent than “edge cases,” this might not seem to be a show-stopping limitation, and test driven design works OK in many cases.</p>
<h3 id="there-are-no-edge-cases-in-programming-languages">There Are No Edge Cases In Programming Languages</h3>
<p>As noted above, a compiler must be able to accept any string and either produce an equivalent program or explain clearly to a human being why this is string is not a valid program. A compiler designer cannot predict the valid programs people may write, nor the errors they may create.</p>
<p>For example, let’s consider <a href="https://en.wikipedia.org/wiki/Duff%27s_device">Duff’s Device</a>. It’s safe to presume that Brian Kernighan and Dennis Ritchie did not have this in mind when they designed the C programming language. For the uninitiated, Duff’s Device nests a while loop inside of a switch statement:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">send(to, from, count)
<span class="dt">register</span> <span class="dt">short</span> *to, *from;
<span class="dt">register</span> count;
{
    <span class="dt">register</span> n = (count + <span class="dv">7</span>) / <span class="dv">8</span>;
    <span class="cf">switch</span> (count % <span class="dv">8</span> ) {
    <span class="cf">case</span> <span class="dv">0</span>: <span class="cf">do</span> { *to = *from++;
    <span class="cf">case</span> <span class="dv">7</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">6</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">5</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">4</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">3</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">2</span>:      *to = *from++;
    <span class="cf">case</span> <span class="dv">1</span>:      *to = *from++;
            } <span class="cf">while</span> (--n &gt; <span class="dv">0</span>);
    }
}</code></pre></div>
<p>This is unreadable to the point that it borders on obfuscation, but is legal C, per the specification, and does perform a useful optimization on a particular case. I bring it up because, as a language implementer, I think it drives home the point that there is no possibility of creating (anywhere near) all of the possible unit tests for all of the possible ways someone might choose to use your language.</p>
<h3 id="different-tasks-different-design-methodologies">Different Tasks, Different Design Methodologies</h3>
<p>In many programming tasks, the number of “happy path” cases are similar to the number of edge and error cases. At least within the same order of magnitude. In these cases it’s probably possible to exhaustively test the system, even if people don’t usually bother to do so.</p>
<p>For other tasks, however, the number of “edge cases” is uncountably large. I gave a programming language example above, but there are others, such as designing an API for a cloud service. In these cases, we need a design methodology which gives us some assurance that our design will work with cases that we did not and could not possibly produce tests for, because real-world use cases will vastly outnumber our test cases.</p>
<h3 id="formal-methods">Formal Methods</h3>
<p>The solution to this problem is to break the problem space into a countable number of conditions. This is only effective if those countable conditions represent all possible states in the problem space. For example, for a programming language, we divide the task of compilation into small phases such as lexing, parsing, etc., and within each phase we use a formalism which guarantees that we cover the entire possible range of conditions within that phase.</p>
<p>This will make more sense if I give an example.</p>
<h3 id="lexing-and-regular-expressions">Lexing and Regular Expressions</h3>
<p>In many compilers, the first phase of compilation is lexing, where the string representing the program source code is split into tokens. The token list will be passed to the parser, which attempts to match them up with the grammar of the programming language. As a practical example, consider the following expression from a Lisp-like language, which increments the number 1, resulting in the value 2.</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(inc <span class="dv">1</span>)</code></pre></div>
<p>Lexing divides this source code into a stream of tokens, like this:</p>
<pre><code>LeftParenthesis
Identifier &quot;inc&quot;
LiteralInt 1
RightParenthesis</code></pre>
<p>These tokens will be consumed by the parser to produce and abstract syntax tree, type checked, optimized, etc., but let’s just look at lexing for now.</p>
<p>Substrings of the input source code are mapped to tokens using regular expressions. Not <a href="http://www.regular-expressions.info/quickstart.html">the PCRE type with zillions of features</a> you might be familiar with, but <a href="https://en.wikipedia.org/wiki/Lexical_grammar">a far simpler version</a> with only a few rules. The lexical grammar for this language looks something like this:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">leftParenthesis  = <span class="ch">&#39;(&#39;</span>
rightParenthesis = <span class="ch">&#39;)&#39;</span>
letter           = <span class="ch">&#39;A&#39;</span> | <span class="ch">&#39;B&#39;</span> | <span class="ch">&#39;C&#39;</span> | …
digit            = <span class="ch">&#39;0&#39;</span> | <span class="ch">&#39;1&#39;</span> | <span class="ch">&#39;2&#39;</span> | …
number           = (<span class="ch">&#39;+&#39;</span>digit|<span class="ch">&#39;-&#39;</span>digit|digit) digit*
alphanumeric     = letter | number
//<span class="co"> …</span></code></pre></div>
<p>You don’t use <code>System.Text.RegularExpressions.Regex</code> for this; it’s slow, and has features you won’t need.</p>
<p>How can we guarantee that we can tokenize any possible string? We don’t need to; as long as we explicitly handle the case of strings we can’t tokenize, we’re covered. I do this by having an extra token type for unrecognized characters. These are eventually mapped into errors the user sees.</p>
<p>How can we guarantee that we can tokenize any string representing a valid program without seeing an unrecognizable character? Because the parser is designed around a formalism (a context free grammar) which maps lexemes to abstract syntax trees, and the only valid programs are those which can be constructed from repeated applications of the production rules in the parser’s grammar. We have changed the scope of the problem from “any possible string” to “any possible sequence of lexemes.”</p>
<p>Right away we have a big win in the number of test cases. Any “character” in a string could be one of 2^16 UTF-16 code points, but the number of possible lexemes is considerably smaller. A real language would have <a href="https://github.com/whitequark/parser/blob/master/lib/parser/lexer.rl">maybe 10 times more</a>, but that’s still better than testing an input of any possible Unicode code point:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> Lexeme =
    | LeftParenthesis
    | RightParenthesis
    | Identifier    <span class="kw">of</span> <span class="dt">string</span>
    | LiteralInt    <span class="kw">of</span> <span class="dt">int</span>
    | LiteralString <span class="kw">of</span> <span class="dt">string</span>
    | Unrecognized  <span class="kw">of</span> <span class="dt">char</span></code></pre></div>
<p>We can test the lexer in isolation with a much smaller number of test cases.</p>
<p>The example I gave was a very simple expression, but real-world programs obviously contain more complicated expressions. Also, real-world code is often invalid and must be rejected by the compiler. Some coding errors cannot be detected until further on in the compilation pipeline, but there are possible errors at the lexing stage. For example, in my language, identifiers must begin with a letter, so the expression</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(| <span class="dv">1</span>)</code></pre></div>
<p>…maps to:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">LeftParenthesis
Unrecognized <span class="ch">&#39;|&#39;</span>
LiteralInt <span class="dv">1</span>
RightParenthesis</code></pre></div>
<p>Importantly, we should be able to examine any character of a real-world string, and map it into one of these types. The <code>Unrecognized</code> type serves as a kind of fall through for characters which do not fit into the types in the union.</p>
<p>F#’s exhaustiveness checking ensures that we cannot forget to handle a particular case even if we add additional lexemes to the language specification later. As a simple example, consider this pretty print function which takes a list of lexemes and produces a string similar to the originally parsed source code:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> <span class="kw">private</span> prettyPrintLexeme = <span class="kw">function</span>
| LeftParenthesis          -&gt; <span class="st">&quot;(&quot;</span>
| RightParenthesis         -&gt; <span class="st">&quot;)&quot;</span>
| Identifier    identifier -&gt; identifier
| LiteralInt    num        -&gt; num.ToString()
| LiteralString str        -&gt; sprintf <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">%s</span><span class="sc">\&quot;</span><span class="st">&quot;</span> str
| Unrecognized  ch         -&gt; ch.ToString()

<span class="kw">let</span> prettyPrint =
    List<span class="kw">.</span>map prettyPrintLexeme
    &gt;&gt; String<span class="kw">.</span>concat <span class="st">&quot; &quot;</span></code></pre></div>
<p>If we were to, after the fact, add an additional type of lexeme, but forgot to modify the <code>prettyPrint</code> function, we would receive a compiler warning since the function would no longer be exhaustive.</p>
<h3 id="the-rest-of-the-pipeline">The Rest of the Pipeline</h3>
<p>What about parsing, type checking, and the rest of the compilation pipeline? Formalisms exist for those, as well.</p>
<table>
<thead>
<tr class="header">
<th>Compilation phase | Fo</th>
<th>Formalism</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Parsing | Cont</td>
<td>Context free grammar</td>
</tr>
<tr class="even">
<td>Optimization |</td>
<td>Algebra</td>
</tr>
<tr class="odd">
<td>Type checking</td>
<td>Logical inference rules</td>
</tr>
<tr class="even">
<td>Code generation | Deno</td>
<td>Denotational semantics</td>
</tr>
</tbody>
</table>
<h3 id="isnt-this-just-big-design-up-front">Isn’t This Just Big Design Up Front?</h3>
<p>The idea of basing your implementation design around in an exhaustive specification might sound like a big design up front, but there is an important difference. The formalisms used in implementing a compiler are “off the shelf.” Nobody has to sit down and create them, because they have been refined over decades of compiler implementations. You simply need to know that they exist.</p>
<p>If “formal methods” sounds too snobby for your taste, you can simply call this “programming with proven recipes.”</p>
<p>And of this downside of this methodology is that it becomes big design up front in those cases when there is not an off the shelf formalism available for your use. That’s OK! The important thing is to know when these formalisms exist in how to use them, when necessary.</p>
<p>The <a href="https://github.com/craigstuntz/TinyLanguage">full source code for this post</a> is available.</p>

<div class="info">
    
    Tags: <a href="/tags/F%23.html">F#</a>, <a href="/tags/compilers.html">compilers</a>, <a href="/tags/testing.html">testing</a>, <a href="/tags/formal%20methods.html">formal methods</a>
    
</div>
]]></description>
    <pubDate>Wed, 23 Dec 2015 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2015-12-23-Designing-for-Problems-Too-Big-to-Test.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Provable Optimization with Microsoft Z3</title>
    <link>http://www.craigstuntz.com/posts/2015-03-05-provable-optimization-with-microsoft-z3.html</link>
    <description><![CDATA[<div class="info">
    Posted on March  5, 2015
    
</div>

<p>A few months ago, some coworkers sent around a Ruby challenge. It appears simple, but we can sometimes learn a lot from simple problems.</p>
<blockquote>
<p>Write a Ruby program that determines the smallest three digit number such that when said number is divided by the sum of its digits the answer is 20.</p>
</blockquote>
<p>In case that’s not clear, let’s pick a number, say, 123. The sum of the digits of 123 is 6, and 123/6 = 20.5, so 123 is not a solution. What is?</p>
<p>Here’s some Ruby code I wrote to solve it:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">def</span> digitSum(num, base = <span class="dv">10</span>)
    num.to_s(base).split(<span class="ot">//</span>).inject {|z, x| z + x.to_i(base)}
<span class="kw">end</span>

<span class="kw">def</span> solution
    (<span class="dv">100</span>..<span class="dv">999</span>).step(<span class="dv">20</span>).reject {|n| n / digitSum(n) != <span class="dv">20</span> }.first
<span class="kw">end</span>

puts solution</code></pre></div>
<p>Problem solved, right?</p>
<p>Well, no. For starters, it doesn’t even execute. There’s a really subtle type error in this code. You probably have to be fairly good with Ruby to figure out why without actually running it. Even when fixed, the cognitive overhead for understanding the code to even a simple problem is very high! It doesn’t look like the problem specification at all.</p>
<p>Does this version, when the bug is fixed, actually produce a correct answer to the problem? Does it even produce an incorrect solution? It’s not quite clear.</p>
<p>So maybe my solution isn’t so good. But one of my colleagues had an interesting solution:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">def</span> the_solution
    <span class="dv">180</span>
<span class="kw">end</span></code></pre></div>
<p>Well, that looks really, really efficient, and it typechecks. But is it the correct answer? Will you know, six months down the road, what question it’s even trying to answer? Tests would help, but the word “smallest” in the problem turns out to be tricky to test well. Do you want methods like this in code you maintain?</p>
<h2 id="the-best-of-both-worlds">The Best of Both Worlds</h2>
<p>Is there a solution which is as efficient as just returning 180 but which also proves that 180 is, in fact, the correct solution to the problem? Let’s encode the specification for the problem in <a href="/posts/2014-07-07-test-only-development.html">a pure specification language, SMT-LIB</a>:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(define-fun matches-problem ((n Int)) Bool
  (<span class="kw">and</span>
    (<span class="op">&gt;=</span> n <span class="dv">100</span>)
    (<span class="op">&lt;</span> n <span class="dv">1000</span>)                   <span class="co">; three digits</span>
    (<span class="op">=</span> <span class="fl">20.0</span> (<span class="op">/</span> n (digit-sum n)))))</code></pre></div>
<p>Z3/SMT-LIB doesn’t ship with a <code>digit-sum</code> function, so I had to write that. You can find that code in the full solution, below.</p>
<p>That’s most of the problem, but not quite all. We also have to show that this is the smallest solution. So let’s also <code>assert</code> that there exists a “smallest” solution, which means that any other solution is larger:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(declare-const num Int)

(<span class="kw">assert</span>
  (<span class="kw">and</span>
    (matches-problem num) <span class="co">; &quot;num&quot; is a solution</span>
    (forall ((other Int))
        (implies (matches-problem other) (<span class="op">&gt;=</span> other num))) <span class="co">; any &quot;other&quot; solution is larger</span>
  ))</code></pre></div>
<p>Now let’s ask Z3 if this specification even makes sense, and if it could be reduced into something more efficient:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(check-sat)
(get-model)</code></pre></div>
<p>And Z3 replies…</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">sat
(model
  (define-fun num () Int
    <span class="dv">180</span>)
)</code></pre></div>
<p>A round of applause for the theorem prover, please! To see the full solution, <a href="http://rise4fun.com/Z3/7VZh">try it yourself</a> without installing anything.</p>
<p>One interesting point here: The output language is SMT-LIB, just like the input language. The “compile” transforms a provably consistent and more obviously correct specification into an more efficient representation of the answer in the same language as the input. This is especially useful for problems which do not have a single answer. Z3 <a href="http://rise4fun.com/Z3/smtc_arith">can return a function matching a specification</a> as easily as it can return an integer.</p>
<p>What does it mean when I ask “if this specification even makes sense?” Well, let’s say I don’t like the number 180. I can exclude it with an additional <code>assert</code>:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="kw">assert</span> (<span class="op">&gt;</span> num <span class="dv">180</span>))</code></pre></div>
<p>This time, when I check-sat, Z3 replies unsat, meaning the model is not satisfiable, which means there’s definitely no solution. So 180 is not only the smallest solution to the original problem, it turns out to be the unique solution.</p>
<p>Formal methods can show that your problem specifications are consistent and that your implementation is correct, and they can also guarantee that “extreme” optimizations are correct. This turns out to be <a href="http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf">really useful in real-world problems</a>.</p>

<div class="info">
    
    Tags: <a href="/tags/z3.html">z3</a>, <a href="/tags/theorem%20provers.html">theorem provers</a>
    
</div>
]]></description>
    <pubDate>Thu, 05 Mar 2015 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2015-03-05-provable-optimization-with-microsoft-z3.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>"Test-Only Development" with the Z3 Theorem Prover</title>
    <link>http://www.craigstuntz.com/posts/2014-07-07-test-only-development.html</link>
    <description><![CDATA[<div class="info">
    Posted on July  7, 2014
    
</div>

<p>In this post I’ll introduce a style of programming which may be totally unfamiliar and perhaps a bit magical to many readers. What if you could write a unit test for a problem and have your compiler automatically return a correct implementation? Call it “test only” instead of “test first.” I’m going to translate the problem itself into a specification language and use Microsoft Research’s <a href="http://rise4fun.com/z3">Z3 theorem prover</a> to find a solution. I won’t write any implementation code at all!</p>
<h2 id="a-simple-problem">A Simple Problem</h2>
<p>Here’s the problem I’ll use as an example, which is <a href="https://projecteuler.net/problem=4">problem #4 from Project Euler</a>:</p>
<blockquote>
<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>
</blockquote>
<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
<p>The usual approach is to use brute force. Here’s a C# example, which I suspect is similar to what many people do:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs">(from    factor1 <span class="kw">in</span> Enumerable.<span class="fu">Range</span>(<span class="dv">100</span>, <span class="dv">899</span>)
 from    factor2 <span class="kw">in</span> Enumerable.<span class="fu">Range</span>(<span class="dv">100</span>, <span class="dv">899</span>)
 let     product = factor1 * factor2
 where   <span class="fu">IsPalindrome</span>(product) <span class="co">// defined elsewhere</span>
 orderby product descending
 select  <span class="kw">new</span> { Factor1 = factor1, Factor2 = factor2, Product = product}).<span class="fu">First</span>()</code></pre></div>
<p>This is not a terrible solution. It runs pretty quickly and returns the correct solution, and we can see opportunities for making it more efficient. I suspect most people would declare the problem finished and move on.</p>
<p>However, the LINQ syntax may obscure the fact that this is still a brute force solution. Any time we have to think about how to instruct a computer to find the answer to the problem instead of the characteristics of the problem itself, we add cognitive overhead and increase the chances of making a mistake.</p>
<p>Also, what is that <code>IsPalindrome(product)</code> hiding? Most people implement this by converting the number to a string, and comparing it with the reversed value. But it turns out that the mathematical properties of a palindromic number are critical to finding an efficient solution.</p>
<p>Indeed, you can solve this problem fairly quickly with pencil and paper so long as you don’t do <code>IsPalindrome</code> this way! (It would probably double the length of this post to explain how, so I’ll skip that. If there’s demand in comments I can explain, otherwise just read on.)</p>
<h2 id="solving-with-pure-specification">Solving with Pure Specification</h2>
<p>For my purely declarative solution, I’m going to use the language <a href="http://smt-lib.org/">SMT-LIB</a>. As a pure specification language, it doesn’t allow me to define an implementation at all! Instead, I’ll use it to express the constraints of the problem, and then use MSR’s Z3 solver to find a solution. SMT-LIB uses Lisp-like S-expressions, so, yes Virginia, there will be parentheses, but don’t let that scare you off. It’s always worthwhile to learn languages which make you think about problems differently, and I think you’ll find SMT-LIB really delivers!</p>
<p>Since this language will seem unusual to many readers, let’s walk through the problem step by step.</p>
<p>First, we need to declare some of the variables used in the problem. I use “variable” here in the mathematical, rather than software, sense: A placeholder for an unknown, but not something to which I’ll be assigning varying values. So here are three variables roughly equivalent to the corresponding C# vars above:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(declare-const product Int)
(declare-const factor1 Int)
(declare-const factor2 Int)</code></pre></div>
<p>In an S-expression, the first item inside the parentheses is the function, and the remaining items are arguments. So <code>declare-const</code> is the function here and the remaining items are the variable name and its “sort” (type).</p>
<p>Next, the problem says that <code>product</code> must be the, ahem, product of the two factors:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="kw">assert</span> (<span class="op">=</span> (<span class="op">*</span> factor1 factor2) product))</code></pre></div>
<p>“<code>assert</code>” sounds like a unit test, doesn’t it? Indeed, many people coming to a theorem prover from a software development background will find that programming them is much more similar to writing tests than writing code. The line above just says that <code>factor1 * factor2 = product</code>. But it’s an assertion, not an assignment; we haven’t specified values for any of these variables.</p>
<p>The problem statement says that both factors are three digit numbers:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor1 <span class="dv">100</span>) (<span class="op">&lt;=</span> factor1 <span class="dv">999</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor2 <span class="dv">100</span>) (<span class="op">&lt;=</span> factor2 <span class="dv">999</span>)))</code></pre></div>
<p>Mathematically, what does it mean for a number to be a palindrome? In this case, the largest product of 3 digit numbers is going to be a six digit number of the form <strong>abccba</strong>, so product = 100000<strong>a</strong> + 10000<strong>b</strong> + 1000<strong>c</strong> + 100<strong>c</strong> + 10<strong>b</strong> + <strong>a</strong>. As I noted above, expressing the relationship this way is key to finding a non-brute-force solution using algebra. But you don’t need to know that in order to use Z3, because Z3 knows algebra! All you need to know is that you should express relationships mathematically instead of using string manipulation.</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(declare-const a Int)
(declare-const b Int)
(declare-const c Int)
(<span class="kw">assert</span> (<span class="op">=</span> product (<span class="op">+</span> (<span class="op">*</span> <span class="dv">100000</span> a) (<span class="op">*</span> <span class="dv">10000</span> b) (<span class="op">*</span> <span class="dv">1000</span> c) (<span class="op">*</span> <span class="dv">100</span> c) (<span class="op">*</span> <span class="dv">10</span> b) a)))</code></pre></div>
<p>I implied above that <strong>a</strong>, <strong>b</strong>, and <strong>c</strong> are single-digit numbers, so we need to be specific about that. Also, <strong>a</strong> can’t be 0 or we won’t have a 6 digit number.</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> a <span class="dv">1</span>) (<span class="op">&lt;=</span> a <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> b <span class="dv">0</span>) (<span class="op">&lt;=</span> b <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> c <span class="dv">0</span>) (<span class="op">&lt;=</span> c <span class="dv">9</span>)))</code></pre></div>
<p>These 4 assertions about a, b, and c are enough to determine that product is a palindrome. We’re not quite done yet, but let’s see how we’re doing so far. <code>(check-sat)</code> asks Z3 if there is a solution to the problem we’ve posed, and <code>(get-model)</code> displays that solution. Here’s the entire script so far:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(declare-const product Int)
(declare-const factor1 Int)
(declare-const factor2 Int)

(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor1 <span class="dv">100</span>) (<span class="op">&lt;</span> factor1 <span class="dv">1000</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor2 <span class="dv">100</span>) (<span class="op">&lt;</span> factor2 <span class="dv">1000</span>)))
(<span class="kw">assert</span> (<span class="op">=</span> (<span class="op">*</span> factor1 factor2) product))

(declare-const a Int)
(declare-const b Int)
(declare-const c Int)

(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> a <span class="dv">1</span>) (<span class="op">&lt;=</span> a <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> b <span class="dv">0</span>) (<span class="op">&lt;=</span> b <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> c <span class="dv">0</span>) (<span class="op">&lt;=</span> c <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="op">=</span> product (<span class="op">+</span> (<span class="op">*</span> <span class="dv">100000</span> a) (<span class="op">*</span> <span class="dv">10000</span> b) (<span class="op">*</span> <span class="dv">1000</span> c) (<span class="op">*</span> <span class="dv">100</span> c) (<span class="op">*</span> <span class="dv">10</span> b) a)))

(check-sat)
(get-model)</code></pre></div>
<p>When you run this through Z3 (<a href="http://rise4fun.com/z3">try it yourself!</a>), the solver responds:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">sat

(model
  (define-fun c () Int
    <span class="dv">1</span>)
  (define-fun b () Int
    <span class="dv">0</span>)
  (define-fun a () Int
    <span class="dv">1</span>)
  (define-fun product () Int
    <span class="dv">101101</span>)
  (define-fun factor2 () Int
    <span class="dv">143</span>)
  (define-fun factor1 () Int
    <span class="dv">707</span>)
)</code></pre></div>
<p>That’s pretty good! <code>sat</code>, here, means that Z3 found a solution (it would have displayed <code>unsat</code> if it hadn’t). Eliding some of the syntax, the solution it found was 143 * 707 = 101101. Not bad for zero implementation code, but also not the answer to the Project Euler problem, which asks for the largest product.</p>
<h2 id="optimization">Optimization</h2>
<p>“Optimization,” in Z3 parlance, refers to finding the “best” proof for the theorem, not doing it as quickly as possible. But how do we tell Z3 to find the largest product?</p>
<p>Z3 has a function called <code>maximize</code>, but it’s a bit limited. If I try adding <code>(maximize product)</code>, Z3 complains:</p>
<blockquote>
<p>Z3(15, 10): ERROR: Objective function ‘(* factor1 factor2)’ is not supported</p>
</blockquote>
<p>After some fiddling, however, it seems (maximize (+ factor1 factor2)) works, sort of. Adding this to the script above causes Z3 to return:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="op">+</span> factor1 factor2) |-&gt; [<span class="dv">1282</span>:oo]

unknown --...</code></pre></div>
<p>Which is to say, Z3 could not find the maximal value. (“oo” just means ∞, and <code>unknown</code> means it could neither prove nor disprove the theorem.) Guessing that a might be bigger than 1, I can change its range to 8..9 and Z3 arrives at a single solution:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(<span class="op">+</span> factor1 factor2) |-&gt; <span class="dv">1906</span>

sat

(model
  (define-fun b () Int
    <span class="dv">0</span>)
  (define-fun c () Int
    <span class="dv">6</span>)
  (define-fun factor1 () Int
    <span class="dv">913</span>)
  (define-fun factor2 () Int
    <span class="dv">993</span>)
  (define-fun a () Int
    <span class="dv">9</span>)
  (define-fun product () Int
    <span class="dv">906609</span>)
)</code></pre></div>
<p>The final script is:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(declare-const product Int)
(declare-const factor1 Int)
(declare-const factor2 Int)

(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor1 <span class="dv">100</span>) (<span class="op">&lt;</span> factor1 <span class="dv">1000</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> factor2 <span class="dv">100</span>) (<span class="op">&lt;</span> factor2 <span class="dv">1000</span>)))
(<span class="kw">assert</span> (<span class="op">=</span> (<span class="op">*</span> factor1 factor2) product))

(declare-const a Int)
(declare-const b Int)
(declare-const c Int)

(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> a <span class="dv">8</span> ) (<span class="op">&lt;=</span> a <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> b <span class="dv">0</span>) (<span class="op">&lt;=</span> b <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="kw">and</span> (<span class="op">&gt;=</span> c <span class="dv">0</span>) (<span class="op">&lt;=</span> c <span class="dv">9</span>)))
(<span class="kw">assert</span> (<span class="op">=</span> product (<span class="op">+</span> (<span class="op">*</span> <span class="dv">100000</span> a) (<span class="op">*</span> <span class="dv">10000</span> b) (<span class="op">*</span> <span class="dv">1000</span> c) (<span class="op">*</span> <span class="dv">100</span> c) (<span class="op">*</span> <span class="dv">10</span> b) a)))

(maximize (<span class="op">+</span> factor1 factor2))

(check-sat)
(get-model)</code></pre></div>
<p>This bothers me just a little, since I had to lie ever so slightly about my objective, even though I did end up with the right answer.</p>
<p>That’s just a limitation of Z3, and it may be fixed some day; Z3 is under active development, and <a href="http://rise4fun.com/Z3/tutorial/optimization">the optimization features are not even in the unstable or master branches</a>. But think about what has been achieved here: We’ve solved a problem with nothing but statements about the properties of the correct answer, and without any “implementation” code whatsoever. Also, using this technique forced me to think deeply about what the problem actually meant. Can This Be Real?</p>
<p>At this point, you may have questions about doing software development in this way. Sure, it works fine for this trivial problem, but can you solve real-world problems this way? Is it fast? Are there any other tools with similar features? What are the downsides of working in this way? You may find the answers to these questions as surprising as the code above. Stay tuned!</p>

<div class="info">
    
    Tags: <a href="/tags/z3.html">z3</a>, <a href="/tags/theorem%20provers.html">theorem provers</a>, <a href="/tags/testing.html">testing</a>
    
</div>
]]></description>
    <pubDate>Mon, 07 Jul 2014 00:00:00 UT</pubDate>
    <guid>http://www.craigstuntz.com/posts/2014-07-07-test-only-development.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>

    </channel>
</rss>
