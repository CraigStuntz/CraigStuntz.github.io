<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Craig Stuntz's blog</title>
        <link>https://www.craigstuntz.com</link>
        <description><![CDATA[Craig Stuntz's blog]]></description>
        <atom:link href="https://www.craigstuntz.com/feed.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 09 Sep 2025 00:00:00 UT</lastBuildDate>
        <item>
    <title>Building a Synthesizer, Chapter 12: Breadboarding the VCF</title>
    <link>https://www.craigstuntz.com/posts/2025-09-09-building-a-synthesizer-12.html</link>
    <description><![CDATA[<div class="info">
    Posted on September  9, 2025
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li>12: Breadboarding the VCF</li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>Nearly all synthesizers have a filter of some kind. There are many different
filter designs. Even a phrase like
<a href="https://www.youtube.com/watch?v=IRxeIEeAAnU">“the Moog ladder filter” can mean many different actual circuits.</a>
Differing filter designs can have as much to do with the character of how a synth
sounds as different oscillator shapes.</p>
<p>A VCF stands for a “Voltage Controlled Filter,” which is similar to a regular
equalizer filter except that it can be voltage controlled, which means that we
can use an Envelope Generator or a Low Frequency Oscillator to vary the
parameters of the filter (such as cutoff or resonance) as a note plays.</p>
<p>Moritz Klein’s goal when designing the mki x es.EDU VCF was to make a “classic
sounding” filter with a very simple design. And when you think about how simple
a low-pass filter can be – just a resistor and a capacitor, this feels like it
should be possible.</p>
<h2 id="breadboarding-the-filter">Breadboarding the Filter</h2>
<p>One really minor difficulty I had when breadboarding these was figuring out which
component was which, e.g., which jack was “input” and which was “output.” Here’s
the schematic, which is clear enough:</p>
<figure>
<a href="/images/synth/VCFFirstOrderSchematic.png">
<img src="/images/synth/VCFFirstOrderSchematic.png" loading="lazy" width="300px" alt="A schematic, from the manual, for the first order passive filter. There are no units on the resistor or capacitor.">
</a>
<figcaption>
Schematic
</figcaption>
</figure>
<p>However, the breadboard layout is quite a bit less clear, and the jacks are for
whatever reason never labeled in the manual. Quick, which jack is input?</p>
<figure>
<a name="breadboardLayout" href="/images/synth/VCFFirstOrderBreadboard.png">
<img src="/images/synth/VCFFirstOrderBreadboard.png" loading="lazy" width="300px" alt="A drawing, from the manual, of the breadboard layout of the first order passive filter">
</a>
<figcaption>
Breadboard Layout
</figcaption>
</figure>
<p>(It’s the one on the right.)</p>
<p>This becomes considerably harder when we start using seven op amps split
across two different ICs!</p>
<h3 id="passive-filter">Passive Filter</h3>
<p>Anyway, here’s the square wave I used as the input to the filter for my testing. You’ll
soon see why I need to show this by itself first.</p>
<figure>
<a href="/images/synth/VCFNoFilter.png">
<img src="/images/synth/VCFNoFilter.png" loading="lazy" width="300px" alt="A trace of a square wave on the oscilloscope">
</a>
<figcaption>
#NoFilter, Just a Square Wave
</figcaption>
</figure>
<p>First we build a passive, first order filter using just a resistor and a
capacitor. This does an OK job at filtering the output, but note that it also
distorts the input signal as well, because the resistor and capacitor add
impedance to the input side of the circuit, since there is no isolation between
the filter and the input:</p>
<figure>
<a href="/images/synth/VCFFirstOrder500.png">
<img src="/images/synth/VCFFirstOrder500.png" loading="lazy" width="300px" alt="The square wave, as a purple trace, and the output of a single order passive filter, as a yellow trace. This distorts the input as well as reshaping theo output.">
</a>
<figcaption>
First Order Passive Filter 500 Hz Signal Input
</figcaption>
</figure>
<p>The purple trace above is the input square wave (distorted due to the passive circuit
here), and the output of the filter is the yellow trace.</p>
<p>The filter doesn’t just reshape the wave; it also reduces the output at higher
input frequencies. Above I’m using a 500 Hz input; here’s with a 2 kHz input.</p>
<figure>
<a href="/images/synth/VCFFirstOrder2k.png">
<img src="/images/synth/VCFFirstOrder2k.png" loading="lazy" width="300px" alt="The same filter at 2 kHz. The output of the filter is much lower in volume than at 500 Hz ">
</a>
<figcaption>
First Order Passive Filter 2000 Hz Signal Input
</figcaption>
</figure>
<h3 id="second-order-passive-filter">Second Order Passive Filter</h3>
<p>Then we add a second resistor and capacitor to make a second order filter. The
output is much more like a sine wave with the second order filter. However, the
input is even more distorted.</p>
<figure>
<a href="/images/synth/VCFSecondOrder.png">
<img src="/images/synth/VCFSecondOrder.png" loading="lazy" width="300px" alt="A second order filter, which both turns the output into a smooth sine wave and also distorts the input into a more curved shape">
</a>
<figcaption>
Second Order Passive Filter
</figcaption>
</figure>
<h3 id="active-filter">Active Filter</h3>
<p>Next we build the active filter. Here’s the schematic:</p>
<figure>
<a href="/images/synth/VCAActiveSchematic.png">
<img src="/images/synth/VCAActiveSchematic.png" loading="lazy" width="300px" alt="A schematic for the second order active filter which has no units on the capacitors and units on only one of the three resistors">
</a>
<figcaption>
Active Filter Schematic
</figcaption>
</figure>
<p>When I first build this filter, it didn’t work. I got no output at all. After
some tracing, I finally noticed that we were supposed to replace the 1 µ
capacitors from the passive filter with 1 n capacitors for the active filter.
Unlike the real capacitors, which are visually very distinct, the “1 µ” and “1 n”
are just very similar looking <a href="#breadboardLayout">white blocks in the breadboard drawings</a>,
and the schematic immediately above omits their values altogether!</p>
<p>Anyway, with that sorted, I then had a respectable looking low-pass filter:</p>
<figure>
<a href="/images/synth/VCFActiveTrace.png">
<img src="/images/synth/VCFActiveTrace.png" loading="lazy" width="300px" alt="An oscilloscope trace from the active filter. The input is a square wave reprepresented in purple. The output is the yellow trace and is filtered, a bit, by the low pass filter ">
</a>
<figcaption>
Active Filter Input and Output
</figcaption>
</figure>
<h3 id="adding-resonance">Adding Resonance</h3>
<p>Next we make the filter resonant. We do this by feeding the output of the filter
back into the first capacitor, replacing its connection to ground with the
filter’s output.</p>
<figure>
<a href="/images/synth/VCFResonantTrace.png">
<img src="/images/synth/VCFResonantTrace.png" loading="lazy" width="300px" alt="Oscilloscope trace of resonant filter output. The yellow trace mostly hides the purple trace, except at the leading edge of the square wave where the output has a resonant overshoot ">
</a>
<figcaption>
Resonant Filter
</figcaption>
</figure>
<p>In the instructions and in his videos, Moritz notes
that this “is basically just the filter itself swinging at its set cutoff
frequency in addition and reaction to the oscillation it’s supposed to be
filtering.” That’s correct, but it’s only part of the story. In addition to the
filter “overreact[ing] to any sudden change in voltage at its input,” the filter
also introduces a delay in the signal as it passes through the filter and then
gets partially routed back into the input of the filter. The portion of the
output which is fed back into the filter circuit is out of phase with the input.
Both the delay/phasing and the amplification are responsible for the
characteristic sound of the resonance.</p>
<figure>
<a href="/images/synth/VCFResonantNoResonance.png">
<img src="/images/synth/VCFResonantNoResonance.png" loading="lazy" width="300px" alt="Oscilloscope trace showing the output at a lower level than the input, and the corners of the trace rounded off due to the low pass filter ">
</a>
<figcaption>
Adjustable Resonant Filter, Set to No Resonance
</figcaption>
</figure>
<figure>
<a href="/images/synth/VCFResonantWithResonance.png">
<img src="/images/synth/VCFResonantWithResonance.png" loading="lazy" width="300px" alt="Oscilloscope trace showing the output with the resonance level set to a higher level, causing an overshoot at the leading edge of the square wave   ">
</a>
<figcaption>
Adjustable Resonant Filter, with Resonance
</figcaption>
</figure>
<h3 id="adding-the-diode-ladder">Adding the Diode Ladder</h3>
<p>We want to make the filter adjustable using control voltage. The first step is
to make it adjustable at all. This kit solves that problem using diodes as
“voltage controlled resistors.” I won’t bother explaining the theory here as that
is very well covered in <a href="https://www.ericasynths.lv/media/VCF_MANUAL_v2.pdf">the manual</a>,
which I encourage you to read if this project is at all interesting to you.
The manuals for the mki x es.EDU DIY kits are (really) great reading.</p>
<figure>
<a href="/images/synth/VCFDiodeLadder.jpg">
<img src="/images/synth/VCFDiodeLadder.jpg" loading="lazy" width="300px" alt="A photo of the breadboarded VCF circuit">
</a>
<figcaption>
Filter with Diode Ladder At Upper Left
</figcaption>
</figure>
<h3 id="adding-the-output-stage">Adding the Output Stage</h3>
<p>In the images which follow, the input square wave is in yellow, the top and
bottom of the diode ladder are in purple and green, and the output is in cyan.</p>
<p>Some things to note here. First, the scaling is a bit deceptive. The input signal
is much hotter than the rest of the traces (note its vertical scaling is 2V/div).</p>
<p>The output signal varies quite a bit in amplitude depending on where the filter
cutoff is set, which isn’t ideal. We will fix that in the next section.</p>
<p>There’s a low-frequency noise, probably 60 Hz, in the output. I blame this on
the noisy breadboard and low output level.</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCFOutputStage1.jpg">
<img src="/images/synth/VCFOutputStage1.jpg" loading="lazy" height="200px" alt="An oscilloscope trace showing an output with a fairly square wave signal, like the input">
</a>
<figcaption>
High Cutoff
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCFOutputStage2.jpg">
<img src="/images/synth/VCFOutputStage2.jpg" loading="lazy" height="200px" alt="An oscilloscope trace showing an output with a somwhat rounded signal">
</a>
<figcaption>
Middle Cutoff
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCFOutputStage3.jpg">
<img src="/images/synth/VCFOutputStage3.jpg" loading="lazy" height="200px" alt="An oscilloscope trace showing an output with an output which looks fairly close to a sine wave">
</a>
<figcaption>
Low Cutoff
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>This build took me quite a while to debug. At first I found that a couple of
wires were in the wrong breadboard sockets, and then after a considerable amount
of troubleshooting I found a couple of resistor leads which contacted each other due
to “leaning” on the breadboard. Which is, frankly, an easy mistake to make:</p>
<figure>
<a href="/images/synth/VCFOutputStageBreadboard.jpg">
<img src="/images/synth/VCFOutputStageBreadboard.jpg" loading="lazy" width="600px" alt="A photo of the breadboarded VCF circuit with output stage">
</a>
<figcaption>
VCF with Output Stage
</figcaption>
</figure>
<p>Still, this gave me ample opportunity to put
<a href="2025-04-07-building-a-synthesizer-11.html">my ideas about debugging circuits</a>
into practice!</p>
<h3 id="adding-cv-processing-and-output-scaling">Adding CV Processing and Output Scaling</h3>
<p>One part of breadboarding the mki x es.EDU kits which has repeatedly caused
confusion for me is, when going from one step to the next in the instructions,
figuring out which parts are not needed in the next step and should be removed
vs. which parts need to remain.</p>
<p>I think this example will show you what I mean. These two steps follow each
other sequentially in the manual.</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCFBreadboardCV.png">
<img src="/images/synth/VCFBreadboardCV.png" loading="lazy" height="200px" alt="A hand-drawn picture of a breadboard with many components on it">
</a>
<figcaption>
“CV Processing” Step
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCFBreadboardResonance.png">
<img src="/images/synth/VCFBreadboardResonance.png" loading="lazy" height="200px" alt="Another hand-drawn picture of the same breadboard, with even more components on it, and a few removed">
</a>
<figcaption>
“Resonance II” Step
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>Quick, which components should I remove to go from the first to the second?
Which components need to be added? No matter how carefully I work I still make
mistakes. It’s another opportunity to test my debugging skills.</p>
<p>Anyway, after a lot of assembly and debugging, the output is much cleaner. Note
that the cyan trace here (the filter’s output) has been switched to 500 mV/div,
which is the same vertical resolution as the purple and green traces (which are
the top and bottom of the diode ladder), and 10* less magnification than the
50 mv/div vertical resolution of the cyan trace (output, again) of the previous
section.</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCFCV2.jpg">
<img src="/images/synth/VCFCV2.jpg" loading="lazy" height="200px" alt="An oscilloscope trace showing an output with a fairly square wave signal, like the input">
</a>
<figcaption>
High Cutoff
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCFCV1.jpg">
<img src="/images/synth/VCFCV1.jpg" loading="lazy" height="200px" alt="An oscilloscope trace showing an output with with a somwhat rounded signal">
</a>
<figcaption>
Low Cutoff
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>I like this because you can really clearly see how the green and purple traces
get further away from each other as the filter’s cutoff gets higher and higher.
This “drags the input voltage” (into either end of the diode ladder) into a
different part of the diodes’ nonlinear range, making it a variable resistor,
which is what we wanted.</p>
<h3 id="resonance-ii">Resonance II</h3>
<p>The big problem that I had getting the resonance working is that I mistakenly
used the Schottky diodes supplied with the kit for the power supply in place of
the 1N4148 diodes that I was meant to use. The breadboard instructions just say
“diode,” although they are not interchangeable! Anyway, with the correct diodes
in place I can now affect the resonance a bit, although at this point every time
I touched anything I would knock off the input, one of my four oscilliscope
probes, a random electronic component, etc. I didn’t want to spend a lot of
effort adjusting the trimpot, which is fiddly enough without all of these other
cables to bump into. Still, I can see the effect of the resonance on the leading
edge of the square wave here, even if it is a bit subtle:</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCFResonanceHigh.jpg">
<img src="/images/synth/VCFResonanceHigh.jpg" loading="lazy" height="200px" alt="An oscilloscope trace which shows the output wave with the resonance knob set high, showing a small spike at the head of the wave">
</a>
<figcaption>
High Resonance
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCFResonanceLow.jpg">
<img src="/images/synth/VCFResonanceLow.jpg" loading="lazy" height="200px" alt="An oscilloscope trace which shows the output wave with the resonance knob set low, showing a smooth round edge at the heaed of the wave">
</a>
<figcaption>
Low Resonance
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>Anyway, now we are finished with the breadboarding!</p>
<figure>
<a href="/images/synth/VCFBreadboardFinished.jpg">
<img src="/images/synth/VCFBreadboardFinished.jpg" loading="lazy" height="200px" alt="The completed breadboard">
</a>
<figcaption>
All Finished!
</figcaption>
</figure>
<p>The breadboard is by now getting quite crowded. I think this kit might be
better built across two breadboards.</p>
<p>This post is getting fairly long, so I think I will save the PC board build for
next time!</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCF_MANUAL_v2.pdf">mki x es.EDU VCF User Manual</a></li>
</ul>
<h3 id="product-pages">Product Pages</h3>
<ul>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vcf/">EDU DIY VCF</a></li>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">mki x es.EDU DIY System</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://modwiggler.com/forum/viewtopic.php?p=3771212">Modwiggler thread</a></li>
<li><a href="https://modulargrid.net/e/erica-synths-edu-vcf">Modulargrid page</a></li>
</ul>
<h3 id="simulations">Simulations</h3>
<p>All of these simulations are by Moritz Klein</p>
<ul>
<li><a href="https://tinyurl.com/y5a8tc9l">Static cutoff/Variable cutoff</a></li>
<li><a href="https://tinyurl.com/y5x873gn">Two stage LPF</a></li>
<li><a href="https://tinyurl.com/y2fcoqsj">Active two-stage LPF</a></li>
<li><a href="https://tinyurl.com/y4j2khjd">Slightly resonant LPF</a></li>
<li><a href="https://tinyurl.com/2bfrjd36">Variable resonance</a></li>
<li><a href="https://tinyurl.com/y5z9m64u">Even number of stages/Odd number of stages</a></li>
<li><a href="https://tinyurl.com/2alfoolb">Downwards shift/Upwards shift/Driving the ladder</a></li>
<li><a href="https://tinyurl.com/2yowgjq8">The output stage</a></li>
<li><a href="https://tinyurl.com/2xp8ey77">Properly processed CV</a></li>
<li><a href="https://tinyurl.com/23mp8quc">Resonance II</a></li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=wbG5lvBFCmA">Introducing the mki x es.edu DIY VCF kit</a>
by Moritz Klein (5:04)</li>
<li><a href="https://www.youtube.com/watch?v=eMODpxvdtvs">Erica.EDU Diode Ladder Filter Kit!</a> by Quincas Moreira (16:05)</li>
</ul>
<p>The folling series of videos are iterations on the design of what is ultimately
a slightly different VCF built by Moritz Klein. I do think they are useful,
though:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=3tMGNI--ofU">DIY SYNTH VCF Part 1: Analog Filtering Basics</a> (21:45)</li>
<li><a href="https://www.youtube.com/watch?v=YNoj9Rrw_VM">DIY SYNTH VCF Part 2: Active Filters &amp; Resonance</a> (27:30)</li>
<li><a href="https://www.youtube.com/watch?v=ITJX9jP-zm4">DIY SYNTH VCF Part 3: Resonant High-Pass &amp; Vactrol-Based Voltage Control</a> (29:20)</li>
<li><a href="https://www.youtube.com/watch?v=jvNNgUl3al0">Designing a diode ladder filter from scratch</a> (36:03)</li>
<li><a href="https://www.youtube.com/watch?v=tWKLFcc_BJM">Turning my diode ladder filter into a eurorack module</a> (34:46)</li>
</ul>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>, <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Tue, 09 Sep 2025 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2025-09-09-building-a-synthesizer-12.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 11: Debugging Circuits and Software Debugging</title>
    <link>https://www.craigstuntz.com/posts/2025-04-07-building-a-synthesizer-11.html</link>
    <description><![CDATA[<div class="info">
    Posted on April  7, 2025
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li>11: Debugging Circuits and Software Debugging</li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>Sometimes you build a circuit and it doesn’t work correctly the first time. This
is especially common if it’s a new design, but even when building an existing,
known-good design it might be that your specific construction doesn’t function
correctly. No worries; it happens to the best of us! But you’re now staring at a
hunk of silicon which doesn’t do anything useful. How can you even begin to find
and fix the problem?</p>
<p>In the software world we call such an endeavor “debugging.” In the world of
electronic hardware, doing this falls under the umbrella of “analysis,” although
that also means understanding a working circuit, to a greater degree than
“debugging” means understanding working code. The electronics community has
informally adopted the term “debugging” for “what to do when the board you’re staring at
doesn’t work,” but I find it interesting that I own several books<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> on
electrical engineering and <em>none of them</em> have so much as a chapter on debugging
circuits! It seems like such a strange omission; I guess they presume that we
are learning this stuff in college and can just call a TA over if we get stuck?</p>
<p>It’s not that there is no interest in the topic; there are
<a href="https://amzn.to/4aORbSJ">whole books</a>
<a href="https://amzn.to/42NwRze">on the</a>
<a href="https://amzn.to/3Ep1qRt">subject</a>. But this sort of material just doesn’t seem
to be included in “introductory” texts!</p>
<h2 id="step-by-step">Step By Step</h2>
<p>I follow a similar process when debugging code or hardware:</p>
<ol type="1">
<li>Look for obvious problems</li>
<li>Have a model of the thing I’m looking at</li>
<li>Compare the observed behavior with the model</li>
<li>When I find a deviation of the observed behavior from the model, try making a
change</li>
<li>Observe if the change brings the behavior of the system closer to the model
and keep it or revert it as needed</li>
<li>If the circuit still does not work, go back to the step 2 and iterate until
I have a working system</li>
</ol>
<p>One difference between debugging software and hardware is that when I debug
software I am often writing new tests which run automatically. It’s not that
tests are impossible with hardware, and indeed I can see them being quite useful
on complex circuits, particularly if there’s a microprocessor available to run
them.
<a href="https://oxide-and-friends.transistor.fm/episodes/raiding-the-minibar">Testing harnesses are common</a>
when doing mass production of circuits. But
the circuits I work on are quite simple, nearly always “one off” (not mass
production) and there is no microprocessor available to run a test suite, so I
must unfortunately do without any tests other than manual analysis of the
circuit.</p>
<h2 id="look-for-obvious-problems">Look for Obvious Problems</h2>
<p>Without power, a circuit cannot work. It’s worth testing that the power rail
is connected and at the right voltage, and similarly for the ground. Also, make
sure that all parts of the circuit have the same “ground”; one problem I’ve
encountered myself is when an input to a circuit (such as an arbitrary waveform
generator) and the circuit itself have two different “grounds.” (The fix, in that
case, was to simply connect the two grounds together with a wire.)</p>
<p>If you turn on a circuit and a component incinerates itself in a puff of smoke,
that may give you a fairly good idea of where the problem lies! Similarly, if
a component is getting hot or smelly, well, unplug the power and take a look in
that neighborhood.</p>
<p>If you’re working on an old circuit it’s probably worth giving all capacitors a
visual inspection before you start any deeper analysis. Old capacitors are
<a href="https://antiqueradio.org/recap.htm">prone to failure</a> and can be tested in
circuit with an <a href="https://en.wikipedia.org/wiki/ESR_meter">ESR meter</a> or out of
circuit with a multimeter.</p>
<p>If this is a new circuit board that you’ve just built, a quick visual inspection
for cold solder joints can save hours of debugging.</p>
<h2 id="have-a-model">Have a Model</h2>
<p>Actually, have two: A logical model and a physical model. To be honest, I
usually have more than one logical model, but rather a tree structure of them.
“An analog synthesizer is composed of several
<a href="2023-03-02-building-a-synthesizer-3.html">VCOs</a>,
<a href="2024-06-24-building-a-synthesizer-10.html">VCAs</a>, VCFs… A VCO is
composed of an oscillator core, wave shaping circuits… Etc.” The physical
model says things like, “I expect the voltage drop across this resistor to be…”</p>
<p>Another way to look at this is that the logical model is the “top down” point
of view, and the physical model is the “bottom up” point of view. Both viewpoints
are needed to solve the problem.</p>
<p>This is similar to how I work in code. I have a logical and a physical model of
how the software should operate. The logical model is a high level interaction
between components or systems, and focuses more on the specific business problem
that the softare is solving. The physical model is at the functions and bytes
level. Some people argue that this is foolishness and I should just change the
code without thinking too much about it until my tests pass. I disagree with
that methodology!</p>
<p>Having a schematic is incredibly helpful with both types of models. A schematic
will often put the design into blocks, which helps you understand the logical
model, as well as listing specific components and voltages, which helps you
understand the physical model. Keeping a physical circuit mentally lined up with
a schematic can be quite tricky! To give one example, a physical circuit might
have an IC containing 4 different op amps, whereas the schematic will put those
4 op amps in 4 different places in the diagram.</p>
<h3 id="model-building">Model Building</h3>
<p>It can be difficult to keep a model in your head, so sometimes it’s helpful to
build a model. You can do this for example with a breadboard. Breadboards are
(electrically) noisy, but they allow you to make changes to a circuit nearly as
fast as you can change code.</p>
<p>Another tool which I find super-helpful in building a model of how a
circuit should work is a simulator. For the work I do,
<a href="https://www.falstad.com/circuit/">Falstad</a> is honestly all I’ve ever needed,
although it’s quite limited, supporting only a handful of components. There are
many more advanced tools, some of which are free, but Falstad has worked for me.</p>
<h3 id="noise">Noise</h3>
<p>One significant difference between debugging hardware and software is that with
hardware, noise must always be considered. Error correction in digital
computers is so good that although noise can and does disrupt circuits in a
computer, as software developers we rarely have to actually consider this.</p>
<p>But when working with hardware, noise is more than an occasional annoyance; it’s
the sea in which we swim. Noise is always present and often significant.</p>
<p>Sources of noise include:</p>
<ul>
<li>Poor connections on a breadboard</li>
<li>Signals reflected in an incorrectly-terminated cable</li>
<li>Less than “ideal” components</li>
<li>Radio frequency interference from nearby devices</li>
</ul>
<p>Sometimes people try to solve problems without having a model. They will say
things like “look for cold solder joints,” or “look at the power supply, and
look for shorts to ground,” or “look for shorted capacitors.”
That’s fine if it works – indeed, such advice probably comes from hard-won
experience – but there will be many problems which you can’t solve so easily!</p>
<h3 id="datasheets">Datasheets</h3>
<p>Electronics datasheets are a helpful tool for building your physical model of a
circuit. These are particularly important with ICs, because it is an
unfortunate fact that knowing the pinouts, signal voltages, etc., for one model
of IC tells you absolutely nothing about another, and getting, say, the power
pins of an IC incorrect can cook the IC when power is applied. If designing a
circuit from scratch, instead of building someone else’s design, I review the
datasheets for each active component I use 100% of the time, and I usually end
up reading them when building designs that other people have created, as well.</p>
<h2 id="compare-the-observed-behavior">Compare the Observed Behavior</h2>
<p>When we talk about comparing actual behavior with observed behavior, we are
probably talking about doing this comparison <em>at a specific part</em> of the circuit,
and it’s worth talking about how we will choose where to begin tracing.</p>
<p>It may be that the nature of the failure gives us some clue as to where to start
looking. If the circuit seems completely dead, perhaps the failure is towards
the beginning of the signal path?</p>
<p>But it might also be the case that there is no obvious place to begin looking.
In this case a good technique is to do a binary search. Start in the middle,
compare the signal with your model. If it seems correct, go halfway further
along the circuit. If it seems incorrect, back up halfway towards the beginning.
Repeat as necessary.</p>
<p>How do you know what the signal at some point in the circuit “should” be? It may
be that your mental model of the circuit is so good that you will just know.
But if that’s not the case, there are some other techniques you can use:</p>
<ul>
<li>Many circuits have “test points” on the PC board and documentation on what the
voltage/frequency should be at those labeled test points.</li>
<li>You can use a simulator to approximate what the reading should be.</li>
<li>You can “lower your standards” and just trace “am I getting any signal at all”
without thinking too hard about what it should be, specifically.</li>
</ul>
<p>Whenever your mental model differs from the physical circuit you’re building,
that’s a great place to look for issues. For example, your physical mental model
might include a pair of op amps in different points in a circuit, but your
breadboard might just have a single IC. The confusion this causes can be a source
of error – you might connect a wire to the wrong pin, or forget to connect the
power leads to the IC, which were omitted from your mental model.</p>
<h3 id="tools">Tools</h3>
<p>In order to compare the actual behavior of the circuit with the model which is
in your head or on paper, you need a way to see what is going on inside the
circuit. A “hardware debugger.” It turns out that there are many different kinds
of hardware debuggers.</p>
<p>Why not just have one tool which does it all?
<a href="https://digilent.com/shop/analog-discovery-3/">There are attempts at it!</a>.
But these tend to be featureless boxes which connect to a computer, and I find
them quite awkward to use. Having “one knob per function” is really helpful to
me when I’m working on a real circuit.</p>
<h4 id="multimeter">Multimeter</h4>
<p>So, at a bare minimum, I think you need a multimeter and an oscilloscope. A
multimeter measures voltage, current, and other things when they don’t change
very much. That is to say, if I want to measure a voltage which I expect to be
constant, then I will reach for my multimeter. I say “very much,” because of
course nothing is black and white and many multimeters have maximum/minimum
detection, inrush current measurement, etc. But as a general rule this is for
measuring things which are fairly steady. A multimeter is also great when you
need to measure something such as resistance or capacitance, which are not
generally directly measurable with an oscilloscope. Multimeters come in a few
different form factors, including the standard handheld “brick” style, a
benchtop style, and a current clamp style. All of these do generally the same
things, but may have different accuracy or a few specific features.</p>
<h4 id="oscilloscope">Oscilloscope</h4>
<p>An oscilloscope, by contrast, is all about showing how a signal changes over
time. The signal that you are measuring is <em>usually</em> voltage, although you can
buy current probes as well. Besides just displaying a trace of voltage over time
on the screen, even low-end oscilloscopes today will do frequency counting and
Fourier transforms. Even to just list the features of a contemporary low-end
digital oscilloscope would be a post by itself.</p>
<h4 id="audio-amplifier">Audio Amplifier</h4>
<p>I got a great idea from YouTuber
<a href="https://www.youtube.com/@hackmodular">Mitch</a>, which is
connect leads to an amplifier and a small speaker and use that in lieu of an
oscilloscope when tracing an audio signal through a circuit. This allows me to
hear the signal instead of see it, so that I can keep my eyes on the circuit.</p>
<h4 id="desoldering-tools">Desoldering Tools</h4>
<p>There is one other tool which I’ve found so handy while debugging physical
circuits that I’m leaning towards throwing it in the “essentials” category: Some
kind of desoldering tool. It’s <em>possible</em> to do this with a standard soldering
iron, but it’s so much more of a pleasant experience with a vacuum desoldering
iron or tool! You can buy a spring-loaded desoldering tool for about $10, so
at a bare minimum you want something like this, even if you can’t justify a
more expensive electric vacuum desoldering iron.</p>
<p>One of the reasons that having a really good desoldering tool is so handy is
that many parts cannot be tested in a circuit. To give one very simple example,
if you measure a resistor in circuit and you try to measure its resistance, you
may not get a correct measurement as there may be other resistors in parallel
to it. You must remove it from the circuit to get an accurate measurement.</p>
<h4 id="other-tools">Other Tools</h4>
<p>Beyond that, we get into “optional, but nice to have, depending on what you’re
doing” hardware. A power supply might seem like a must, although the circuit
you’re working on probably already has one. A waveform generator is handy to
have around, and I’ve gotten a lot of mileage from mine while working on different
synthesizer modules, but I could have just used the VCO module that I built if
I didn’t have it.</p>
<p>I have a <a href="https://amzn.to/4i3sIuI">cheap component tester</a> which I can stick a
transistor, capacitor or diode into and it will identify the device, the pinout,
and a few relevant characteristics. I don’t use this very often. Going further
down this road, you might want an LCR or ESR meter if you are testing capacitors,
or a spectrum analyzer or vector network analyzer if you’re dealing with radio/RF
signals. But I have never needed them.</p>
<h3 id="testing-components-in-circuit">Testing Components “In Circuit”</h3>
<p>Software developers will be familiar with the distinction between a unit test
and an integration test; a similar distinction exists in hardware.</p>
<ul>
<li>In a <strong>unit test</strong>, we test a single function to determine if it returns the
expected result given some input. Similarly, we can test electrical components
<strong>in isolation</strong> (not as part of a circuit) to ensure that they are behaving
correctly. This is useful because the component cannot be affected by the
rest of the circuit, but it can be difficult if it’s necessary to un-solder a
component to do it.</li>
<li>In an <strong>integration test</strong>, we test an entire program to ensure that it
behaves correctly given some input. Similarly, we can test an entire
electrical circuit. Note that the test might occur at any point in the
circuit, not only at the output. But the important distinction here is that
the components of the circuit are connected together, and hence have some
influence on eath other’s behavior.</li>
</ul>
<p>In both cases, there are significant limitations on what we can test when real
hardware is involved. For example, you generally <em>cannot</em> measure the resistance
of a resisitor in circuit; the effect of the connected components might
overwhelm the individual value of one resistor. By contrast, some components
can’t exactly be tested by themselves; a 555 timer, for example, requires
external components to work.</p>
<p>So similarly to unit tests and integration tests in code, doing tests on
hardware “out of circuit” or “in circuit” gives us information about just one
component or the component in the context of a whole circuit. But whereas we
can generally test a function either with a unit test or an integration test,
there are some components which can really only be tested in circuit or out
of circuit, and it is up to the engineer to know the distinction, when it
occurs.</p>
<h2 id="make-a-change">Make a Change</h2>
<p>At some point you will identify a problem in the circuit and will have an idea
as to how to proceed. Perhaps you’ve found a bad solder joint, or perhaps a
wire has popped out of your breadboard? Perhaps you’ve discovered you used a
100 Ω resistor where you intended to use a 100 kΩ resistor.</p>
<p>Software is so malleable that we don’t really think much about how to change it;
we just type. But hardware can be more complicated. You might need to replace a
part (or just remove it for testing out of circuit), or perhaps cut a trace on a
PC board – or solder it back. Cutting a trace on a PC board is the equivalent
of “commenting out” code.</p>
<p>Go ahead and make that change.</p>
<h2 id="analyze-the-new-circuit">Analyze the “New” Circuit</h2>
<p>Before powering up the circuit, it’s worth thinking about the “new” circuit
you’ve built. Perhaps you think that now it will work, that this one change
you’ve made is all it will take to make everything work. And maybe that is so!
But it’s worth considering that when a circuit fails it can do so destructively,
so you might want to consider that and carefully look at the circuit for other
mistakes before powering it up again.</p>
<p>When you do power it up again, you should then decide if the change that you
made is <em>good.</em> Hopefully this is the case! But sometimes you will want to undo
the change.</p>
<h2 id="does-it-work">Does It Work?</h2>
<p>Hopefully the change that you made <em>improves</em> the circuit, but that doesn’t
always mean a complete fix. If the circuit now works, great, you’re done, you
can stop and consider what you have learned from the experience.</p>
<p>But if the circuit still is not fully functional, now it’s time to go back to
step 2, “Have a Model,” and work through the process again.</p>
<h2 id="grit">Grit</h2>
<p>Just as with debugging hardware, a significant factor in finding the solution to
a problem with hardware is grit: Your ability to stick to a problem and work
with it until you find the solution. You need a certain degree of persistence,
but not <em>too much.</em> Just as with software, you also need the ability to
recognize when you’re not getting anywhere and “call a friend.” I wish I had
better advice than just “don’t go too far in the direction of ‘not trying hard
enough’ or ‘trying too hard,’” but I will say that if you’ve been in software for
a while then you will recognize this problem and hopefully be good at judging
for yourself!</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Specifically: <em>The Art of Electronics,</em> by Horowitz and Hill,
<em>Make: Electronics,</em> by Charles Platt, and
<em>Practical Electronics for Inventors,</em> by Paul Scherz and Simon Monk, plus
some titles specialized to building synthesizers.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>, <a title="All pages tagged &#39;computer science&#39;." href="/tags/computer%20science.html" rel="tag">computer science</a>, <a title="All pages tagged &#39;debugging&#39;." href="/tags/debugging.html" rel="tag">debugging</a>
    
</div>
]]></description>
    <pubDate>Mon, 07 Apr 2025 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2025-04-07-building-a-synthesizer-11.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Syntax Quirks in Vue.js</title>
    <link>https://www.craigstuntz.com/posts/2025-02-07-syntax-quirks-in-vue-js.html</link>
    <description><![CDATA[<div class="info">
    Posted on February  7, 2025
    
</div>

<p>The markup used in a Vue.js <code>.vue</code> file is a <em>melange</em> of JavaScript, TypeScript,
HTML, and a few other bits of punctuation thrown in for good measure. I
encountered one of the odd corners of this today, and as it took me an hour
to figure all of this out and
<a href="https://vuejs.org/guide/essentials/template-syntax#using-javascript-expressions">the documentation sort of hand waves around it</a>,
I thought I should write my notes down here.</p>
<p>Briefly, when you’re calling a method there are not consistent rules regarding
whether or not you should put <code>()</code> after the method name. Sometimes you <em>can</em>
do this, and sometimes you <em>cannot,</em> whereas other times the behavior of the
document will be silently changed depending upon whether or not you use them.</p>
<p>If you have this in a <code>template</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">:disabled</span><span class="ot">=</span><span class="st">&quot;foo&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>… and you know that <code>foo</code> looks like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>foo<span class="op">:</span> <span class="kw">function</span>() {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>…is that template right or wrong?</p>
<p>Or what if the template looked like:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">:disabled</span><span class="ot">=</span><span class="st">&quot;foo()&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>Now is it right or wrong?</p>
<p>The answer is: “You don’t know if it’s right or wrong, because I haven’t told
you where <code>foo</code> is defined (in <code>computed</code> or in <code>methods</code>), and that matters
<em>a lot.</em> It also matters whether you place this function call in a <code>v-on</code> (<code>@</code>)
or a <code>v-bind</code> (<code>:</code>) portion of the markup.</p>
<p>All of the examples here are using functions which take no arguments, for
simplicity. Things get even more complicated when your function requires aguments!</p>
<p><a href="https://play.vuejs.org/#eNrFV1mPEz8M/ypmHhCIbfv/A09lWC7xABKHON5GQumMuxM2k4wSTw+hfneczJWW3aW7oOWhbezE9i++4v5IXtT1dNVgMk9SwqpWgvA00wBpIVdhwUsSC9VyW7JEUZymZPlTnuamqhvCYlYhlaZIZ8zz/NXE6IhYSD3u3bsPxoI29GxgMYGupWZeM6+8ldHowhTbgfQMG1GeLgYoLDxK9psxzZw7kwmkUvN5eB5+nmZJ+H3VKcmS2Sm4rSaxAbTW2Dk4RA8aHUwmB/reGwKhlFmzYGz4CCQtiHkhnXdzwTj6ZQzlWlqPMPv/FedDBG7R1ffu35qzIyxXefz2ELGl6wk8/LPADVV6ZF7uR+xdkL52Pl6Z5TfUeYTRR//eVW0i/W1n3UjrtTPt8bHuYyLqzkxF70VaD8e4SNDN+0M9PzVqVKRkZOOrk/oM7ip68ps+ffeMnoBF1yhyIDVkSSl0odBORV2rLUjn6xYELBudkzQ6S2BdooataYC2NbIQGeAXB7CQZOx0vFmE6CboQqR+xfdtVU33zt0A4y8IftfQIAAZbxAhEh2mQ7ELYYV2CIJYgS7QAskKgR0OkmChTH7uRhsBryZpEQqTNxWvYWlN1cnyBS739ReWbQcHwI3g2QTBlWatYS2pDJotIzQNKanZPT3SuGnDgv3CO0JVxhHECZ2jJSE1p4cXW5d8H+/qtdA0QMooo/3KY5PUWO1gKZTDE9giRTHxpvrzJ7DAXDQOw37bSwJIXLHP9pDwy4HFFPx9U6y6vsOWlsheyjGdMXMwLIBsQ+UWVkI1eLn3Xhp2kll664xhbez5nehMOgtlF97D44aQtuekC3vwLo6PIQ+QGxIWBUetMgUq1pKbRpNPvXaonLVTJbeIcdZMXW5lTbzCTW0sQYFLwYkJP7xIIUjMh+zjwTFwffJ6d/QUO9EbmsN/Jy1jF/J8F6h+Vpn3pw+vdpH+wUIIdFc1rT7giolKN5Lm0GqKVFAp3TQgm0yGwuv0chT31bbfbfDdgHXvLblI84MHB+AOn4ojbuS/dz4sQyhSR9uuhwcEQ2b02hbGcv1OcqP8aMSF2CoM2oKmTj45ScjlRi/l2fS7M5r/aAQNPjWqWnKT/lB737ksGe6cJWGWeht43k/dzVimxPz8Av53t/G8LPnITQ3tCrNk2OOUPEPOQb/9+vN7ztFok/O0UXz6is1P6Ixq2t7nj71swtsSnQto31Q+ebmhfXGvN4Ta9ZfyQMf4Zgn/2/Kpc9nVR7iPpuEFZnfukt1PXL8G+A==">There’s a playground here which will help as you read this.</a></p>
<p>From that playground we can derive this table, which I will explain below:</p>
<table>
<thead>
<tr class="header">
<th><code>computed</code>/<code>methods</code></th>
<th>() or not?</th>
<th><code>v-on</code> result</th>
<th><code>v-bind</code> result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>computed</code></td>
<td>no ()s</td>
<td>Not allowed</td>
<td>Works correctly</td>
</tr>
<tr class="even">
<td><code>computed</code></td>
<td><code>()</code></td>
<td>Not allowed</td>
<td>Syntax error</td>
</tr>
<tr class="odd">
<td><code>methods</code></td>
<td>no ()s</td>
<td>Works correctly</td>
<td>Not what you want</td>
</tr>
<tr class="even">
<td><code>methods</code></td>
<td><code>()</code></td>
<td>Works correctly</td>
<td>Works correctly</td>
</tr>
</tbody>
</table>
<p>If your function is defined in <code>computed</code>, then using <code>()</code> will result in a
syntax error (even though you have written a function). This is at least
consistent and can be summarized concisely. Also, a function defined in
<code>computed</code> cannot be used in a <code>v-on</code> (<code>@</code>) binding.</p>
<p>When you write your function in <code>methods</code> things get much less clear. You can
use a <code>method</code> in either a <code>v-on</code> (<code>@</code>) or a <code>v-bind</code> (<code>:</code>) binding.</p>
<p>For a <code>v-on</code> binding, you are allowed to omit <code>()</code>, and the behavior
of the function will be exactly the same with or without it. That is:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">@input</span><span class="ot">=</span><span class="st">&quot;inputMethod&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>…and:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">@input</span><span class="ot">=</span><span class="st">&quot;inputMethod()&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>…will behave the same. This is <a href="https://vuejs.org/guide/essentials/event-handling#calling-methods-in-inline-handlers">“sort of” documented</a>.</p>
<p>However, with <code>v-bind</code> binding, if you omit the <code>()</code> then you are just
returning the method reference itself as a JavaScript expression, so if you have:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">:disabled</span><span class="ot">=</span><span class="st">&quot;disabledMethod&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>…and:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;</span><span class="kw">input</span> <span class="er">:disabled</span><span class="ot">=</span><span class="st">&quot;disabledMethod()&quot;</span><span class="dt">/&gt;</span></span></code></pre></div>
<p>…then the top example will not invoke <code>disabledMethod</code> and will return the
value of the reference to <code>disabledMethod</code>, which is truthy if it exists. This
is probably not the behavior you want!</p>
<p>The bottom example will invoke <code>disabledMethod</code> and will use its result when
assigning the disabled attribute.</p>
<p>If any of this is unclear,
<a href="https://play.vuejs.org/#eNrFV1mPEz8M/ypmHhCIbfv/A09lWC7xABKHON5GQumMuxM2k4wSTw+hfneczJWW3aW7oOWhbezE9i++4v5IXtT1dNVgMk9SwqpWgvA00wBpIVdhwUsSC9VyW7JEUZymZPlTnuamqhvCYlYhlaZIZ8zz/NXE6IhYSD3u3bsPxoI29GxgMYGupWZeM6+8ldHowhTbgfQMG1GeLgYoLDxK9psxzZw7kwmkUvN5eB5+nmZJ+H3VKcmS2Sm4rSaxAbTW2Dk4RA8aHUwmB/reGwKhlFmzYGz4CCQtiHkhnXdzwTj6ZQzlWlqPMPv/FedDBG7R1ffu35qzIyxXefz2ELGl6wk8/LPADVV6ZF7uR+xdkL52Pl6Z5TfUeYTRR//eVW0i/W1n3UjrtTPt8bHuYyLqzkxF70VaD8e4SNDN+0M9PzVqVKRkZOOrk/oM7ip68ps+ffeMnoBF1yhyIDVkSSl0odBORV2rLUjn6xYELBudkzQ6S2BdooataYC2NbIQGeAXB7CQZOx0vFmE6CboQqR+xfdtVU33zt0A4y8IftfQIAAZbxAhEh2mQ7ELYYV2CIJYgS7QAskKgR0OkmChTH7uRhsBryZpEQqTNxWvYWlN1cnyBS739ReWbQcHwI3g2QTBlWatYS2pDJotIzQNKanZPT3SuGnDgv3CO0JVxhHECZ2jJSE1p4cXW5d8H+/qtdA0QMooo/3KY5PUWO1gKZTDE9giRTHxpvrzJ7DAXDQOw37bSwJIXLHP9pDwy4HFFPx9U6y6vsOWlsheyjGdMXMwLIBsQ+UWVkI1eLn3Xhp2kll664xhbez5nehMOgtlF97D44aQtuekC3vwLo6PIQ+QGxIWBUetMgUq1pKbRpNPvXaonLVTJbeIcdZMXW5lTbzCTW0sQYFLwYkJP7xIIUjMh+zjwTFwffJ6d/QUO9EbmsN/Jy1jF/J8F6h+Vpn3pw+vdpH+wUIIdFc1rT7giolKN5Lm0GqKVFAp3TQgm0yGwuv0chT31bbfbfDdgHXvLblI84MHB+AOn4ojbuS/dz4sQyhSR9uuhwcEQ2b02hbGcv1OcqP8aMSF2CoM2oKmTj45ScjlRi/l2fS7M5r/aAQNPjWqWnKT/lB737ksGe6cJWGWeht43k/dzVimxPz8Av53t/G8LPnITQ3tCrNk2OOUPEPOQb/9+vN7ztFok/O0UXz6is1P6Ixq2t7nj71swtsSnQto31Q+ebmhfXGvN4Ta9ZfyQMf4Zgn/2/Kpc9nVR7iPpuEFZnfukt1PXL8G+A==">try the playground</a>
, which will hopefully correct anything I’ve misstated.</p>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;vue.js&#39;." href="/tags/vue.js.html" rel="tag">vue.js</a>, <a title="All pages tagged &#39;javascript&#39;." href="/tags/javascript.html" rel="tag">javascript</a>
    
</div>
]]></description>
    <pubDate>Fri, 07 Feb 2025 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2025-02-07-syntax-quirks-in-vue-js.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 10: Building the VCA</title>
    <link>https://www.craigstuntz.com/posts/2024-06-24-building-a-synthesizer-10.html</link>
    <description><![CDATA[<div class="info">
    Posted on June 24, 2024
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li>10: Building the VCA</li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<h2 id="what-even-is-a-vca">What Even Is a VCA?</h2>
<p>If you have used keyboard/desktop style synthesizers but not modular synths,
you may have seen a “VCA” section of your synth before, or, depending on the
synth in question, you may have just seen a dial somewhere with a different
label.</p>
<p>A VCA allows you to use one control voltage to adjust the level of another
signal. The most common use is to use the output of an envelope generator to
adjust the level of the VCO’s output (turning an unchanging drone into a note
with an attack, decay, etc.). But there are many other uses for
a VCA!</p>
<p>Still, because the two uses above are so common, in many synthesizers the “VCA”
is represented as a “Volume” knob somewhere, or as a slider by an envelope
generator.</p>
<p>For example, here are two synthesizers with two different labels for the same
feature:</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCAJupiter8.png">
<img src="/images/synth/VCAJupiter8.png" loading="lazy" height="300px" alt="The VCA section of the Roland Jupiter 8 synthesizer. It has a continuous slider marked Level and a four position switch marked LFO Mod">
</a>
<figcaption>
Jupiter-8 VCA
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCARetroSynth.png">
<img src="/images/synth/VCARetroSynth.png" loading="lazy" height="300px" alt="The two envelopes of Logic Pro's Retro Synth plugin. Beside each of the two envelopes is a slider marked Vol">
</a>
<figcaption>
Retro Synth
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>On the left is the “VCA” section of the Roland Jupiter-8. You get two controls:
A simple level slider, and a four position switch which controls how much one of
the synth’s LFOs affects the output. On the right is the Retro Synth plugin from
Logic Pro; here the “VCA” feature is just sort of implied by the envelope and
a slider labeled “Vel” (for Velocity) to the right of
the two envelope generators. Neither of these have a “control (voltage) input,”
because they are hard-wired to the envelope and the LFO, in the case of the
Jupiter-8, and to the envelopes, in the case of Retro Synth.</p>
<p>In the modular world it’s pretty common for a VCA to be a separate module, but
you may end up using them in exactly the same way: You want to turn the endless
drone of a VCO into distinct notes, so you connect an Envelope Generator to your
keyboard’s Gate output and you connect the output of the EG into the control
voltage input of a VCA. You then connect the VCO’s output into the audio signal
input of the VCA, and the output of the VCA now has distinct notes when you
press a key. Success!</p>
<p>However, a VCA can be used for other applications; I’d recommend watching
<a href="https://www.youtube.com/watch?v=xxr5fT-E7m0">this video</a> (particularly the
last two thirds) if you’d like to see examples.</p>
<h2 id="how-a-vca-works">How a VCA Works</h2>
<p>A VCA is simply a volume knob which can be controlled using a control voltage.
The control voltage is “…typically from -2.5 V to +2.5 V (5 Vpp) for LFOs, and
from 0 V to +8 V for ADSRs,” to quote the <a href="https://doepfer.de/a100_man/a100t_e.htm">Eurorack (non-)specification</a>.
There’s usually two “volume knobs,” in series: A <em>real</em> volume knob you can set
with your fingers and an electronically controllable volume setting you set with
a control voltage.</p>
<p>We know how potentiometers work, and the “real” volume knob is just one of
those, with an op amp for isolation and gain. But how does a control voltage
controlled volume knob work? If we ccould find such a thing as a “voltage controlled
resistor,” that would do the trick. It sounds like something which could be done
with an op amp, but it would require a somewhat less common circuit, called an
operational transconductance amplifier (or OTA) instead. These tend to have an
amplifier bias or <span class="math inline"><em>I</em><sub><em>A</em><em>B</em><em>C</em></sub></span> input which will control the gain of the amplifier
based on the current going into that input. But other designs are possible, and
as we will see the MKI x ES.EDU VCA is based on individual transistors instead
of an integrated circuit like an OTA.</p>
<h2 id="breadboarding-the-vca">Breadboarding the VCA</h2>
<p>Before I start breadboarding I ususally separate out the various resistor
values, set them in order, and tape them to a piece of paper with their values
in Ohms written alongside them.</p>
<div class="highlight">
<p><strong>Important</strong>: Before you start breadboarding, carefully look at the 10k, 20k, and
100k resistors. There are two different kinds! See the section
<a href="#resistance-is-futile">“Resistance is Futile,”</a> below, for details. The manual
does not include this distinction in the Bill of
Materials nor mention it at all unitl much later. You will want to keep these
two types of resitors separate, as it will make your life easier later on.</p>
</div>
<h3 id="breadboarding-the-volume-potentiometer">Breadboarding the Volume Potentiometer</h3>
<p>The first thing we are asked to build is a volume control using just a
potentiometer. Not exciting, but the idea is that a VCA will essentially be
just controlling volume using a control voltage instead of a knob. Of course the
truth is somewhat more complex, given the need to isolate modules from each
other in terms of impedance, but we’ll get there. Anyway, having built that
we can verify that we can indeed vary the volume of a signal passing through
our not-quite-yet-voltage-controlled-amplifier by twisting the potentiometer
knob. Moving right along…</p>
<h3 id="how-a-bipolar-junction-transistor-works">How a Bipolar Junction Transistor Works</h3>
<p>If you look up a <a href="https://en.wikipedia.org/wiki/Bipolar_junction_transistor">Bipolar Junction Transistor on Wikipedia</a>
or in many electronics books, the description will start with a discussion of
“P-type” and “N-type” semiconductors, and at the end you still won’t have a
good idea of what they do. Instead, I’m going to go with what Professor Aaron
Lanterman calls the “magic elves theory,” and describe what they do without
explaining the physical implementation, instead saying, “they do it that way
because the magic elves inside make it happen.” This is actually similar to
<a href="https://blog.adafruit.com/2015/06/17/the-original-full-size-negative-of-transistor-man-that-was-used-in-the-first-edition-of-art-of-electronics-photos-electronicsbook/">the “transistor man” presentation in Horowitz and Hill’s <em>The Art of Electronics</em></a>.</p>
<p>The purpose of these kits is perhaps more
about teaching you how electronics work than it is about building
the greatest synthesizer in the world. We’ve used a couple of transistors in
the past, but we haven’t gone very deep into how the work. So, no time like the
present! <a href="https://www.ericasynths.lv/media/VCA_MANUAL_FINAL.pdf">The instructions</a>
now take a (pages-long) digression into how transistors, and
bipolar junction transistors (BJTs) in particular, work. I won’t repeat that
here, but there is a points that I found confusing which I would like to try and
clarify.</p>
<p>In the VCO kit we used a transistor as a kind of variable resistor controlled by
the base input. The VCA instructions spend a good bit of time explaining why a
transistor is not, in fact, a resistor. A transistor provides resistance,
clearly: A fairly high resistance value when no voltage is connected to the base!
You can control the amount of current passing through the device using the
voltage you connect to the base.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<p>But resist<em>ance</em> is not the same as being a good resist<em>or</em>. A
transistor is designed to allow current to (easily) flow in only one
direction, unlike a resistor, and, also unlike a resistor, a transistor will
pass a fairly steady current regardless of voltage applied to the collector.
So the transistor is not a drop-in replacement for a resit<em>or</em>, even if it was
useful to us in supplying a
voltage-controlled <em>resistance</em> when building the VCO. It’s also noteworthy that
the VCO required a resistance which varied exponentially with the input control
voltage, and thus it’s super convenient to use a transistor, which more or less
does just this. With the VCA, however, we want the volume to change linearly
with the control voltage, so we will need to be careful about how we use the
transistors.</p>
<h4 id="the-problem-with-bjts">The Problem with BJTs</h4>
<p>One problem that BJTs have is that they are not very consistent devices. Even
BJTs from the same manufacturer with the same part number will vary in how much
current they pass and the precise base thresholds that control the transistor.
They will also vary considerably with the outside temperature.</p>
<p>So, we would like to compensate for these variations. How do we do that?</p>
<h4 id="negative-feedback">Negative Feedback</h4>
<figure class="inlineRight">
<a href="/images/synth/VCAManualNegativeFeedback.png">
<img src="/images/synth/VCAManualNegativeFeedback.png" loading="lazy" width="300px" alt="A transistor with the base connected to the input signal, the collector connected to the 12V rail through a 20k resistor, and the emitter connected to ground through a 10k resistor">
</a>
<figcaption>
From the mki x es.edu VCA Manual
</figcaption>
</figure>
<p>We start with a circuit much like the one on the right but without the 10k
resistor at the bottom. Then we get to the point that I found confusing!
Moritz talks about “introducing negative feedback” by connecting a resistor
between the transistor’s emitter and ground. That’s the 10k resistor at
the bottom of the circuit at right. What I didn’t understand was: A resistor is
a passive component; how could introducing just one resistor provide <em>any</em> kind of
feedback?</p>
<p>The answer is that although the resistor is passive, the transistor is very much
not passive, and putting a resistor between the emitter and ground makes a world
of difference because it changes the behavior of the transistor. How? When the
transistor’s emitter is connected directly to ground then <em>the emitter voltage will always be at
ground,</em> no matter what the base of the transistor is set to. But when there is
a resistor between the emitter and ground, things get more complicated.</p>
<p>A transistor is “active” when the voltage between the base and the emitter is
over a certain threshold, around 0.6V. When the transistor is active, current
will pass between both the base and the emitter and the collector and the emitter
(for an NPN transistor). This current flowing out of the emitter has to flow
across the 10k resostor. When a current flows across a resistor you get a
voltage. Therefore the voltage at the transistor’s emitter is no longer being
held at ground. Instead it varies depending upon the amount of current passing
through the resistor. And this change from “voltage is fixed at ground” to
“voltage varies with the amount of current being passed out of the emitter and
across the resistor” is the key to understanding how adding just that one
resistor can be called “negative feedback.” The more current that passes through
the resistor, the higher the voltage difference across its two ends will be,
right? However, this means that the end of the resistor connected to the emitter
will be at a higher voltage, and therefore the higher the current, the lower
the difference in voltage between the transistor’s base and emitter will be…
which reduces the current! This is the negative feedback.</p>
<p>Therefore, if something changes the gain of the transistor, such as its
temperature, this circuit will have the opposite effect: More amplification
means a higher voltage at the emitter which means a lower voltage from base to
emitter which means a lower gain!</p>
<h4 id="another-way-to-look-at-negative-feedback">Another Way to Look At “Negative Feedback”</h4>
<p>One of the things that confused me about the directions use of the phrase
“negative feedback” is that I hadn’t seen this phrase in other tutorials about
transistor amplification. But once I
understood what he meant by negative feedback I could line up what he was
saying with other explanations. So now I
will explain this in a different way, but I will be describing the same
“negative feedback” mentioned above. It helps me to have multiple ways to
consider the same phenomenon.</p>
<p>In this section I’m summmarizing the explanation from
<a href="https://www.mheducation.com/highered/product/practical-electronics-inventors-fourth-edition-scherz-monk/9781259587542.html"><em>Practical Electronics for Inventors, Fourth Edition,</em></a>
by Scherz and Monk.</p>
<p>The gain of a transistor, by definition, is:</p>
<p><span class="math display">$$ \begin{align} Gain = \cfrac {V_{out}} {V_{in}} = \cfrac {\Delta V_{C}} {\Delta V_{E}} \approx \cfrac {R_{C}} {R_{E}} \end{align} $$</span></p>
<p>Where <span class="math inline"><em>V</em><sub><em>C</em></sub></span> is equal to the voltage at the collector, <span class="math inline"><em>R</em><sub><em>C</em></sub></span> is equal to the
resistance at the collector, and similarly for the emitter. However, that’s not
quite the full story, because a transistor has a small internal
<a href="https://en.wiktionary.org/wiki/transresistance">transresistance</a>
in its emitter region, and one way you can think about thermal instability in a
transistor is that the transreistance changes with temperature. So a somewhat
more accurate model is:</p>
<p><span class="math display">$$ \begin{align} Gain \approx \cfrac {R_{C}} {R_{E} + r_{tr}} \end{align} $$</span></p>
<p>Where <span class="math inline"><em>r</em><sub><em>t</em><em>r</em></sub></span> is the transresistance value, which, again, is not constant. This
is not 100% accurate as there is some small current flowing from the base to the
emitter. But this does tell us that we can minimize the effect of <span class="math inline"><em>r</em><sub><em>t</em><em>r</em></sub></span> by
making <span class="math inline"><em>R</em><sub><em>E</em></sub></span> comparatively large relative to it.</p>
<p><span class="math display">$$ \begin{align} r_{tr} \approx \cfrac {0.026 V} {I_E} \end{align} $$</span></p>
<p>How much is that? Well, we have <span class="math inline"><em>I</em><sub><em>E</em></sub></span> <em>apporximately</em> 600 μA, which works out to
arount 46Ω. So a 10KΩ resistor should make its effects very small indeed. Scherz
and Monk say, “In practice, <span class="math inline"><em>R</em><sub><em>E</em></sub></span> should be chosen to place <span class="math inline"><em>V</em><sub><em>E</em></sub></span> around 1 V
(for temperature stability and maximum swing in the output). Here we’re around
6V, but note that in the very next step we will be reducing the voltage at the
emitter!</p>
<h3 id="breadboarding-a-one-transistor-vca">Breadboarding a One Transistor VCA</h3>
<p>So now let’s build a VCA (with actual voltage control, not just a
potentiometer). It looks like this:</p>
<figure>
<a href="/images/synth/VCAOneTransistor.jpg">
<img src="/images/synth/VCAOneTransistor.jpg" loading="lazy" width="600px" alt="A breadboard showing a simple, one-transistor VCA circuit. We can see a BJT, a DIP op amp package, a potentiometer, and a 1/8 inch jack.">
</a>
<figcaption>
Single Transistor VCA
</figcaption>
</figure>
<p>When we look at the output on a scope, though, the results are not so great:</p>
<figure>
<a href="/images/synth/VCAOneTransistorScope.png">
<img src="/images/synth/VCAOneTransistorScope.png" loading="lazy" width="600px" alt="An oscilloscope screen capture showing a yellow trace with a square wave, a magenta trace with the same square wave although much fuzzier and lower in amplitude, and a cyan trace which is the magenta trace inverted">
</a>
<figcaption>
Single Transistor VCA Output
</figcaption>
</figure>
<p>The yellow trace here is the output of a function generator I’m using as my
“signal.” This is like the audio signal I would be running through the VCA in
the real world. The magenta trace is the input into the base, and the cyan trace
is the VCA’s output at the jack. These last two look “blurry,” but note that the
vertical scale on the oscilloscope is much smaller for them. (20mV/div vs. 1V/div.)</p>
<h3 id="breadboarding-a-differential-amplifier">Breadboarding a Differential Amplifier</h3>
<p>There are a few problems with the circuit we have built so far:</p>
<ul>
<li>Poor amplification (low gain)</li>
<li>It’s noisy</li>
<li>The output is inverted</li>
<li>It’s still sensitive to temperature variation in the resistors, even though
we have improved things by adding the resistor at the emitter</li>
<li>When we change the CV signal, the DC offset of the audio output changes</li>
</ul>
<p>Moritz proposes to fix all of this by using a
<a href="https://electrosome.com/differential-amplifier-transistors/">differential pair</a>
of transistors. So first we add a second transistor and arrange both in a
differential pair.</p>
<figure>
<a href="/images/synth/VCATwoTransistors.jpg">
<img src="/images/synth/VCATwoTransistors.jpg" loading="lazy" width="600px" alt="A breadboard containing a cirucit with two transistors, a DIP chip with some op amps, a jack, a potentiometer, and a bunch of resistors">
</a>
<figcaption>
Two Transistor VCA
</figcaption>
</figure>
<p>Now we get two outputs, which are in opposite phase:</p>
<figure>
<a href="/images/synth/VCATwoTransistorsScope.png">
<img src="/images/synth/VCATwoTransistorsScope.png" loading="lazy" width="600px" alt="An oscilloscope screen capture showing a yellow trace with a square wave, a magenta trace with the same square wave although much fuzzier and lower in amplitude, a cyan trace which is output from one transistor and a green trace which is the output from another transistor">
</a>
<figcaption>
Two Transistor VCA Output
</figcaption>
</figure>
<p>Adding a couple more transistors and the second op amp (in the same IC package
as the first one), we can combine the two signals, subtracting them to produce
the difference between them (hence, differential pair). This is an op amp
configuration which I didn’t show in
<a href="2023-04-03-building-a-synthesizer-4.html">my op amp tutorial</a>, so here it is:</p>
<figure>
<a href="/images/synth/VCAOpAmpSubtractor.png">
<img src="/images/synth/VCAOpAmpSubtractor.png" loading="lazy" width="600px" alt="A schematic of a subtractor configuration of an op amp.">
</a>
<figcaption>
Subtractor
</figcaption>
</figure>
<p>If you’ve read that tutorial, you’ll understand how this works. It’s exactly the
same as an inverter configuration, except instead of having the non-inverting
(‘+’) input tied to ground, instead the non-inverting input of the op amp is
connected to another signal input, via a voltage divider. Without going into
too much detail in this post,<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> it hopefully makes sense if you think that when
the non-inverting input is at ground this is exactly an inverter, because
0/ground minus the inverting input is the opposite of the inverting input.</p>
<p>Anyway, with the op amp outputting the difference of the two transistor signals,
our trace now looks like:</p>
<figure>
<a href="/images/synth/VCASubtractedTrace.png">
<img src="/images/synth/VCASubtractedTrace.png" loading="lazy" width="600px" alt="Oscilloscope showing a cyan trace in the foreground which is the subtraction of the two diode outputs">
</a>
<figcaption>
Subtractor Output
</figcaption>
</figure>
<figure class="inlineRight">
<a href="/images/synth/VCABreadboardFinished.jpg">
<img src="/images/synth/VCABreadboardFinished.jpg" loading="lazy" width="300px" alt="A breadboard with the completed VCA, which looks very much like the incomplete VCAs except for the addition of a few more resistors and a trimpot">
</a>
<figcaption>
Completed VCA
</figcaption>
</figure>
<p>The next step is to add a trimpot which allows adjustment to compensate for
small manufacturing differences between the two transistors. Even when both
transistors are at precisely the same temperature, two different transistors
of the same lot from the same manufacturer may vary in their gain. One way
around this is to buy a matched set of transistors in an IC package. Another way
around this is to add a trimpot:</p>
<figure>
<a href="/images/synth/VCAWithTrimpotTrace.png">
<img src="/images/synth/VCAWithTrimpotTrace.png" loading="lazy" width="600px" alt="Oscilloscope traces showing a now vertically centered output in cyan in the foreground">
</a>
<figcaption>
Subtractor with Trimpot
</figcaption>
</figure>
<p>Finally we change some resistor values to make the last op amp in the signal
chain boost the amplified signal up to a 10V peak to peak output.</p>
<p>I realize the signal looks quite noisy. Some of that is real, because
breadboards tend to be pretty noisy. Some of that is due to the high
magnification of the output signal vs. the function generator signal. Here it is
with the same vertical scaling:</p>
<figure>
<a href="/images/synth/VCASameVerticalScaling.png">
<img src="/images/synth/VCASameVerticalScaling.png" loading="lazy" width="600px" alt="Oscilloscope traces at equal verticl scaling; the output now appears less noisy compared to the input">
</a>
<figcaption>
At Equal Vertical Scaling
</figcaption>
</figure>
<h2 id="soldering-it-all-together">Soldering It All Together</h2>
<p>One curious fact about this project is that even though you are building
essentially two entirely separate VCAs, they are laid out differently on the
PCB. I’m not sure why this is the case; perhaps it has something to do with
where the sockets and potentiometers would have landed. But it’s necessary to
be very careful when selecting parts, because the layouts are <em>mostly</em> the same,
except where they’re different.</p>
<h3 id="resistance-is-futile">Resistance is Futile</h3>
<figure class="inlineRight">
<a href="/images/synth/VCAResistors.jpg">
<img src="/images/synth/VCAResistors.jpg" loading="lazy" width="300px" alt="A bunch of resistors, with 0.1% tolerance resistors on the right with just a tiny difference in shade from the 1% resistors on the left.">
</a>
<figcaption>
1% Resistors on Left, 0.1% Resistors on Right. Can you distinguish the light blues?
</figcaption>
</figure>
<p>Soldering on the resistors was unexpectedly complicated.</p>
<p>The manual notes that some of the resistors need to be closely matched, and
therefore they have supplied <em>a few</em> ±0.1% tolerance resistors where they need
to be as close as possible. This is really helpful, but it would have been even
more helpful if they had mentioned it prior to page 51 of the manual! As above,
I didn’t notice this difference when breadboarding and had to sort out the
differently specced resistors.</p>
<p>The manual states:</p>
<blockquote>
<p>You can identify these <strong>±0.1% tolerance resistors by their light blue bodies</strong></br>
[emphasis in original]</p>
</blockquote>
<p>There is a difference in the blue, but it’s quite subtle.
The ±0.1% and the ±1% resistors look near-identical, and I therefore had a bunch of
sorting parts to do from my breadboard assembly (made even more complicated by
the fact that 100Ω and 100kΩ resitors also look near-identical when you test them
with a multimeter, and their color codes aren’t that distinct, either).</p>
<p>Adding to the “light blue woes,” the colors in the photo in the manual (left,
below) don’t match the tolerances in the layout diagram (right)!</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCAManualPhoto.jpg">
<img src="/images/synth/VCAManualPhoto.jpg" loading="lazy" width="400px" alt="This photo from the manual shows a bunch of resistors with different shades of blue, which don't match the tolerances specified in the parts diagram.">
</a>
<figcaption>
Photo from Manual
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCAManualDiagram.png">
<img src="/images/synth/VCAManualDiagram.png" loading="lazy" width="400px" alt="The same resistors in the parts layout diagram.">
</a>
<figcaption>
Diagram from Manual (Red Circles in Original)
</figcaption>
</figure>
<div style="clear: both;">

</div>
<p>A <strong>much better way of distinguishing these different kinds of resistors</strong>
(unmentioned in the manual!) is the
fact that <em>the resistor tolerance is encoded in the color band code.</em> So a 1%
tolerance 100k resistor will be “Brown Black Black Orange <strong>Brown</strong>” whereas a
100k 0.1% tolerance resisotor will be “Brown Black Black Orange <strong>Violet</strong>”</p>
<figure class="inlineRight">
<a href="/images/synth/VCATransistorTester.jpg">
<img src="/images/synth/VCATransistorTester.jpg" loading="lazy" width="100px" alt="A component tester with a transistor in it. The screen reads Transistor(NPN), hFE=536, Vbe=0.79V, Ic=7.4mA">
</a>
<figcaption>
Measuring a Transistor
</figcaption>
</figure>
<h3 id="choosing-transistors">Choosing Transistors</h3>
<p>Most of the rest of the soldering was uneventful, but when it came time to
attach the transistors I wanted to match them as closely as possible. I have a
component tester which I used to measure the hFE of all four transistors
included in the kit; their values were 524, 536, 552, and 572. So I paired the
524 &amp; 536 and the 552 &amp; 572 transistors.</p>
<h3 id="which-way-does-the-front-panel-go">Which Way Does the Front Panel Go?</h3>
<p>At one point the manual says to attach the front panel, but this kit has two
perfectly symmetrical VCAs and there are two possible ways to attach the front
panel! Only one way will result in the jacks going into their labeled spaces on
the front panel, though (with the “IN1” jack going into the hole labeled “IN1”),
so be careful and check the labels on the board when attaching this.</p>
<p>After attaching the front panel, the last step is to insert the two TL072 ICs.
I always get a little nervous when I do these, because if you insert them the
wrong way you will cook the ICs when you power them up. The two ICs are aligned
differently on the board, the photo in the manual is unclear, and the “notch” on
the IC doesn’t match the notch on the socket, so you will want to triple-check
this before you move on.</p>
<h2 id="powering-up">Powering Up</h2>
<p>Mortiz suggests first testing the VCA using an oscillator
(<a href="/posts/2023-03-02-building-a-synthesizer-3.html">which I have</a>) and
just seeing if the “Offset” potentiometers work correctly, so I did that, and
it sounded fine. Then you’re supposed to adjust the trimpots to center the
oscillation around ground. This is mentioned way back in the breadboarding
section of the manual, but it’s important to set your oscilloscope to DC coupled
when doing this adjustment. If the trace doesn’t move when you adjust the
trimpot then you probably have the oscilloscope input set to AC coupled.</p>
<p>I had to fix a cold solder joint. It took me longer to find than it should have.
Hint to future me: If something that used to work stops working, start your
search with the jack socket into which you’ve just plugged a cable. One thing that
confused me while I was fixing this was a feature I didn’t know the VCA had:
IN1 is normalled to IN2, so you can use one input for both VCA sections (and
similarly with CV1 &amp; CV2). This is mentioned in the manual, but only in the
appendix.</p>
<p>In the trace below, there is a sawtooth waveform from the VCO connected to IN1,
and nothing connected to IN2 (so the IN1 signal is normalled to the second VCA).
The Offset knobs are set to different positions. The yellow trace is OUT1 and
the purple trace is OUT2. I’m pleased that there is far
less noise in this (the PC board version of the VCAs) than there was in the
breadboard version.</p>
<figure>
<a href="/images/synth/VCANormalled.png">
<img src="/images/synth/VCANormalled.png" loading="lazy" width="600px" alt="Oscilloscope traces showing a purple trace and a yellow trace with the same signal at two different amplitudes">
</a>
<figcaption>
VCA Outputs
</figcaption>
</figure>
<p>With that finished, I now have a more or less functional synthesizer! There is
no filter (yet!), but I can play a note and have an envelope which sounds nice.
I’m very happy with the progress I’ve made!</p>
<figure class="horizontalTiles">
<a href="/images/synth/VCAFinishedFront.jpg">
<img src="/images/synth/VCAFinishedFront.jpg" loading="lazy" width="400px" alt="Photo of the front panel of the finished VCA. The single module has 2 VCAs. Each has an Offset potentiometer, and IN, CV, and OUT jacks">
</a>
<figcaption>
Front
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/VCAFinishedRear.jpg">
<img src="/images/synth/VCAFinishedRear.jpg" loading="lazy" width="400px" alt="Photo of the rear of the VCA. You can see a Eurorack power connector, blue trimpots, transistors, ICs for the op amps, capacitors, and a whole bunch of resistors">
</a>
<figcaption>
Rear
</figcaption>
</figure>
<div style="clear: both;">

</div>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCA_MANUAL_FINAL.pdf">mki x es.EDU VCA User Manual</a></li>
</ul>
<h3 id="product-pages">Product Pages</h3>
<ul>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vca/">EDU DIY VCA</a></li>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">mki x es.EDU DIY System</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://modwiggler.com/forum/viewtopic.php?p=3771212">Modwiggler thread</a></li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-vca">Modulargrid page</a></li>
</ul>
<h3 id="simulations">Simulations</h3>
<p>All of these simulations are by Moritz Klein</p>
<ul>
<li><a href="https://tinyurl.com/y8dbcu2q">Voltage Dividers</a></li>
<li><a href="https://tinyurl.com/y9kqbqnj">Transistor vs. Resistor</a></li>
<li><a href="https://tinyurl.com/ycdpkfnq">Transistor Amplifiers</a></li>
<li><a href="https://tinyurl.com/yd9lavjv">The Emitter Resistor</a></li>
<li><a href="https://tinyurl.com/y7ctexrd">Gain Changing Tricks</a></li>
<li><a href="https://tinyurl.com/yd7shjwz">The Differential Amplifier</a></li>
<li><a href="https://tinyurl.com/y7gxgq23">The Differential Amplifier (with Signal Subtraction)</a></li>
<li><a href="https://tinyurl.com/y7kh5c72">The Differential Amplifier (with Mismatch Fix)</a></li>
<li><a href="https://tinyurl.com/yce5ddsh">The MKI x ES.EDU VCA</a></li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=yMrCCx6uqcE">Designing a classic transistor-VCA from scratch</a>
by Moritz Klein (48:42)</li>
<li><a href="https://www.youtube.com/watch?v=NuS8slR2Ue0">Introducing the mki x es.edu DIY VCA kit</a>
by Moritz Klein (6:19)</li>
<li><a href="https://www.youtube.com/watch?v=xxr5fT-E7m0">MK1 vs es.EDU Dual VCA - Build and Demo</a>
by Quincas Moreira (31:04)</li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Yes, I said <em>voltage.</em> bipolar junction transistors, despite
popular mythology,
<a href="https://www.youtube.com/watch?v=sIDD_GeF7eo">are voltage-controlled devices</a>.
What’s more, I’m not just being pedantic here; this will become important in the
discussion which follows.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Here’s <a href="https://www.youtube.com/watch?v=TBSvsbjAUWg">a nice tutorial on using op amps in a subtractor configuration</a>.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>, <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Mon, 24 Jun 2024 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2024-06-24-building-a-synthesizer-10.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 9: A Field Guide to Oscillators</title>
    <link>https://www.craigstuntz.com/posts/2024-02-21-building-a-synthesizer-9.html</link>
    <description><![CDATA[<div class="info">
    Posted on February 21, 2024
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li>9: A Field Guide to Oscillators</li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>If you own a synthesizer, or have worked with software synthesizer plugins, you
have no doubt encountered the term “VCO” or “Voltage Controlled Oscillator,”
and indeed
<a href="2023-03-02-building-a-synthesizer-3.html">we have seen it before in this series</a>.
Today most synthesizers are fully digital and just have “oscillators,” which produce
arbitrary waveforms using a computer, but you may also encounter “DCOs” or
perhaps just “Oscillators,” and wonder if these names actually mean
anything distinct.</p>
<p>In this post I’ll explain the “oscillator” part of how synthesizers produce
sound, look at three designs for actually building an oscillator, and talk about
the differences in sound that you may hear from these designs.</p>
<h2 id="voltage-controlled-oscillators">Voltage Controlled Oscillators</h2>
<p>I won’t spend a ton of time explaining how a VCO works because
<a href="2023-03-02-building-a-synthesizer-3.html">I’ve already done that</a>. For the sake
of this post I’ll just say that the entire oscillator, including both the
control of the tuning/timing as well as the shape of the wave produced, is analog.</p>
<p>The earliest commercial synthesizers,<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> such as Moogs, ARPs, and
Buchlas from the 1960s all used VCOs.</p>
<p>One of the major downsides of a VCO is you have to tune it. A lot. Some later
commercial synths with VCOs introduced an automatic tuning feature which helps
considerably, but they will still drift as you play them due primarily to
temperature changes but also due to aging of electronic componaents and the
inherent differences between two “identical” components. Two transistors from
the same manufacturer with the same model number and made in the same production
run can have very different electrical characteristics, for example. Also, as the name
suggests, they are <em>Voltage Controlled,</em> that is, controlled with an analog
voltage which might be produced by a keyboard or a sequencer, and there is
no single standard for control voltages, so you have to tune the VCO to produce
the correct note when you, for example, press keys on your keyboard.</p>
<p>On the other hand, VCOs often sound <em>amazing,</em> and the tuning drift may be part
of the reason! One surefire way to fatten up nearly any synthesizer sound is to
add another oscillator and <em>detune</em> the second oscillator so it doesn’t produce
precisely the same frequency as the first. Make it “fatter” still by using a
LFO (Low Frequency Oscillator) to vary the detuning over time just a bit. Our
ears hear this difference in frequencies as a beating sound
which might be pleasant or unpleasant, depending upon the amount of difference
between the two oscillators. Do this with two VCOs and there will be a certain
amount of drift between the two oscillators <em>as you play,</em> and this can be a
very pleasant sound. For a while, anyway, until it goes <em>way</em> out of tune and
you have to stop playing and retune it.</p>
<p>VCOs are said to have a characteristic sound due both to a limitation in the
waveshapes which are used (typically, square, sine, sawtooth/ramp, triangle,
and a few others) and also due to the variations in tuning. Happily, though,
many people really like the sounds that they produce.</p>
<h2 id="digitally-controlled-oscillators">Digitally Controlled Oscillators</h2>
<p>A DCO still produces an individual cycle of oscillation using analog electronics,
but uses a digital timer (typically controlled via a microcontroller) to trigger
each cycle. This allows the DCO to always have “perfect pitch.” Like a VCO, a DCO is also an
analog oscillator which uses analog circuits to produce the wave shape that you
hear.</p>
<p>A DCO will never require tuning. The note “A 440” will always sound at 440 Hz.
You can detune a DCO, which as above you might do if using two oscillators
together to produce a fatter sound. But there will not be any random “drift” in
the tuning.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<p>The first synth with a DCO was the Roland Juno-6, which was available in
1982.<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> DCO-based oscillators are not so common today. The majority of
commercial synthesizers are digital, and folks looking for an “authentic”
analog sound often want a VCO in spite of tuning headaches.</p>
<p>Essentially, the way a DCO works is the microcontroller sends a signal to the
analog circuit when it’s time to produce each cycle of the waveform. You can
think of a microcontroller sending a pulse every 1/440th of a second to produce
an “A” note. From there an analog circuit produces a single cycle in almost
exactly the same way that a VCO does, and then it stops and waits for the next
pulse from the digital controller.</p>
<p>I would explain how a DCO is implemented in hardware, but
<a href="https://blog.thea.codes/the-design-of-the-juno-dco/">Thea Flowers has already done a much better job of this than I ever could</a>, so if you’re interested (and it is <em>very</em> interesting, I think!)
then I recommend you go read her article!</p>
<p>Conceptually, the only “audible” difference between a DCO and a VCO is that the
DCO will never drift in the
tuning of its fundamental frequency. From a practical, real-world standpoint,
however, they might be implemented with different components and hence sound
very distinct, and even two “identical” analog oscillators can sound different
because of the difference between “identical” analog parts. Also, VCOs, as noted,
<em>do</em> drift in pitch, and this also makes them sound different than a DCO.</p>
<h2 id="digital-synthesis">Digital Synthesis</h2>
<p>Digital Synthesis produces a sound by using a computer program to produce
a waveform digitally. This includes samplers/sample players, all software
synthesizers, and “virtual analog” synths which use clever programming to try
to reproduce the sound of a VCO or DCO.
<a href="https://www.whippedcreamsounds.com/uhe-diva-review/">Some of them do it quite well!</a></p>
<p>The first mainstream digital synthesizers were <a href="https://www.youtube.com/watch?v=3TT5nAW8gi4">the Casio VL-1 in 1979</a>, which was
something of a toy but considerably cheaper than the other digital synthesizers
available at that time which were &gt; $10000 in 1980 dollars. Other notable
milestones in making digital synthesis a mainstream technique were the E-mu
Emulator, released in 1982, and the Yamaha DX-7, in 1983.</p>
<p>The sound of a digital “oscillator” will be precisely what its programmers
specify. This could be a perfect sine wave, playback of a sample,
a modeled recreation of an analog oscillator, small slices of a sample as with a
<a href="https://blog.native-instruments.com/what-is-wavetable-synthesis/">wavetable synthesizer</a>,
or many other things. A digital synthesizer will have a Digital to Analog
Converter (DAC) in its signal path; a VCO or DCO based synth will not require
this.</p>
<p>Some people will tell you that they can hear the digital “stepping” as, for example, a
16 bit, 44.1 kHz digital oscillator changes its output through its 65,536 possible
amplitudes over every 1/44100s. I will tell you that these people are wrong, and
that they cannot hear this.<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> However, they <em>may in fact</em> hear the
difference between a VCO and a “perfect” digital recreation of the “same” VCO,
because, once again, even two “identical” VCOs may sound different because of
differences between the analog parts, their variance with temperature, etc.</p>
<p>While it’s both theoretically and practically possible for a digital oscillator
to reproduce the sound of an analog oscillator well, there’s no denying that
many synth manufacturers have not bothered to do it well. Sometimes this is on
purpose; a wavetable synth, for example, is not <em>trying</em> to reproduce the sound
of a VCO. But even in cases where a synth manufacturer explicitly claims to
have an “analog sound” from their digital oscillators, well, some of them do
it better than others.</p>
<h2 id="synthesizers-today">Synthesizers Today</h2>
<p>The majority of hardware synthesizers, and <em>all</em> software synthesizers, sold
today are digital. Digital oscillators are quite common even in the modular
synthesis world. However, there are still fully analog hardware synthesizers
produced, in keyboard, desktop, and modular forms, generally with VCOs.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Yes, I’m aware that there were earlier synthesizers; the market
for “mass produced” syntesizers took off in the 1960s-early 1970s.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>In principle it would be possible to make a DCO reproduce the sound of
a VCO exactly by programming the microcontroller to have VCO-like drift in its
tuning. In practice I’ve never seen a DCO-based synth do this, although it’s a
fairly common technique in “virtual analog” digital synths. Note also that
with any synth it’s quite common for preset designers to use the synth’s LFOs to
modulate the pitch a little (or a lot, as with vibrato), but this is a different
effect than the analog variations which are characteristic of a VCO and might
be emulated by a digital synthesizer. So in practice DCO-based synths sound
somewhat different from VCO-based synths, even if in principle they <em>could</em>
sound the same.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>I have seen claims online that the ARP Pro Soloist (1972) has a DCO,
including claims that it was <em>the first</em> commercial synth to use DCOs. I
have also seen schematics for the Pro Soloist online and as far as I can tell
these claims are incorrect. Never trust anything you find on the Internet, kids.<a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>See, for example, the
<a href="https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem">Nyquist theorem</a>
which shows that there is no difference between a properly dithered digital
recreation of an analog signal and the original analog signal at audible
frequencies, and before you tell me that your golden ears can hear sounds only
audible to dogs please consider that most synthesizer presets are low-pass filtered
down to frequences which all of us can hear. This is a complicated topic both
because there is in fact an actual audible difference between “identical” analog
VCOs as well as the metric tons of horse poop produced by the “audiophile” press
on the subject.<a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>, <a title="All pages tagged &#39;oscillators&#39;." href="/tags/oscillators.html" rel="tag">oscillators</a>
    
</div>
]]></description>
    <pubDate>Wed, 21 Feb 2024 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2024-02-21-building-a-synthesizer-9.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 8: Building the Envelope Generator</title>
    <link>https://www.craigstuntz.com/posts/2024-01-31-building-a-synthesizer-8.html</link>
    <description><![CDATA[<div class="info">
    Posted on January 31, 2024
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li>8: Building the Envelope Generator</li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>At this point, I’ve built an oscillator, which makes sound, but one issue it has
is that it never <em>stops</em> making sound. It just runs forever, making a constant,
unchanging drone, and that makes it difficult to play interesting music. Playing
distinct notes is going to require two more
modules: An <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-eg/">Envelope Generator</a>
and a <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vca/">Voltage Controlled Amplifier</a>.</p>
<p>It doesn’t really matter what order you build these in, but I decided to build
the EG next because there are two of them in the full kit, and I wanted to space
them out as much as possible.</p>
<h2 id="what-even-is-an-envelope-generator">What Even Is an Envelope Generator?</h2>
<p>An envelope allows you to vary the behavior of a sound over time. They’re
frequently used to vary the volume, pitch, and filter cutoff of a sound, but
really they can vary any parameter of a synth. As noted above, without an
envelope your oscillator will just run forever, which most people don’t find
musically pleasing!</p>
<p>Here’s an envelope from the Logic Pro Retro Synth<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> plugin, which is similar to
the envelopes you’ll find on many non-modular keyboard synthesizers:</p>
<figure class>
<a href="/images/synth/LogicProVintageSynthAmpEG.png">
<img src="/images/synth/LogicProVintageSynthAmpEG.png" loading="lazy" width="400px" alt="The AMP ENV from Logic Pro. We can see an attack, decay, sustain, and release setting on a visual graph. There is a volume slider to the right.">
</a>
<figcaption>
Retro Synth Amp Env
</figcaption>
</figure>
<p>“A, D, S, and R,” in this picture, refer to “Attack, Decay, Sustain, and
Release,” the four parameters of the envelope generator. This is the most common
kind of envelope generator. If you’re not familiar with these parameters then
I’d recommend <a href="https://www.perfectcircuit.com/signal/learning-synthesis-envelopes-1">reading this article</a>
before continuing.</p>
<p>This looks superficially similar to the envelope generator that we’ll be
building, but it differs in some important aspects:</p>
<ul>
<li>The Retro Synth “envelope” is really more equivalent to a modular EG, VCA,
and Mixer all wired together. There is some complexity hidden here.</li>
<li>The Retro Synth envelope shown here is for amplitude (note volume) control
<em>only.</em> (Retro Synth has a separate envelope which is hard-wired to filter
cutoff or VCO pitch.) If you wanted to use an EG to modulate some other
control, such as the effect mix, well, you can’t do that in Retro Synth. The
EG module, on the other hand, can be connected to any other module with a
CV input. (Some software synths are more flexible than Retro Synth in this
respect and allow you to use an envelope to modulate any synth parameter.)</li>
<li>With the Retro Synth envelope it’s possible to have a slow attack followed by
a slow decay. As we’ll see, the mki x es.EDU module can’t do this, because it
would have made the circuit more complex.</li>
<li>The Retro Synth envelope’s attack, decay, and release rate controls are
linear; the attack, for example, increases as a straight line. The
mki x es.EDU envelope generator, on the other hand, follows a curve, which
looks approximately logarithmic. Both sound fine, but you’ll hear the
difference, especially with a slow setting.</li>
</ul>
<p>One thing which is common to nearly every synth envelope but might not be
obvious to people who have not used them is that the controls here are:</p>
<ul>
<li>Attack <em>time</em></li>
<li>Decay <em>time</em></li>
<li>Sustain <strong><em>level</em></strong></li>
<li>Release <em>time</em></li>
</ul>
<p>One of these things is not like the other! This will turn out to be surprisingly
important in the discussion below.</p>
<p>When using an envelope to control the note volume, you can change the shape of
a note to be like an organ, which goes to full volume when you press a key and
turns the note off when you release it:</p>
<figure class>
<a href="/images/synth/VintageSynthOrganEnv.png">
<img src="/images/synth/VintageSynthOrganEnv.png" loading="lazy" width="400px" alt="An organ has a very short attack, no decay, sustain at 100%, and a very short release.">
</a>
<figcaption>
Retro Synth Organ Envelope
</figcaption>
</figure>
<p>…or a piano, where the note spikes briefly to full volume and then fades,
eventually to nothing, as you hold the key. If you release the key during the
decay the volume will immediately drop to nothing:</p>
<figure class>
<a href="/images/synth/VintageSynthPianoEnv.png">
<img src="/images/synth/VintageSynthPianoEnv.png" loading="lazy" width="400px" alt="A piano has a very short attack, a slow decay, sustain at 0%, and an instant release.">
</a>
<figcaption>
Retro Synth Piano Envelope
</figcaption>
</figure>
<p>A real piano has a somewhat more complex decay, but the Retro Synth envelope
can only do a linear decay. Other synths can do an exponential or arbitrary
decay shape which will more accurately model a piano.</p>
<p>It’s pretty common to have envelopes which aren’t really modeled after acoustic
instruments, for example with a “pad” sound. This might have a slow attack, a
slow decay, sustain at 75%, and a slow release:</p>
<figure class>
<a href="/images/synth/VintageSynthPadEnv.png">
<img src="/images/synth/VintageSynthPadEnv.png" loading="lazy" width="400px" alt="A pad envelope">
</a>
<figcaption>
Retro Synth Pad Envelope
</figcaption>
</figure>
<p>As noted, this is one of two envelopes in the Retro Synth plugin, which is
quite simple and lacks a modulation matrix. Other synth
plugins have additional envelopes which can be arbitrarily routed to modulate
any parameter on the synth via a <a href="https://support.apple.com/guide/logicpro/use-the-mod-matrix-lgsifc8644a6/mac">modulation matrix</a>.</p>
<h2 id="modular-envelope-generators">Modular Envelope Generators</h2>
<p>With an Envelope Generator <em>module,</em> you can accomplish these uses by connecting
them to other modules:</p>
<table>
<colgroup>
<col style="width: 45%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>Envelope use</th>
<th>Modular equivalent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Change volume of note as it’s held</td>
<td>EG connected to Voltage Controlled Amplifier</td>
</tr>
<tr class="even">
<td>Change filter cutoff as note is held</td>
<td>EG connected to Voltage Controlled Filter</td>
</tr>
<tr class="odd">
<td>Change pitch of note as note is held</td>
<td>EG connected to VCO pitch CV input</td>
</tr>
</tbody>
</table>
<p>On a standard synthesizer you might have a separate envelope for each of these,
a switch on the envelope, or a modulation matrix to choose between these
functions. With a modular syntesizer, there is “just” an envelope generator, but
you need to connect it to some other module to get it to do anything useful.<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<p>A keyboard suitable for controlling a modular synth will have a “Gate” output
which goes high when a key is pressed and low when the key is released. (Again,
you don’t get chords, at least not without a surprisingly large amount of work.)
So if you press a key for half a second and then release the key for half a
second and repeat that cycle forever, the Gate output will look like a square
wave with the low voltage at 0V and the high voltage at… well, it depends on the keyboard.</p>
<h3 id="the-eurorack-standard-redux">The Eurorack “Standard,” Redux</h3>
<p>Reviewing
<a href="https://www.modwiggler.com/forum/viewtopic.php?t=259994">some of the online comments</a>,
it seems that a few people had trouble with this module. Based on some of
the comments there, it seems that once again people are getting bitten by the
fact that the “Eurorack standard” is anything but! To be more precise, different
keyboards and sequencers put out differing voltages on their Gate/Trigger output.</p>
<p>To quote from the Doepfer <a href="https://doepfer.de/a100_man/a100t_e.htm">A-100 Technical Details</a>
document:</p>
<blockquote>
<p>The gate level +5V shown in the picture is only an example. Within the A-100
usually any voltage beyond about +3V is treated as “high” (e.g. +5V, +8V,
+10V, +12V will work) and will trigger an ADSR or any other module with a Gate
or Clock input (e.g. trigger delay, sequencer, clock divider, clock
sequencer). Any voltage below 1V is treated as “low”. If the specification of
a module differs from this voltage standard it is mentioned in the description
of the module in question.</p>
</blockquote>
<p>The circuit in the mki x es.EDU Envelope Generator is designed to trigger at
3.8V. Quoting from the manual:</p>
<blockquote>
<p>I’ve set up a voltage divider to get our reference voltage. A 100k/47k
combination gives us approximately 3.8 V to work with. So whenever our input
voltage is higher than that, the comparator’s output will jump to +12 V. And
if it’s lower, it drops down to –12 V. Why did I choose that exact threshold?
To be honest, mostly just because I had packs of 100k and 47k resistors lying
on my table when I was testing this. But I still feel that 3.8 V is a
decent value here.</p>
</blockquote>
<p>Given the fuzziness of the specification, “because I had these packs of
resistors conveniently at hand” is as good of a reason as any, and meets the
Doepfer requirements.</p>
<p>I measured the output of my Novation SL MkIII’s Gate output, and it’s 5 V. People
on <a href="https://www.modwiggler.com/forum/viewtopic.php?t=259994">the previously referenced thread</a>
claim that the <a href="https://www.youtube.com/watch?v=p5RSIWbZ6Vc" 
title="B*hr*ng*r: The Edgelords Of Music Production">B*hr*ng*r</a> Neutron is only 3.3 V. Which
“kind of almost” conforms to the Doepfer text (“usually/about”!), but is
apparently low enough to cause some heartache with this kit.</p>
<p>The instructions for the kit say:</p>
<blockquote>
<p>To properly test this circuit, you’ll need a square wave LFO and a module
with a CV input like a VCF.</p>
</blockquote>
<p>In light of the above, you would want to consider your inputs carefully!
You could use the VCO module, but probably not for the output <em>and</em>
input of the EG. My pocket scope has a function generator built in, but it can
only output a maximum of 2.5v peak to peak.</p>
<p>My recommendation is to measure the output of the actual device you’ll be using
to control the module when you’re finished with it. I don’t typically use my
keyboard when building the modules, as it’s big and I don’t want to carry it
around the house, but I did take care to note its output. You don’t want to
use one device when building a module and then be surprised by the power
requirements of some other device when playing with the module.</p>
<p>Also, you might want to consider changing the resistor going into the comparitor
if you require supporting gear with a lower output. R9 in the schematic is a
47k resistor. If you substitute a 33k restistor instead, then I calculate that
you’ll change the trigger threshold to 3 V, which is maybe a better default?</p>
<h3 id="the-mki-x-es.edu-envelope-generator">The mki x es.EDU Envelope Generator</h3>
<p>Fundamentally, the way that the mki x es.EDU Envelope Generator module works is
that it applies a low-pass filter to its Gate input. A low-pass filter will tend to
round off the corners of a sharp change in a signal. This turns what looks like a
square wave (presuming that you’re pressing and releasing a key at a constant
rate) into a smoother shape.</p>
<p>In the first iteration which you build on the breadboard it applies only <em>one</em>
lowpass filter to the gate, giving you a more rounded shape. Then, by using a
pair of diodes, two separate lowpass filters are used in the circuit, one for
the rise, and a separate filter for the fall (see example on the right).</p>
<p>That’s simple enough, but it’s a little <em>too</em> simple, even for these circuits,
as just a couple of filters would allow you to control the attack and the release
but not have a sustain. So, as you’ll see, things become a bit more compliacted.</p>
<h2 id="breadboarding-the-envelope-generator">Breadboarding the Envelope Generator</h2>
<h3 id="passive-vs.-active-circuits">Passive vs. Active Circuits</h3>
<figure class="inlineRight">
<a href="/images/synth/EGPassive.png">
<img src="/images/synth/EGPassive.png" loading="lazy" width="400px" alt="There is a yellow square wave representing the Gate signal overlaid with a purple trace representing the envelope output. This purple trace raises slowly and asymptotically to the top of the yellow trace, and then when the yellow trace goes back to zero it slowly goes down, again following a roughly exponential curve.">
</a>
<figcaption>
Passive trace
</figcaption>
</figure>
<p>We start by building a passive EG, but as you can’t hook it up to anything which
draws more current than an oscilloscope without changing the envelope, that’s
really only good for demonstrating the principle of operation of the EG.
Building a “useful” EG will require some op amps.</p>
<p>If you look at the “Passive trace” figure on the right, the yellow trace is the square wave I
am using as the input to the EG, and the purple trace is the output of the EG.
As you can see, the output of the passive circuit is limited to the voltage of
the input to the EG (which, as previously noted, is not consistent
between different keyboards you might use to produce that input). Also, the
output impedance would not be handled well; the
shape of the waveform would change depending upon what you connected to the EG’s
output.</p>
<figure class="inlineRight">
<a href="/images/synth/EGActive.png">
<img src="/images/synth/EGActive.png" loading="lazy" width="400px" alt="Active trace">
</a>
<figcaption>
Active trace
</figcaption>
</figure>
<p>With the active EG the output voltage (see the “Active trace” figure) is now independent of
the input voltage, and the impedance would be better handled, due to the use
of a buffer op amp. Here’s what that looks like on the breadboard:</p>
<figure>
<a href="/images/synth/EGBreadboard.jpg">
<img src="/images/synth/EGBreadboard.jpg" loading="lazy" width="800px" alt="Breadboarded simple EG with attack and decay pots">
</a>
<figcaption>
Two pots and counting…“
</figcaption>
</figure>
<p>(If you look <em>really closely</em> at this photo you’ll notice an extra resistor I’ve
added to bring the voltage threshold down to about 2 V to start the EG. As noted
above, my function generator has a limited voltage range.)</p>
<div style="clear: both;">

</div>
<h3 id="attack-decayrelease-sustain-controls">Attack, Decay/Release, Sustain Controls</h3>
<figure class="inlineRight">
<a href="/images/synth/EGADSRPulse.png">
<img src="/images/synth/EGADSRPulse.png" loading="lazy" width="400px" alt="ADSR trace with pulse">
</a>
<figcaption>
ADSR trace
</figcaption>
</figure>
<p>I’m going to explain how the attack and decay are implemented in the circuit.
This is, ironically considering it was done to keep the circuit itself simple,
somewhat complicated to understand, so feel free to skip ahead to the next
section if you’re so inclined.</p>
<p>In the images in this section, the Gate input is the yellow trace, the EG output
is the purple trace, and the internal signal which the EG mixes into its input
before shaping it with the filters
is the cyan trace. The envelope <em>starts</em> at the center of the screen, not the
left side.</p>
<p>The way a “real” envelope generator works on a commercial
synth works is first the attack happens, taking the envelope to its maximum
level. Then the decay, as it goes to the sustain level, and finally, when the
key is released, the release happens.</p>
<p>With the mki x es.EDU kit, on the other hand, the decay only has a chance to
happen when the attack is quite short. If you look at the “ADSR trace” on the right
you can see that with a short attack, the decay can happen, followed by the
sustain and release. This is the “best case scenario” for this circuit. With
roughly this shape, you can adjust the attack (a little!), the decay/release
times as a single value, and set a sustain level.</p>
<figure class="inlineRight">
<a href="/images/synth/EGSlowAttack.png">
<img src="/images/synth/EGSlowAttack.png" loading="lazy" width="400px" alt="ADSR trace with slow attack">
</a>
<figcaption>
ADSR trace with slow attack
</figcaption>
</figure>
<p>When I dial in a longer attack, there is no decay; in this case the attack
takes its time to even arrive at the sustain level, wherever that happens to
be set. Importantly, the attack in this case only goes to the sustain level; it
does not go to 100% as a standard synthesizer attack would do (even with this
long attack).</p>
<p>Note how the attack level is much higher in the “ADSR trace” example, and how
the attack only goes to the “sustain” level in the
“ADSR trace with slow attack” example.</p>
<p>This is because of how the EG works. If you look at the figure
called “ADSR trace with slow attack,” you can see a third, cyan trace. The cyan
trace has a pulse which is fired when the input goes high. As you can see, the
pulse is pretty short. One way to think about the duration of the pulse is that
it’s the maximum length of time your attack can be for there to still have a
separate decay. You can have a longer attack, yes, but if you do then:</p>
<ol type="1">
<li>You won’t get any decay, and</li>
<li>Your attack will only go to the sustain level, not to 100%.</li>
</ol>
<p>One way to think about the mki x es.EDU EG is that it’s <em>two low-pass filters</em> on
the sum of the gate signal and the internal control signal (one filter controls
the speed of the attack; the second controls the speed of the decay <em>and</em>
release). The lower we set the
low-pass filters, the more we round the corners of the square gate signal into
smooth curves.</p>
<p>The envelope needs a sustain, and that can’t be accomplished with just filters.
So instead of filtering the Gate signal directly, instead it
first produces an internal control signal, represented by the cyan trace in the
images just above.
The EG generates a pulse at the start of the Gate
similar to the “Trigger” output that some keyboards have, and separately reduces
the gate down to a sustain level which you can adjust
with a potentiometer. These two signals are mixed together, forming a shape like
the cyan trace below. Just like before, you can vary the attack speed with
one pot and the descending phases (decay and release) with another pot.</p>
<figure class="horizontalTiles">
<a href="/images/synth/EGPulse.png">
<img src="/images/synth/EGPulse.png" loading="lazy" width="400px" alt="This shows the signal which will be used to generate the envelope. It has a thin bar going up to 100% on the left followed by a sustain level at about 50% for the rest of the pulse. Also shown is the square wave which is the input to the E.">
</a>
<figcaption>
Pulse (tiny dot at the top)
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/EGPulseMeasure.png">
<img src="/images/synth/EGPulseMeasure.png" loading="lazy" width="400px" alt="The same image as before, only it's overlaid with measurement cursors showing that the width of the attack pulse is 16 ms">
</a>
<figcaption>
…with measurement
</figcaption>
</figure>
<div style="clear: both;">

</div>
<p>In this example the input the the EG is shown in yellow and the wave which the
EG will round off using filters to become its output is shown in cyan. The
high pulse on the left always goes to 100%, and the sustain for the rest of the
cycle is settable by the user. Here I’ve adjusted it to around 50%. The width
of the pulse on the left is not assignable by the user; it’s always small; here
I have measured it at a about 16 ms.</p>
<p>So, if you use anything besides a very short attack then it will take
longer than the pulse at the beginning of the envelope and will go to the
sustain level instead of all the way to 100%.</p>
<div style="clear: both;">

</div>
<h3 id="led">LED</h3>
<p>I added an LED, and a transistor to drive it.</p>
<figure>
<a href="/images/synth/EGWithLED.jpg">
<img src="/images/synth/EGWithLED.jpg" loading="lazy" width="800px" alt="Breadboarded EG with LED light shining">
</a>
<figcaption>
The “LED Moment”
</figcaption>
</figure>
<h3 id="inversion">Inversion</h3>
<figure class="inlineRight">
<a href="/images/synth/EGInverted.png">
<img src="/images/synth/EGInverted.png" loading="lazy" width="400px" alt="Inverted trace">
</a>
<figcaption>
Inverted trace
</figcaption>
</figure>
<p>This time the blue trace on the right is showing the inverted output. No surprise
there; it uses
<a href="/posts/2023-04-03-building-a-synthesizer-4.html#inverter">an op amp in an inverting configuration</a>
to produce this output.</p>
<div style="clear: both;">

</div>
<h3 id="looping-the-envelope">Looping the Envelope</h3>
<p>I found this section somewhat hard to understand, not least because the
directions lead off with a confusing bit of language:</p>
<figure>
<a href="/images/synth/EGManualConfusion.png">
<img src="/images/synth/EGManualConfusion.png" loading="lazy" width="800px" alt="Screenshot of the Looping the Envelope section of the manual, with a looping circuit diagram and the text &quot;You just patch it in between output (on the right) and input (on the left) &quot;">
</a>
<figcaption>
It’s your other left…
</figcaption>
</figure>
<p>I had thought this was a mistake; the input is on the right and the output
is on the left.
<a href="https://tinyurl.com/y7wh2o6u">Looking at the circuit simulator seemed to confirm this</a>.
It was only when I watched
<a href="https://www.youtube.com/watch?v=L9vTz0vm6pc">Moritz’s YouTube video</a> that I
realized he was talking about the <em>envelope generator</em> inputs and outputs, not
the I/O for the Schmitt trigger circuit pictured above. The <em>output</em> of
the Schmitt trigger goes to the <em>input</em> of the envelope generator, and vice/versa!</p>
<p>In the end the way that this produces a loop is pretty simple, and here’s how
I would explain it:</p>
<p>First, this circuit produces a <em>specific type of loop.</em> Namely, it loops
whenever the envelope output goes to zero. This is quite reasonable, but it
confused me as it’s not the sort of loop which
you would get if you connected an LFO to the gate input of the EG, which would
always happen on a certain timeframe regardless of where the envelope
is in its cycle. The EG’s loop circuit always happens after the release.<br />
Given that requirement, then we just
need a circuit which will make the input go high whenever the output goes low.
That sounds like a Schmitt trigger inverter, something which you’ll be familiar
with if you’ve previously built the mki x es.EDU VCO, and the circuit shown is
just building a Schmitt trigger inverter using an op amp and a few passive
components.</p>
<p>However, my confusion only got worse as I looked deeper into this step. I had
found the breadboard diagrams increasingly difficult to line up with the schematics as
the breadboard got more densely packed, and I ended up annotating the diagram
in this step. It differs from the schematic in the step in a couple of important
ways, and all of the jumpers and the unlabeled pots, op amps, and jacks had
finally pushed past the point where I could keep track of this in my head.</p>
<figure>
<a href="/images/synth/EGHuh.png">
<img src="/images/synth/EGHuh.png" loading="lazy" width="800px" alt="A schematic diagram of the full EG circuit with a breadboard diagram of the mostly-equivalent circuit below it, with a few differences circled and some annotations added to identify specific parts.">
</a>
<figcaption>
Schematic and Breadboard
</figcaption>
</figure>
<p>These are <em>mostly</em> the same as the diagrams from the manual, only I have added
all of the colored annotations. Note, especially, the red circles. The
breadboard version of the circuit does not include the switch (the components
for the Gate input section are on the board, but they’re “permanently switched
off” in this version), and in the breadboard version the resistor goes to the
negative rail instead of ground. That last bit just seems like an error to me
– the full schematic and the PC board layout later in the directions match
the schematic here. So I ended up not doing this part.</p>
<h3 id="the-mistake-i-made">The Mistake I Made</h3>
<p>Another problem I had during the breadboarding of this circuit was at one point
I mistakenly connected my oscilloscope’s ground clip to the -12V rail instead
of ground. This made the output very distorted and caused the power supply to
the synthesizer to start getting hot. It took me a while to find the issue because
the way you route power to breadboards with two power rails when you need three
is a little consuing. The video about why this is a bad idea is literally called
<a href="https://www.youtube.com/watch?v=xaELqAo4kkQ">How NOT To Blow Up Your Oscilloscope!</a></p>
<h2 id="modifications-can-we-fix-the-limitation-on-the-attack">Modifications: Can We Fix the Limitation on the Attack?</h2>
<p>The limitation to very short attack times is somewhat less than ideal, so could
we fix it? The “pulse” used to generate the attack is set to a pretty short
duration, and it’s not adjustable. What if it were adjustable? That’s not so
hard. We could replace the attack potentiometer with a stereo potentiometer
(which is really just two separate potentiometers with a single shaft to adjust
them). Then we could use one of these for the attack time, as before, and the
second for adjusting the width of the pulse.</p>
<p>So <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWcAmALNZA2VAOMmB2SBVATlIQJAMxCVQGY6BTAWjDACgAlEd5HHVSo+YAXTFQpqSCimyYCTgHMpJEbISYFUTgCc+2ISP6D1UsPDj7DI85uHSi1gO62QjZO-ucAhu9R8EAYvQNpSOX5wKzhg6BwGQgZUTFIGHAICBAQwKhh8UkwBRgJSUuQKiMsrG0KPILrsHWr4TgATYNCG2jCQLzAAOUDcTgB5EEIvdJEiEWn5GwRSKZwRSeDVi1b-Mlp5pZWRQUkolvgoDFQBLKv8MBzEC7RrghwESES0-EJomrdd4KYQQAkIKTj-OqgujLTpgtwHWHQw66NxgGEyWQVEQYlHgGEMRJ40KxSDgkCQwloqaE0luSGbCm0Un+Oo4qkeWLHLynGKyVgweA4DJFd4lbDCSBUfmwOBCmgE5ZwMC4V5MM6k3isZCQMyOLUELz2PoePrQJDIM3yM1krEczFoQGCWl9B0422eXQdW2JQQCQQ+42DYY4dp9IUeEIu7GR-pDZUh3IiP2OjZzIFbGIXR4AQQAKrnswBhADSnETYeBkYDwidvysWeIIAAIgBRQvZgCaAHpuC2ADIt7MAZRbZIJewQ1L22tx48R8yhzoXM4X6aXhJrwQ3ODhW56O9THgPS82uFk8w9J7TwKCAavEa6PUjzt6HtfJLJvWrQRxL5-sRSbEPwAYw8IwcUAo8dAFKwIBgZ4Mled5PgYb48hlLhVEgs8wOxOowQAD2CDgOT2TAIBkCIjhAAA1ABJbMAB0AGchzo1sACFs24TgiNQuYymCBBgQAkBBGzJsACkAFUh1zFjZN44IIiwWQZCYLAmCTQQAAUR2kptRlYCSh24FiWwGGj+1GHTRwhHoAPAj83FYJy+Q4YkwVUdhJEgnzQmPXF2EcHF2G0O1PVEcK-PwNTYljYMVCitSjDCtTAtJUC0oirUdQihQZXgODoAKIpVgYUpykqBsuBc7VdRMer8rJVy1gNPgmvWUkOkjTAtAmNZ+oS+M-HcPrpwmfquVEfpeTiBIkhSNJEOyXIM1aFyjHMVqBt3XKGo6vKurLAg1kG2gPMmpk6xJaAz21XkYioIdZILOiBiS5VzvARwgVrZ0xEEcafu+0kiJoCZXhQCAgQosSQAkmS5JYgBZUdwaYIEqDETHSDU+H6KY1j2JbLieIAIz4OcmtKCBTqZE6TEuzd-PqC6boK8h3ke2CEYAFz53xgIAaxAZiAAcAEtheYFrmaCVnfzl3zcFEXyjGdYKgPc8QlZcwGcuZ5yZpEnXKy8UkAHtwHNfq4vIPoCqsMpxuQJBMRt4JOGt307fqSAvBnfJwHATggA">I tried this out in the circuit simulator</a>,
and it seems to work, for the
most part. (Except that the falstad.com simulator has no stereo potentiometers;
I had to use two mono pots with separate adjustments.) But I can certainly make
the attack longer by increasing the resistance of what used to be a single 10k
resistor and is now a potentiometer. Overall it feels like an improvement.</p>
<figure>
<a href="/images/synth/EGSimulatorFixedAttack.png">
<img src="/images/synth/EGSimulatorFixedAttack.png" loading="lazy" width="800px" alt="A schematic of the envelope generator in a circuit simulator with the modification described in the text.">
</a>
<figcaption>
Improved Attack
</figcaption>
</figure>
<p>Actually including it in the final project would require changes in packaging
since the stereo pot is larger than a mono pot, and changes to the circuit.
More importantly, I would need to tweak the resistor/capacitor values in the
lowpass filter at the input so that the range of the pot was correct for both
the pulse length and the attack curve across the full range of the stereo pot.</p>
<h2 id="building-the-pc-board">Building the PC Board</h2>
<p>This all went very smoothly except at one point I mixed up a 100 k and a 100
ohm resistor. These two are very different! I fixed this before powering the
circuit.</p>
<figure>
<a href="/images/synth/EGPCBoard.jpg">
<img src="/images/synth/EGPCBoard.jpg" loading="lazy" width="800px" alt="The completed PC board for the EG">
</a>
<figcaption>
Completed PC board
</figcaption>
</figure>
<figure>
<a href="/images/synth/EGSideView.jpg">
<img src="/images/synth/EGSideView.jpg" loading="lazy" width="800px" alt="A side view of the EG showing the PC board, the faceplate, and the potentiometers">
</a>
<figcaption>
Side view
</figcaption>
</figure>
<figure>
<a href="/images/synth/VCOMixerEG.jpg">
<img src="/images/synth/VCOMixerEG.jpg" loading="lazy" width="800px" alt="The Mixer, the VCO, and the EG, sitting side by side in the rack">
</a>
<figcaption>
All three modules completed so far
</figcaption>
</figure>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/EG_MANUAL_v3.pdf">mki x es.EDU Envelope Generator User Manual</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://www.modwiggler.com/forum/viewtopic.php?t=259994">Modwiggler thread</a></li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-envelope">Modulargrid page</a></li>
</ul>
<h3 id="product-pages">Product Pages</h3>
<ul>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-eg/">EDU DIY EG</a></li>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">mki x es.EDU DIY System</a></li>
</ul>
<h3 id="simulations">Simulations</h3>
<ul>
<li><a href="https://tinyurl.com/y7ea7j3a">Simplest Envelope</a></li>
<li><a href="https://tinyurl.com/y7xguhoo">Passive A/R Envelope</a></li>
<li><a href="https://tinyurl.com/ycz4qc3b">Active A/R Envelope</a></li>
<li><a href="https://tinyurl.com/yc2c8u5h">Pseudo ASDR Envelope</a></li>
<li><a href="https://tinyurl.com/y7gr9hnj">Status LED</a></li>
<li><a href="https://tinyurl.com/y9rrt8pp">Inverting Buffers</a></li>
<li><a href="https://tinyurl.com/y7wh2o6u">Looped Envelope</a></li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=Oo3Tu0WPqzE">Introducing the mki x es.EDU DIY EG kit</a>
by Moritz Klein (5:03)</li>
<li><a href="https://www.youtube.com/watch?v=aGFb7JbTdNU">Designing a simple ADSR(-ish) envelope generator from scratch</a>
by Moritz Klein (30:59)</li>
<li><a href="https://www.youtube.com/watch?v=L9vTz0vm6pc">How to loop any envelope</a>
by Moritz Klein (2:48)</li>
<li><a href="https://youtu.be/BKg2gU8tf08">Erica Synths .EDU Envelope - Building and Demo</a>
by Synth DIY Guy (18:05)</li>
</ul>
<section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>I chose this comparison because Retro Synth is a very simple plugin. Other
plugins such as Alchemy allow you to add an arbitrary number of envelopes routed
to any parameter on the synth, having very complex shapes. That would be a huge
digression here.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>In this sense the EG module is more like the envelopes in Alchemy, which can be
used to modulate literally any knob on the soft synth, than the envelopes in
Retro Synth, which are “hard-wired” to just three parameters. Logic Pro also has
a “Modulator” Midi Effects plugin, which is a bit more like
the envelope generator we’ll be building here in that it can be connected to
nearly any plugin parameter, and functions both as an envelope generator and an
LFO.<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>, <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Wed, 31 Jan 2024 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2024-01-31-building-a-synthesizer-8.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>On Authoring Presets for u-He Diva</title>
    <link>https://www.craigstuntz.com/posts/2023-11-11-diva-presets.html</link>
    <description><![CDATA[<div class="info">
    Posted on November 11, 2023
    
</div>

<p>I know this is screaming into the void, and of interest to maybe a handful of people on Earth, but:</p>
<p>I’ve purchased a number of commercial preset packs for <a href="https://u-he.com/products/diva/">u-he Diva</a>. And
<em>every single one of them</em> is full of great, useful presets, but seems to make the same mistakes:</p>
<ul>
<li>The output levels are wrong, because the output level control isn’t set correctly. Your presets don’t sound great when
they’re clipping.</li>
<li>The metadata are wrong or missing. (Metadata refers to the “Description,” “Usage,” “Categories,” “Features,” and “Character” of the
preset. They are used when searching and are so, so, so very helpful when you’re searching for the perfect sound
amongst thousands of presets … if they’re set at all!)</li>
<li>The presets are drowning in effects. I understand you want your presets to sound great, but how about having a “Dry”
folder for those of us who actually want to hear the core tone?</li>
<li>The naming uses a completely ideosyncratic prefixing scheme shared by no other Diva preset. (E.g. “SQ” for “Presets which are good for sequences.”) This is an annoyance, mostly
because you’re trying to solve with weird naming what would be better solved with metadata. For the “SQ” example, how about adding “Categories -&gt; Seq+Arp -&gt; &lt;pick one of the options there&gt;”?)</li>
<li>Nice to have: If your demo automates the filter cutoff or something, maybe mention that in the Usage?</li>
</ul>
<p>Here is a checklist you can use before releasing your Diva presets:</p>
<ul>
<li>Have I normalized the output level so that all the presets sound at an appropriate perceived loudness? (Hint: Your DAW probably has a LUFS meter which will help)</li>
<li>Have I set appropriate metadata on each preset?</li>
<li>Have I made any suggestions for how the presets might be used in Usage? (E.g., “Mod wheel controls filter cutoff” or “Try changing Env2 attack” or whatever.)</li>
<li>Have I added a “Dry” folder which has the same presets without effects?</li>
</ul>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;u-he Diva&#39;." href="/tags/u-he%20Diva.html" rel="tag">u-he Diva</a>, <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>
    
</div>
]]></description>
    <pubDate>Sat, 11 Nov 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-11-11-diva-presets.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>On Learning Compilers and Creating Programming Languages</title>
    <link>https://www.craigstuntz.com/posts/2023-10-13-learning-compilers-and-programming-languages.html</link>
    <description><![CDATA[<div class="info">
    Posted on October 13, 2023
    
</div>

<p>When I first started learning about compilers, there was something important which I didn’t understand: Designing a programming language and writing a compiler are two almost entirely different skills. There is obviously some overlap between them, but less than you might think at first!</p>
<p>I think it’s important to know this because they are both very challenging problems! It’s easier to learn these skills if you take them one at a time. Your first solution to a hard problem is likely to be… well, not as good as your tenth! However, it’s pretty common for developers to build out a toy language as they write their first compiler, which means they are making mistakes and learning stuff on two hard problems at once. Worse, those two problems are correlated: A mistake on one will make your life harder on the other. Also, as we will see, although compilers are challenging at first they’re essentially a solved problem, whereas PL design is, let’s say, an area of ongoing research.</p>
<p>I think it’s easier to learn to write a compiler first, and then (if you want) learn to design programming languages. It will be harder to learn to design a good programming language if you don’t have experience with compiler design challenges (amongst other things), so if you want to learn both skills I recommend doing it in that order: Compiler, then PLs. Compiler construction is useful to nearly all software engineers, even (especially?) those who will not build compilers as part of their daytime job. Knowing the challenges of PL design is also useful, but I think in a more abstract way.</p>
<h2 id="challenges-in-compiler-design">Challenges in Compiler Design</h2>
<p>When I say that compiler design is a “solved problem,” I don’t mean that there will never be any more innovation in the space. Instead I mean that there are published solutions to all of these problems, and you can just look them up and use them/learn from them. Also, compiler design is mostly a technical problem. While there are human factors to consider, as there are in every area of software engineering (“Which error messages would be most helpful in a given situation, and how can I be sure I’m producing those?”), many of the problems that you will be solving will be strictly technical (“When a user attempts to compile a large file, does that work or does the compiler become very slow/run out of memory?”).</p>
<p>Specific design decisions you will have to make include:</p>
<ul>
<li><strong>Error handling</strong> (“When I encounter code which is incomplete or erroneous, I would like to present the user with a helpful message for each error in the program instead of immediately dying with an unhelpful message at the first error.”)</li>
<li><strong>Syntax challenges</strong> (“When you encounter a <code>-</code>, is it unary negation or a minus sign?”)</li>
<li><strong>Semantics challenges</strong> (“Can I correctly resolve function overloads per the PL specification for each invocation?”)</li>
<li><strong>Typing challenges</strong> (“Does the compiler determine type correctness via type inference, type checking, or ‘both’?”)</li>
</ul>
<p>Some of the things which make one compiler better than another are quite measureable, such as speed. Others, such as the clarity of error messages, are a bit more challenging to measure, but nevertheless can be compared.</p>
<h2 id="challenges-in-programming-language-design">Challenges in Programming Language Design</h2>
<p>When I say that PL design is a largely unsolved problem, I mean two things.</p>
<p>First, although there are published solutions for some of these problems (such as <a href="https://kframework.org/">K Framework</a> or <a href="https://redex.racket-lang.org/">PLT Redex</a>), they are not necessarily used by every designer. It is very common for PL designers to simply not use them. This is less true with compiler implementers, who tend to use off-the-shelf patterns if not libraries. Sometimes the PL designer will carefully construct a formal calculus of the language using a different system, whereas other designers will just “wing it.” Using an “informal” design process can lead to disastrous omissions in the PL design, such as <a href="https://en.wikipedia.org/wiki/Shellshock_(software_bug)">the Shellshock bugs</a>. However, “informally designed” languages such as bash and PHP have been incredibly successful by many measures. I am not here to throw shade at them. I am just saying that PL design is complicated in terms of producing a language which is secure, usable, and popular. Using a formal model such as K Framework or PLT Redex might make your language more secure, but it won’t by itself make it any more or less popular. There is no formal solution for popularity that I can imagine.</p>
<p>Second, it’s not clear what makes one programming language more usable than another (although there have been <a href="https://quorumlanguage.com/evidence.html">some studies</a>). It’s not entirely clear what “usable” even means here, as many of the criteria seem contradictory. (“Is the programming language easy for beginners to use, and does it restrict the production of invalid programs?”) There is still a ton of room for innovation and discovery in this design space.</p>
<p>Specific design decisions you will have to make include:</p>
<ul>
<li><strong>Syntax challenges</strong> (“How do I want my PL to look? What identifiers/symbols should it use?”) Folks who are new to PL design often spend a lot of time thinking about such matters, but I’ll just say that there are considerably more challenges to come!</li>
<li><strong>Semantics challenges</strong> (“When a function is both overloaded and has default arguments, which version should a given call to that function having a given list of arguments invoke?”)</li>
<li><strong>Typing questions</strong> (Should you use gradual typing? Refinement types, dependent types, etc.?)</li>
<li><strong>Error handling</strong> (“It would be good to design my language such that error recovery is easier for implementers”)</li>
</ul>
<p>There are standard formal solutions for some of this. Syntax questions can be answered, for example, using a formal grammar, such as <a href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form">EBNF</a>.</p>
<p>One of the more popular languages that I know of had a Java-like syntax imposed on the designer by management in the late stages of its design. This sounds like a recipe for disaster. Yet it became quite popular anyway. PL design seems to be roughly an equal mix of understanding formalisms, fine art, and good luck. This is not so dissimilar from other areas of computer programming; it just seems to be a more extreme case of this bifurcation of skills.</p>
<h2 id="so-what-do-you-recommend">So What Do You Recommend?</h2>
<p>I would recommend that you start your first compiler with a “toy” language. Toy languages are on purpose simple; they often have few types (as few as one), and features that are trickier to implement are either omitted entirely or are introduced a little bit at a time. They are intended to get you up and going with a working compiler quickly.</p>
<p>Here are some toy languages you can use. This list isn’t intended to be comprehensive, or even selective; rather, I just want to give you the sense that there are a lot of languages to choose from. Pick any one of them (or any other pre-designed toy language) and I guarantee you’ll be more successful in your first compiler implementation than if you just make something up as you go along!</p>
<table>
<colgroup>
<col style="width: 57%" />
<col style="width: 42%" />
</colgroup>
<thead>
<tr class="header">
<th>Language</th>
<th>Family</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://releases.llvm.org/9.0.0/docs/tutorial/LangImpl01.html">Kaleidoscope</a></td>
<td>ALGOL</td>
</tr>
<tr class="even">
<td><a href="https://craftinginterpreters.com/the-lox-language.html">Lox</a></td>
<td>ALGOL</td>
</tr>
<tr class="odd">
<td><a href="https://anoopsarkar.github.io/compilers-class/decafspec.html">Decaf</a></td>
<td>ALGOL</td>
</tr>
<tr class="even">
<td><a href="https://fsl.cs.illinois.edu/assets/CS422-Spring-2020-02a-IMP-BigStep-SmallStep.pdf">Imp</a></td>
<td>ALGOL</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/kanaka/mal">MAL [Make a Lisp]</a></td>
<td>Lisp</td>
</tr>
<tr class="even">
<td><a href="https://beautifulracket.com/stacker/intro.html">Stacker</a></td>
<td>FORTH</td>
</tr>
</tbody>
</table>
<p>Jeremy Siek’s <em>Essentials of Compilation</em> describes a series of Lisps which grow progressively more full-featured as the book goes on</p>
<p>Andrej Bauer and Matija Pretnar’s <em>The PL Zoo</em> is “a collection of miniature programming languages which demonstrates various concepts and techniques used in programming language design and implementation.” There are a variety of different styles of languages represented there, as well as implementations in OCaml.</p>
<p>Some of these languages will seem quite simple! They might not have features which you want, such as generic variance or monads or whatever. This is on purpose! If you want to add those features after you’ve implemented the languages, please do try and do so. But it’s a good idea to get through the simple stuff first.</p>
<h3 id="some-books-you-can-follow-if-you-want-to-read-formal-instructions-while-building-your-first-compiler">Some books you can follow if you want to read formal instructions while building your first compiler:</h3>
<p>No one book is right for everyone. Here are a few I’ve liked.</p>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 18%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th>Book</th>
<th>Authors</th>
<th>Compilers implemented in…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://craftinginterpreters.com/"><em>Crafting Interpreters</em></a></td>
<td>Robert Nystrom</td>
<td>Java</td>
</tr>
<tr class="even">
<td><a href="https://wphomes.soic.indiana.edu/jsiek/"><em>Essentials of Compilation</em></a></td>
<td>Jeremy Siek</td>
<td>Racket</td>
</tr>
<tr class="odd">
<td><a href="https://www.cs.princeton.edu/~appel/modern/ml/"><em>Modern Compiler Implementation in ML</em></a></td>
<td>Andrew W. Appel</td>
<td>ML</td>
</tr>
<tr class="even">
<td><a href="https://www.plai.org/"><em>Programming Languages: Application and Interpretation</em></a></td>
<td>Shriram Krishnamurthi</td>
<td>Racket</td>
</tr>
<tr class="odd">
<td><a href="https://www.itu.dk/~sestoft/plc/"><em>Programming Language Concepts</em></a></td>
<td>Peter Sestoft</td>
<td>F#</td>
</tr>
</tbody>
</table>
<p>People tend to recommend <a href="https://suif.stanford.edu/dragonbook/">the Dragon Book</a>, especially people who have not read it. I have read it, and I do not recommend it when implementing your first compiler because I want you to succeed and enjoy the journey. The Dragon Book is a much better read if you already know everything that is in it. I don’t think it’s a terrible book, but it should not be the first book you read on the topic.</p>
<h3 id="language-design-booksresources">Language design books/resources?</h3>
<p>This is hard. It’s not my personal interest, so I haven’t read as much in this area. There is a mistake which I have seen developers make over and over again, which is related to the “I will invent a toy language while I build my first compiler” mistake, namely, to invent a programming language and then expect the world to beat a path to your door to use it. There is a difference between getting your programming language to compile toy examples and producing something which will easily and efficiently handle any case that a programmer’s mind can produce.</p>
<p>When you write a programming language you need to specify it in such a way that every program that someone might write (even, say, <a href="https://en.wikipedia.org/wiki/Duff%27s_device">Duff’s device</a>) produces sensible results. If you don’t then you are building a door to the Shellshock bugs. This is hard! And to produce a language which not only handles arbitrary input in a way which doesn’t tend to surprise the user as well as being aesthetically interesting and unique enough for people to even be interested in checking out borders on mysticism to me.</p>
<p>There’s a big leap in difficulty between easier books which show you the basics of certain paradigms, such as</p>
<ul>
<li><em>Programming Languages: Application and Interpretation</em> (linked above)</li>
<li><a href="https://www.cs.rochester.edu/~scott/pragmatics/"><em>Programming Language Pragmatics</em></a></li>
</ul>
<p>…and more difficult reading which explains the formalities of PLT such as:</p>
<ul>
<li>Benjamin Pierce’s <a href="https://www.cis.upenn.edu/~bcpierce/tapl/"><em>Types and Programming Languages</em></a> (totally worth the effort, though)</li>
<li><a href="https://redex.racket-lang.org/sewpr-toc.html"><em>Semantics Engineering with PLT Redex</em></a></li>
</ul>
<p>…which teach you the plumbing about how programming languages work at a semantic level.</p>
<p>One recent paper which is a good bridge between these worlds is <a href="https://www.cs.nott.ac.uk/~pszgmh/123.pdf">Programming Language Semantics: It’s Easy As 1,2,3</a>, by Graham Hutton. I wouldn’t call it a basic read, but it does exist in between the two worlds described above.</p>
<p>Perhaps this all seems like too much, when you just want to make a DSL for your text adventure game? Check out <a href="https://queue.acm.org/detail.cfm?id=2068896">Creating Languages in Racket</a>, by Matthew Flatt.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I realize that the discussion above got into some fairly technical material, but please don’t let that put you off. I’m confident that if you follow one of the books or tutorials I listed you can produce a working compiler. You will learn a ton in the process and it will benefit all of the software you write, even if it doesn’t (apparently!) involve the creation of a programming language. Have fun!</p>
<h3 id="comments-on-this-post-elsewhere">Comments on this post elsewhere</h3>
<ul>
<li><a href="https://lobste.rs/s/tpe028/on_learning_compilers_creating">lobste.rs</a></li>
<li><a href="https://news.ycombinator.com/item?id=38001041">The orange site</a></li>
</ul>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;compilers&#39;." href="/tags/compilers.html" rel="tag">compilers</a>, <a title="All pages tagged &#39;computer science&#39;." href="/tags/computer%20science.html" rel="tag">computer science</a>, <a title="All pages tagged &#39;programming languages&#39;." href="/tags/programming%20languages.html" rel="tag">programming languages</a>, <a title="All pages tagged &#39;plt&#39;." href="/tags/plt.html" rel="tag">plt</a>
    
</div>
]]></description>
    <pubDate>Fri, 13 Oct 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-10-13-learning-compilers-and-programming-languages.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 7: Building the Mixer</title>
    <link>https://www.craigstuntz.com/posts/2023-09-21-building-a-synthesizer-7.html</link>
    <description><![CDATA[<div class="info">
    Posted on September 21, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li><a href="2023-08-11-building-a-synthesizer-6.html">6: The Logic Circuits Model of Computation</a></li>
<li>7: Building the Mixer</li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>There are two “mixer” modules in the mki x es.EDU system, the “Mixer” module and
the “Output” module. Both can combine multiple audio signals into one, but they
do it somewhat differently and the use cases are different. This “Mixer” module
will combine up to three mono signals into a single mono output, and it can also
optinally clip or invert the signal. The “Output” module will combine up to two
mono signals into a stereo line level and headphones output, with panning.</p>
<p>A mixer is a pretty handy module to have, and there are different reasons to use
a mixer, hence different mixers. You can obviously use this one to blend the
two oscillators in the kit, making a hybrid sound with both a PWM and noise
sound. But you can also use it, for example, to combine the two different
envelope generators, producing one envelope which is far more complex than you
could make with just one envelope generator. You could combine a key-triggered
and a looped envelope, for example.</p>
<p>Another big difference between the two modules is the directions. The directions
for the “Mixer” module were written by Moritz Klein and very much follow the
style set out in most of the rest of the mki x es.EDU modules, with an emphasis
on breadboarding before soldering, and a folksy style. Moritz frequently says,
in both the printed directions and his videos, approximately, “you could use
math to calculate these values, but I prefer to use trial and error.”
I’ll discuss the Output module in a future post, but for now let’s just say that
the directions are day-and-night different. The Output module directions were
not written by Moritz and there is math involved. Good thing I enjoy that sort
of thing.</p>
<p>This module, however, has directions written by Moritz Klein in his usual style.
I like that, too!</p>
<h2 id="its-all-about-the-op-amps">It’s All About the Op Amps</h2>
<p>It might seem like I don’t have much to say about this kit. You’ll note that
this post is far shorter than many of the others in the series. In truth,
however, building this kit inspired me to write
<a href="2023-04-03-building-a-synthesizer-4.html">the chapter on op amps</a>, which is
by far the longest post I’ve written. So there is a lot to say, so much so that
it took an extra post.</p>
<p>The mixer module is a very simple introduction to op amps, which gives just a
couple of use cases. If you’d like to know more,
<a href="2023-04-03-building-a-synthesizer-4.html" title="A Gentle Introduction to Op Amps">I’ve got you covered</a>.</p>
<h2 id="passive-vs.-active-mixing">Passive vs. Active Mixing</h2>
<p>The instructions make a valiant attempt to explain how the mixer works in its
final configuration, when it uses an op amp in an inverting configuration. It
mostly succeeds, but I do think portions of it could be clearer, so I will
attempt to add some additional explanation.</p>
<p>The instructions take us through three steps:</p>
<ol type="1">
<li>A passive mixer</li>
<li>An “active mixer” with an op amp in a non-inverting configuration</li>
<li>An active mixer with an op amp in an inverting configuration</li>
</ol>
<h3 id="passive-mixers-and-why-theyre-not-so-great">Passive Mixers, and Why They’re Not So Great</h3>
<p>The manual correctly identifies low output volume of the signal
(caused by a high output impedance) as one problem with the passive mixer
design. But it’s not the only problem. One of the problems with a passive
mixer is that if you have a musical signal connected to one of the inputs and
then you connect a 0V signal into another input, the level of the music on the
output goes down! This sort of makes sense as the new level is the average of
the signal and the 0V input, but it’s not what any musician would
actually want!</p>
<p>Also about that output: Due to the lack of any kind of buffer, the amount of
current in this circuit will change quite a lot depending upon what you have
connected to it.</p>
<p>It’s even worse when you have more than two inputs. If you have three inputs,
and you have two of them connected to music inputs, and you set the levels
appropriately, then you will be very surprised when you plug in a third input
and the levels change relative to each other.</p>
<p>Why? A passive mixer is just a voltage divider in disguise.
And it’s not much of a disguise. A voltage divider with one input connected to
ground is a regular voltage divider, whereas the same circuit with the same input entirely
disconnected is just a single resistor. End users of your mixer will not expect
this behavior.</p>
<p>Still, you will sometimes see passive mixers advertised as “summing mixers” and
all sorts of audio fairy dust attributed to them, at a high price.</p>
<h3 id="active-mixers-with-scare-quotes">“Active” Mixers (with Scare Quotes)</h3>
<figure class="inlineRight">
<a href="/images/synth/OpAmpPassiveMixer.png">
<img src="/images/synth/OpAmpPassiveMixer.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in a non-inverting configuration with two inputs with a 100k resistor on each input">
</a>
<figcaption>
A Passive Mixer and a Buffer
</figcaption>
</figure>
<p>Klein introduces the notion of an “active” mixer by putting a op amp buffer in
non-inverting mode after the passive mixer. While this is “active” in the sense
that it contains active components, namely the op amp, it’s not what most people
would consider an active mixer, because the mixer itself is still passive.</p>
<p>In other words, using a non-inverting op amp configuration passively mixes the
two (or more) signals, and then actively buffers the result using the op amp.</p>
<p>To be honest I’m not sure why you would use this configuration, because it
doesn’t fix the problems caused by the passive mixer. But it does provide one
advantage, namely that plugging in a random module to the output can’t change
the behavior of the mixer, due to the op amp acting as a buffer.</p>
<div style="clear: both;">

</div>
<h3 id="active-mixers-no-scare-quotes">Active Mixers (No Scare Quotes)</h3>
<figure class="inlineRight">
<a href="/images/synth/OpAmpActiveMixerWithPots.png">
<img src="/images/synth/OpAmpActiveMixerWithPots.png" loading="lazy" width="300px" alt="Schematic diagram of an op amp in an inverting configuration with two inputs with a 100k potentiometer and a 100k resistor on each input">
</a>
<figcaption>
Passive Mixer + Inverting Amplifier = Active Mixer
</figcaption>
</figure>
<p>When you swap the non-inverting op amp for an op amp in an inverting
configuration, however, things change. Naïvely, this shouldn’t make a
difference, because what good does inverting the signal do?</p>
<p>But we’re not just inverting the signal, we are also moving the op amp’s
feedback signal from the op amp
input which doesn’t take the mix output to the one which does. And <em>that</em> is
what makes the difference. In an inverting configuration the op amp must emit
a voltage to bring its <code>-</code> input down to zero, hence the opposite voltage as its
input(s). Because the op amp is always working to keep its <code>-</code> input at zero, it
exactly balances the signal from all of its inputs (labeled <span class="math inline"><em>V</em>1</span> and <span class="math inline"><em>V</em>2</span> in
the schematic at right).</p>
<p>This means that if you have just one input connected at <span class="math inline"><em>V</em>1</span> then the op amp
will emit at its output the exact opposite of that signal; it’s an inverter.
It will do this whether you have no connection at all at <span class="math inline"><em>V</em>2</span> or if you have
a wire connected at ground level, carrying no audio signal. If you have two or
more inputs connected, say an audio signal on <span class="math inline"><em>V</em>1</span> and <span class="math inline"><em>V</em>2</span>, then the op amp
will emit exactly the opposite of their sum.</p>
<p><a href="2023-04-03-building-a-synthesizer-4.html#level-10-passive-and-active-mixers">I wrote about this in my op amps post</a>.</p>
<p>However, although the inversion is inaudible with audio signals, if you’re using
the mixer with a lower-frequency signal such as an LFO or some envelope
generators then you might notice the inversion. So the next step is to add
another inverting op amp to fix the inversion. Klein also adds an ouput for the
inverted signal in case you want that.</p>
<h2 id="distortion">Distortion</h2>
<p>The last bit added to the circuit is a diode distortion circuit, which adds a
small bit of distortion to a dedicated output in case you want that. The
circuit is essentially two diodes and a trimpot, and there’s an op amp to bring
the level back up to match the other outputs.</p>
<p>We think of diodes as “one way valves” for current, but they don’t open linearly,
and the distortion circuit exploits this nonlinearity to produce a distorted
sound that can be pleasing in some cases.</p>
<p>I’m not sure why the distortion level is set with a trimpot instead of a
regular front-panel potentiometer; this is the sort of control which you might
want to change for different synthesizer sounds, and having to remove the
module from the rack and adjust the clip threshold with a screwdriver is going
to discourage that.</p>
<h2 id="building-the-pc-board">Building the PC Board</h2>
<p>Well there was no drama here at all. I soldered on the components and everything
just worked. No complaints there!</p>
<figure class="horizontalTiles">
<a href="/images/synth/MixerFaceplate.jpg">
<img src="/images/synth/MixerFaceplate.jpg" loading="lazy" height="300px" alt="The faceplate of the Mixer module. It has three potentiometer knobs and six jack sockets">
</a>
<figcaption>
Mixer Front
</figcaption>
</figure>
<figure class="horizontalTiles">
<a href="/images/synth/MixerBackPCBoard.jpg">
<img src="/images/synth/MixerBackPCBoard.jpg" loading="lazy" height="300px" alt="The back of the Mixer module, which is a PC board with two ICS and a number of discrete resistors and capacitors">
</a>
<figcaption>
Mixer Back
</figcaption>
</figure>
<div style="clear:both  ;">

</div>
<p>But there was…</p>
<h3 id="that-one-weird-thing-with-the-zero-ohm-resistors">That One Weird Thing With the Zero Ohm Resistors</h3>
<figure class="inlineRight">
<a href="/images/synth/MixerOptionalOpAmp.png">
<img src="/images/synth/MixerOptionalOpAmp.png" width="156px" loading="lazy" alt="Schematic of optional op amp circuit with zero-Ohm resistors">
</a>
<figcaption>
Huh?
</figcaption>
</figure>
<p>The kit includes two <a href="https://en.wikipedia.org/wiki/Zero-ohm_link">zero Ohm resistors, which really are a thing</a>.
That’s a little unusual, but what’s truly strange is that they’re totally
unmentioned in the manual, and omitted from the
bill of materials. They are are in the schematic (see image at right) and
in the pictures of the completed board in the directions. They are part of an
“optional inverting/noninverting op amp circuit” which
is not in the signal path of the rest of the mixer. (See schematic at right;
R12 and R14 are zero Ohms. The remaining resistors should not be
installed at all; “DNM” means “Do Not Mount.”)</p>
<p>Installing the two zero-Ohm resistors puts the second op amp in the second TL072
into a buffer configuration, with the noninverting input set to ground. This is
<a href="https://www.youtube.com/watch?v=WnDju2TwN5I" title="Handling Unused 
Operational Amplifiers (ECE Design Fundamentals)">the correct way
to set up an unused op amp</a>.</p>
<p>I think the purpose of the zero Ohm resistors is they could be removed and
replaced with a different value resistor, along with mounting additional
resistors in the “DNM” positions, if you later decided to use the additional
op amp for… something. They are a wire which happens to be shaped like a
resistor, and hence useful when you might want to replace them with a real
resistor in the future.</p>
<figure>
<a href="/images/synth/Mixer0Ohm.jpg">
<img src="/images/synth/Mixer0Ohm.jpg" width="300px" loading="lazy" alt="A close-up of the 0 Ohm resistors">
</a>
<figcaption>
Close-up of 0 Ohm resistors
</figcaption>
</figure>
<p>Thanks for reading!</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/MIXER_MANUAL.pdf">mki x es.EDU Mixer User Manual</a></li>
</ul>
<h3 id="product-pages">Product Pages</h3>
<ul>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-mixer/">EDU DIY Mixer</a></li>
<li><a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">mki x es.EDU DIY System</a></li>
</ul>
<h3 id="simulations">Simulations</h3>
<p>All of these simulations are by Moritz Klein</p>
<ul>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjSkmpBRRhIIfoRC0QuDCACCAYQAqASQBqAUQA6AZwCyygBrqASuwDulWiJSFJt61nGRzlkVgwpXIFI6jtjNIRuHjRgMu6eInZwNFBxMAjsAE5eEYHBkeDwcP7p3rahMjaSIhS4MUgiVdCJKQhB+XZWjXHC2exWFLQFaAgy9dZgTjQA+igjkCNh2LQjtNBYi0tLKCgY0rgTsHBgI6wjGCMII7gdAhIFWGjiA1nNpWMTUxgzcwvLy6vr61vwu-uHTanACGlFW3hQ1hiq2s4BkrBkbWyIAw0AwCEWaDQVgECEgWG6aBRaKC2R2GFoWDxSCROQshHBxTBniEThcDJZQ280K5zgskMG4gFEKq7MZvns3l8zgA8tzrJCpULFaLOt5aCyYgTJEyRGBZuNJtMCW9lnj4Ph1mBDdsyHtdhwAEYSLmEBBExZ6yAEPxAA">A simple “active” mixer</a> (passive mixer with an op amp output buffer)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjYUoSpBApaKSgRC0QuDCACSAOQBqAUQBKAFQUBxADoBnALKyAGmvYB3SrUEEZha0PtQLVm1kKvHkyO1U83HghgMijuUBKUcDThgjAI7ABOnqGBhAHhYPBwvv5C0jTBeTKCFLhRSLHI8UkIaUXJ+YKZWezWFLROpLlowuEIAPoo-ZD9wdi0-bTQWFhZcBi0GPa4uMOwcGD9rP0Y-QO4rZDtTli0krVNcKIlg8OjGOOT07NzC0v0uAMw8Jvbu6sHACGYlEKAEQiiYJs4BkrBkzSyIGYuGg+AEZTAIjYGDQCDQuBYGAglxaln4oKc5KEYA8PksAhsNIhNnBdJBXmSTh8AHlmUJwSl+ZUfG0hCI+adJCgueBVkMRmNTv0sNMEFg0GQiSQMAgUGA0GsfltNhwAObswVUyUxRJ8vUeKn2jJzdgAIwkYGoxCQWBQSEyuucQA">“Inverting” mixer</a> (an active mixer with an op amp in an inverting configuration)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjQhpStSyE+VPrRC4+AEQDyAVQBCAGQCiAHQDOAORUBxAIIAVAJIA1dRoCyxgBoqASuwDulWpBAERbj4XGRnru44Xu4ovlDs9jSEQVh8CGB8WHFQIOIx7kju2dAI7ABOgSDJ8THFKe5g8HCR0aGSNIkeDe4UuHA0qTl5hQhlnkUDldX+bhS04aR1IGgofjQA+igLkAuJ2LQLtNDJu3tYaFSQyzDwYAusCxgLCAu47GNp4VUY4n3DKCipuEsraxgbLY7fZ7Q5YSBoFawODnS7XH73ACG-C+n1CHTRHnAfFYfCqIxAzFOMLIuDJE0kuDiJAOqXx8AChE+PnSzJQYEIERcKAxHI8GJ5XJRLMG4X8AHNhQJOUyvlhaPN-IUeaE+bKPHzhtUCuU+ANMUNwCN2JLMcEPIKhNkIjJdR4hEa2Q7sgESs0kilpUKDYKDS12MiDQ63V6vk1cUaCcSyKTcGB6IRCFUEJAELM6cblQLQr7BVqGY8qt52Zy2EQLdawJCTv9AVVYGgyQIMGBkmgyCdoWQLucONzs-zhpgbYOjcO2JBxFVhy7C6nOW62LwjX1Uq9fqt1vK1qdGwhwUy0GgELQEJ2zj21ozvG7fEEmkrpua78UH5GGVF3q-4k1zZU0imnTWjAeSPPg4iYrQloKmuyw1lumzbPs+BxrQWBzEQUIXnCVzLPcABGEjli+bDoOA8ZfP4QA">“Double negative” mixer</a> (has another inverting op amp to allow for a non-inverting output)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHjW5VrSH7UqaEANwYQAQQAiAKQCqAZQAqUgEIAZAKIAdAM4BJAHIAFBSoM6Aats1L2Ad0q1IIApMKv3XqE5duOJ7eKL6Q7ABKYiiBWJL0klhxUGKUcDQpbjAI7ABOAYLJCISxkm5g8HCR0W4eYhLuDW4UuOlIWcg5+cW1DV69ZeCV4a4tKAKkNSBo4ykIAPoo85DzYBjYtPO00Em7u5hYmBibMPBg86zzGPMLuOyjIPgCFcdTFSgoKbiLy6vr-Fsdnt9tgjidYHBzpdrt87gBDSgfdwxdzpD61cCSViSCrDEDMU7wBCuSBoMAIHAzOKEBCicrDfyEJGhARMz4oMCEPzOGK1Tmo2oo8LONk+VkhMLsADmiPZWC5ov4AiyeQF7n5oo5XPplVVSUkdXRjUGuPg0uRgTWFsEJUy7AA8oUDfKhsyXSrnPrjU73O7-EaAyi6uEEQGXV6UC7PlbsUM8YTECSSmgsJBabhaMSMO042b8rzrYGOqaqg8KiF+WwiNbymgfis1ht5oRoAhaZBXGAUMVsyhjssIWQLucODy0UH0hVMH5HQWpzjy0Npyqy2muV62AgcWuUv2lg3-psW22yWSJF5sAgSAOzsPVozvF7+oIreFuraggVPzqzVFaCjPwSF8TTEBA3BzLJW3uSAWg7a0SUEWhlRADAln3P4mwWBMoXOa5UPmO4wDQAR-wGGhUO9H90hgNBCDQVphmGCATHMFRwH8BArS1HgDWo81iQEOoBPcf87WcTjePA20C2FGhpLaaSmg46SUR6YDuR4601KNcIZWEz99Ioj1NMjLkJJrdgiJIgCrS3T5v1zajoCIMASUYyokBYiwUMs4ipi9OyfSoyDEBALy2LucSrUOMzottXSaCQn1hNxT5jPM+UpMCeLlOyrKgvYAAjFDiRcaMMEnckVSAA">“Adjustable” mixer</a> (has adjustable input levels, plus inverting and non-inverting outputs)</li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l3BWK0AcB2ATATjAZhbgGy6aR64iFYhIAsFCApgLRhgBQAHiLStYSgzg4-FHRBEQAdQCSAFQASAHQDOAZQDyAMTmqAwgBkZABWMBRACKqNAVTnG77AO6VakEASGE3H71Geu7jhePih+kOwASjwoQVhC9EJY8VA8lHA0qe4wCOwAToEgyUIIhHFC7mDwcFEx7p48uEIN7hS4GUjZyLkFpfVNhS3C1exubSi0IKR1UxOpCAD6KAuQC2AY2LQLtNBYfMkHWLQbaDgrsHBgC6wLGAuLuKOQ45NVGJO8lZAoKKm4Sys1hsjttdvtDkcTmcYPArjc7v9HgBDSg-DyxDwZH71cBCVhCKrVbIXOD0U6EDCxU6JLCk1KE+ABAS-MKTZkeMCEfwuWL1TmY+oYiIudmswbhdgAc1RLKwXPZR0m2XyAo58rRKH5XxGBWKHgG2P1FWGjOlhuC6KCZSy7A0RRSfC5bEgk0dNpceoanrl3MtfsNLXYKIDPu9XN+6xA+JN8CjMPgZKwCDcvDCGFw62o2sZBV5-oxhuzNTGwlKavAYAQzSF4DQANW602C0I0FoaFox3wkHJJHw51h1yuHB5WILGSqmH8drzE4JVVe3eNERLVTLerYVdLXPc73rQKbLbbtAQCCacvoeywdfjZEHayZPj13iCkYivWtFufRVfMYi0U+34JAMFqVDwCDuJ0WTQLkJbtK6GJuEEHapJSe6NiCOwQvgGa0OeSb9pcd53KhjxgO2MwNFWLIDEWxLtmgSAyAAcg4cjgAECCRpqXKcc0GQRNKyaugMQkeLw7o0FxHTWnmwo0DJ0n9BUHEyRifSAb6vF+uphZSjQyEWqJ8S-MqLhaW65lCuwZEfBihmUhptHIEQYCIUSRKMSxdggBg1nkQBepUfaxoMvxFyeaxEgcZGV48TF1oCfpkyBchhImZp8UQR+CUqVaWXlL6FrrOJbrFSZASGmVHg+lVETcFQlSUv0TqUhQryTIYJiqMxchmExajyAAmqociRDIACyXAeBgSB4FiuHgO0bXgJMGCQAA0hVfh4FxNUZspPLbU1vivPt-g2dVLUlUdPo7tU3S4HK7lEhAmg6CAnXGCAPV9QNciDSqM5rYKjX8aiIzSoqi0GalJDbv4uqpcdUN4MhO5oIyLiri1-LY7iVmI68x14+sNahXJKPpkkSNWWae27U6uBo1OW64rj85s-DFORusGSU-xQZFEjuOQGW6z8tQkbRuTxK0GRaAEJ8uHYAQrnIHLCvPDtpxwJSTpEhVGK8y+BLA-4AAmGlVUVZsEkxcu8OwluVWbLviXbDsoAEYbBRWa2FSkbD+zOvO+iHwfjmby7PKzbCSBuptgwgWBocCWwYNAGCuR255gHKGNhARt43BwABGPknpQGAtS6K3vP4QA">Entire circuit</a> (as breadboarded, adds diode clipping)</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=_vrc4qgBqbA">Introducing the mki x es.edu DIY S&amp;H/Noise and Mixer kits</a>,
by Moritz Klein (3:57)</li>
<li><a href="https://www.youtube.com/watch?v=q8tmUgaXrEQ">Designing a 3-channel mixer with diode distortion from scratch</a>
by Moritz Klein (26:38)</li>
</ul>
<h3 id="web-sites">Web Sites</h3>
<ul>
<li><a href="https://modwiggler.com/forum/viewtopic.php?t=263624">Mod Wiggler thread</a> (Pretty empty when I looked)</li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-mixer">ModularGrid page</a></li>
</ul>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;synthesis&#39;." href="/tags/synthesis.html" rel="tag">synthesis</a>, <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>
    
</div>
]]></description>
    <pubDate>Thu, 21 Sep 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-09-21-building-a-synthesizer-7.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>
<item>
    <title>Building a Synthesizer, Chapter 6: The Logic Circuits Model of Computation</title>
    <link>https://www.craigstuntz.com/posts/2023-08-11-building-a-synthesizer-6.html</link>
    <description><![CDATA[<div class="info">
    Posted on August 11, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-04-03-building-a-synthesizer-4.html">4: A Gentle Introduction to Op Amps</a></li>
<li><a href="2023-05-22-building-a-synthesizer-5.html">5: Building the VCO</a></li>
<li>6: The Logic Circuits Model of Computation</li>
<li><a href="2023-09-21-building-a-synthesizer-7.html">7: Building the Mixer</a></li>
<li><a href="2024-01-31-building-a-synthesizer-8.html">8: Building the Envelope Generator</a></li>
<li><a href="2024-02-21-building-a-synthesizer-9.html">9: A Field Guide to Oscillators</a></li>
<li><a href="2024-06-24-building-a-synthesizer-10.html">10: Building the VCA</a></li>
<li><a href="2025-04-07-building-a-synthesizer-11.html">11: Debugging Circuits and Software Debugging</a></li>
<li><a href="2025-09-09-building-a-synthesizer-12.html">12: Breadboarding the VCF</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>I’m going to step aside from circuit building to talk about the logic circuits
model of computation. This may surprise you, reader, as it would at first seem
to have nothing to do with building an analog synthesizer. I have a few
reasons for doing so. One is that I’ll be talking about analog computers in a
future post, so think of this post as a gentle introduction to the topic of
alternative computing models. The second is that we can see a synthesizer,
whether digital or analog, as a dedicated piece of hardware which can solve a
restricted set of computing problems (producing sounds), and I find it
interesting to look at a synth from a computing point of view. But analog
synthesizers, anyway, are not engineered like most computers!</p>
<p>If you’re strictly interested in synthesis or electrical engineering, then you
might want to skip ahead to the next chapter, but if you’re reading my blog then
you migth find the following interesting!</p>
<h2 id="von-neumann-machines">Von Neumann Machines</h2>
<p>One model of computation, which we’re all very familar with, though perhaps not
by this name, is the <a href="https://en.wikipedia.org/wiki/Von_Neumann_machine">Von Neumann machine</a>.
You are reading this post on a Von Neumann machine right now. It’s so common
that we generally just call it a “computer.” Nearly all “computers” produced
today are Von Neumann machines, because they are digital computers with a
processor, a control unit, memory, mass storage, and I/O. But other computing
architectures are possible, and occasionally even useful!</p>
<h2 id="turing-machines">Turing Machines</h2>
<p>As a kind of a mental warm-up, consider the
<a href="https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/turing-machine/one.html">Turing machine</a>.
The Turing machine was invented years before the Von Neumann machine, and it was
not intended to be constructed. Rather, it was a system for modeling
computations which we might otherwise think about in our heads. It uses a
different system for computation (see the link for details), without memory or
random-access storage, but it’s provably equivalent to Von Neumann machines in
terms of its computing capabilities. So in this case we have two different
models of computation which can solve the same problems, at least if you ignore
performance.</p>
<h2 id="logic-circuits">Logic Circuits</h2>
<p>Another model, which used to be somewhat common, but is far less so given that
powerful CPUs can be had for pennies these days, is the logic circuits model.
In this case instead of a CPU with an instruction pointer which goes through a
list of instructions, fetches data from memory, operates on that data, saves it
back to memory, etc., we have a far simpler device which is just a bunch of
logic gates. This is so simple, in fact, that it can be efficiently
simulated on a Von Neumann machine, so we can either build a logic circuit
from raw gates or we can simulate it on a general purpose computer; the result
of the computation will be the same either way.</p>
<h3 id="an-example-circuit">An Example Circuit</h3>
<p>Having said that, it’s still an interesting model, and it still has applications
today. So let’s give a quick example. Consider the following function in
TypeScript:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">doTheThing</span>(a<span class="op">:</span> <span class="dt">boolean</span><span class="op">,</span> b<span class="op">:</span> <span class="dt">boolean</span><span class="op">,</span> c<span class="op">:</span> <span class="dt">boolean</span>)<span class="op">:</span> <span class="dt">boolean</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (c) {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> a <span class="op">&amp;&amp;</span> b<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    } <span class="cf">else</span> {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> a <span class="op">||</span> b<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>This function is of questionable utility, but will serve as a simple example
which we can easily translate to a circuits model. It uses a control boolean, <code>c</code>
to decide whether to do a boolean <code>AND</code> operation or an <code>OR</code> operation on its other
two inputs.</p>
<p>What would a circuits model of this function look like? Well, we have <code>AND</code> and
<code>OR</code> as fundamental operators in a circuit, so we can just use those:</p>
<figure>
<a href="/images/synth/2Gates.png">
<img src="/images/synth/2Gates.png" loading="lazy" alt="An AND and an XOR gate.">
</a>
<figcaption>
A good start!
</figcaption>
</figure>
<p>So far, so good, but how do we handle the if/then logic? One way is to compute
both values, and then decide on which one to use based on the <code>c</code> value:</p>
<figure>
<a href="/images/synth/LogicCircuit.png">
<img src="/images/synth/LogicCircuit.png" loading="lazy" alt="A logic circuit equivalent to the TypeScript code above.">
</a>
<figcaption>
Logically correct
</figcaption>
</figure>
<p>Progress! We have a working circuit. From left to right, we compute both the
<code>AND</code> and <code>OR</code>ed values, then look at <code>c</code>. We put it directly into one <code>AND</code>
gate, and also into another <code>AND</code> gate after first passing it through a <code>NOT</code>
gate. Finally we take the <code>OR</code> of both <code>AND</code> gates to see if the output should
be high/on/true.</p>
<p>We can prove this works via the following truth table:</p>
<table>
<thead>
<tr class="header">
<th>a</th>
<th>b</th>
<th>c</th>
<th>output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F</td>
<td>F</td>
<td>F</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>F</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="odd">
<td>F</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="even">
<td>T</td>
<td>T</td>
<td>F</td>
<td>T</td>
</tr>
<tr class="odd">
<td>F</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>F</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="odd">
<td>F</td>
<td>T</td>
<td>T</td>
<td>F</td>
</tr>
<tr class="even">
<td>T</td>
<td>T</td>
<td>T</td>
<td>T</td>
</tr>
</tbody>
</table>
<p>You can take a moment and work through the truth table for both the original
TypeScript code and the circuit above to prove that they’re the same in all
cases. We could leave it at that and be done with it, but looking at
the truth table we can see that a somewhat simpler circuit would do:</p>
<figure>
<a href="/images/synth/EquivalentLogicCircuit.png">
<img src="/images/synth/EquivalentLogicCircuit.png" loading="lazy" alt="An equivalent logic circuit to the circuit above, but with five gates instead of six.">
</a>
<figcaption>
Same output, fewer gates
</figcaption>
</figure>
<p>This circuit uses only five gates, instead of six in the original.
If you like, you can take a second to convince yourself that the circuit above
returns the same values as the truth table, the first circuit, and the
TypeScript code. They’re all equivalent.</p>
<p>So even though it might <em>seem</em>
inefficient to compute both branches of the <code>if</code> and then pick one, appearances
can be deceiving. In general, I worry far more about whether my programs are
<em>correct</em> than I do if they are performing as fast as possible (but possibly
returning an incorrect result!). If you do need to optimize some routine, it is
important to compare the optimized versions in a profiler, not just squint at
the code.</p>
<h3 id="applications-of-the-logic-circuits-model">Applications of the Logic Circuits Model</h3>
<p>This is sort of intellectually interesting, but is there any point in the
equivalences above? Why would we bother doing this when general-purpose CPUs are
so cheap? It would literally cost more to build a non-trivial circuit with
distinct gates than it would to build it on an Arduino or similar, so why am I
bothering explaining all of this?</p>
<p>Aside from, you know, building logic circuits, which is sometimes a thing that
people do, there are a few cases I can think of where thinking in this model is
directly useful:</p>
<h4 id="compiler-optimizations">Compiler Optimizations</h4>
<p>If you’re writing a compiler optimizer, you might directly use boolean
equivalences such as <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws">DeMorgan’s laws</a>
to rewrite expressions into other expressions which are guaranteed to
return the same result.</p>
<h4 id="gpu-programming">GPU Programming</h4>
<p><a href="https://developer.nvidia.com/gpugems/gpugems2/part-iv-general-purpose-computation-gpus-primer/chapter-34-gpu-flow-control-idioms">In GPU programming, you often need to write branch-free code whenever possible.</a>
Note that the circuits model in the above example was branch-free, whereas the
<code>if</code>/<code>then</code> in the TypeScript code was a branch.</p>
<h4 id="homomorphic-encryption">Homomorphic Encryption</h4>
<p><a href="2010-03-18-what-is-homomorphic-encryption.html">Homomorphic encryption</a> refers
to performing a computation on encrypted data, resulting in the cyphertext of
the result of the computation, without ever decrypting the data. It sounds
impossible, but turns out to be merely very difficult. With a little thought you
will see that if you can’t decrypt the data, then you can’t do a conditinal
branch based on some intermediate value (because that would require you to know
what the value is, and you don’t; it’s encrypted).</p>
<p>So homomorphic encryption systems often use a logic circuits model of
computation, which can be branch free, as shown above. In particular,
<a href="https://crypto.stanford.edu/craig/">Craig Gentry’s 2010 thesis</a>, which
introduced the first fully homomorphic cryptosystem, used this model.</p>
<h2 id="mental-exercise">Mental Exercise</h2>
<p>My real agenda here is to get you thinking about different kinds of computing
models, because next we’re going to talk about analog computers, and they’re far
weirder than logic circuits!</p>
<p>In the next post in this series I’ll <a href="2023-09-21-building-a-synthesizer-7.html">building the Mixer module</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cs.brown.edu/people/jsavage//book/home.html">Models of Computation: Exploring the Power of Computing</a>,
chapter 2:
<a href="https://cs.brown.edu/people/jsavage//book/pdfs/ModelsOfComputation_Chapter2.pdf">Logic Circuits</a>,
Savage, John E., Addison-Wesley, 1998</li>
</ul>

<div class="info">
    
    Tags: <a title="All pages tagged &#39;diy&#39;." href="/tags/diy.html" rel="tag">diy</a>, <a title="All pages tagged &#39;electrical engineering&#39;." href="/tags/electrical%20engineering.html" rel="tag">electrical engineering</a>, <a title="All pages tagged &#39;computer science&#39;." href="/tags/computer%20science.html" rel="tag">computer science</a>, <a title="All pages tagged &#39;homomorphic encryption&#39;." href="/tags/homomorphic%20encryption.html" rel="tag">homomorphic encryption</a>
    
</div>
]]></description>
    <pubDate>Fri, 11 Aug 2023 00:00:00 UT</pubDate>
    <guid>https://www.craigstuntz.com/posts/2023-08-11-building-a-synthesizer-6.html</guid>
    <dc:creator>Craig Stuntz</dc:creator>
</item>

    </channel>
</rss>
