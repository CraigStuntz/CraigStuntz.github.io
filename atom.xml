<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Craig Stuntz's blog</title>
    <link href="http://www.craigstuntz.com/atom.xml" rel="self" />
    <link href="http://www.craigstuntz.com" />
    <id>http://www.craigstuntz.com/atom.xml</id>
    <author>
        <name>Craig Stuntz</name>
        <email></email>
    </author>
    <updated>2023-03-02T00:00:00Z</updated>
    <entry>
    <title>Building a Synthesizer, Chapter 3: Breadboarding the VCO</title>
    <link href="http://www.craigstuntz.com/posts/2023-03-02-building-a-synthesizer-3.html" />
    <id>http://www.craigstuntz.com/posts/2023-03-02-building-a-synthesizer-3.html</id>
    <published>2023-03-02T00:00:00Z</published>
    <updated>2023-03-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  2, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li>3: Breadboarding the VCO</li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>Having previously <a href="2023-01-29-building-a-synthesizer-2.html">built the power supply</a>, it’s now time to go on to building actual synth modules. Yay!</p>
<p>There doesn’t seem to be any proscribed order to build the mks x es.EDU modules in. But it makes sense to start with a Voltage Controlled Oscillator (VCO), so that the other modules will have some sound to modify when built, and the sawtooth/Pulse Width Modulation (PWM) VCO is the most generally useful oscillator in the series, so I started with that kit.</p>
<h2 id="on-making-mistakes">On Making Mistakes</h2>
<p>I’m going to describe the whole build process, with a particular focus on the mistakes I made. This is partly to help others fix similar problems they might have, but mostly it’s because I think that this is where the real learning happens.</p>
<blockquote>
<p>“Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.” - Brian W. Kernighan</p>
</blockquote>
<p>The quote above goes both ways. Debugging teaches you more about writing code than just reading correct code in a book. Likewise, making a mistake on a breadboard, and then finding and fixing that mistake, teaches you much more than just soldering a circuit together. When something doesn’t work and you have to find the problems with a continuity tester and an oscilloscope, that’s what helps you to really understand what is happening in the circuit, and how to find this information using tools such as a digital multimeter, an oscilloscope, and your brain.</p>
<h2 id="breadboarding">Breadboarding</h2>
<p>The heart of the kit, in my opinion, is breadboarding. This is what distinguishes the mks x es.EDU kits from many other DIY synth kits. In contrast to other kits, where you build a completed circuit from start to finish and then power it on, with breadboarding you build <em>and evolve</em> the circuit for the VCO, adding features as you go.</p>
<p>The breadboard constuction proceeds in several phases.</p>
<h4 id="vco-core">VCO Core</h4>
<figure class="inlineLeft">
<a href="/images/synth/VCOOscillatorCore.jpg"> <img src="/images/synth/VCOOscillatorCore.jpg" width="140px" loading="lazy" alt="The VCO core built on a breadboard. Next to it is an oscilliscope showing the oscillation on its display."> </a>
<figcaption>
It’s… oscillating!
</figcaption>
</figure>
<p>Building the oscillator core on the breadboard went easily, and the circuit worked the first time I tried it. This part “just worked.”</p>
<p>Note that the wave you can see in the image is sometimes called an “inverted” sawtooth: It shoots up to its maximum voltage and then falls slowly down to the minimum. This distinction (from a “ramp” or “regular” sawtooth wave, which grows slowly to its maximum and then falls quickly to the minimum) will be inaudible at audio frequencies, but it will be “different” if you’re using this oscillator as an <a href="https://en.wikipedia.org/wiki/Low-frequency_oscillation">LFO</a>.</p>
<p>What frequency is the oscillator producing? Well, my oscilloscope tells me that the period of the period of the oscillation is 126.7 µS, so the frequency is the reciprocal of that, which is about 7893 Hz. This is approximately a B8 (a B on the 8th octave – about an octave above the range of a standard piano). So it’s a pretty high pitch!</p>
<p>One thing which I will not do in this series is to explain <em>how</em> the circuits work. For that you can <a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">read the very fine manual</a>, where the author, Moritz Klein, does a better job than I could do explaining just that. Honestly, even if you have no intention of ever building these kits, the instructions are very useful reading. They are the clearest “starting from nothing, no knowledge assumed” explanations I’ve seen of audio circuitry.</p>
<p>Having said that, I do think it’s worth sharing <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIq1XMgdgMwAsuquY+kAnNrriLoSBopEwKYC0YYAUGABz4Q-ZI0JhkISrknjJrGBjDRkk-NHxCMkHgBMpMkJskjGxkKnAA5cYX48A7gdkTnR-PMfDRIOd7MeUDwAxv6+rqa+lPIWWPDxCXD4nJSxiPj8uPyohIiUkPyElISMMHC8AOZhRSY+iGCWCl6Rfvxw4Z5OLa7SstFBTr1RkmBw-MNBAIbgY75tMyRzrONIIFxKiWkZuIi4eEhghKioqajQ6ZnZufmFxYyj8V6ji3asz5aE+I1PeB9fMwVfP8dE4HuNPpYwb4fDpQu8luByLJ5gpYPEIOoZCwcAJkPVIGgwHQyggeAAnRGBV6UySIEpQAHwHhVbiBOn3JFMHAMkE0hHcQoInSobiIwXUhqualvYTwcDk2WsVrtGoMh6PKptJX9LVMBo8ngAe3AJgZhCoqVGmHivRQ6AZkLUPCAA">this simulation</a> of the oscillator core, because it’s super-helpful to be able to see how current moves inside the wires. The dots represent current, voltage is represented by color: higher voltages are green for positive, gray for neutral, and red for negative. (By default; use Options-&gt;Other Options…to change the colors if distinguishing red and green is challenging for you.)</p>
<div style="clear: both;">

</div>
<h4 id="add-output-buffer">Add Output Buffer</h4>
<p>So now we have an oscillation, we’re done with the “VCO,” right? Not by a long stretch! The next step is to buffer the output so that you can connect headphones or another module and have the circuit keep working. Without this, the resistance of the headphones, etc., will change the frequency of vibration.</p>
<p>The circuit is quite simple, but I encountered a few issues building it.</p>
<figure class="inlineLeft">
<a href="/images/synth/BreadboardWhatIsThis.png"> <img src="/images/synth/BreadboardWhatIsThis.png" width="156px" loading="lazy" alt="Close-up of breadboard illustration showing a component which looks like an empty box"> </a>
<figcaption>
What is this component?
</figcaption>
</figure>
<p>One minor frustration I had with the instructions for this kit concerned the breadboard assembly. The breadboarding instructions were primarily hand-drawn illustrations, and there was no accompanying schematic at each breadboard step. (There is a schematic for the whole VCO as assembled on the PC board.) I spent more time than I’d like to admit staring at the component circled in red at left, trying to figure out what it was, before I eventually realized it was just a very short wire!</p>
<figure class="inlineRight">
<a href="/images/synth/VCOOpAmpMisleading.png"> <img src="/images/synth/VCOOpAmpMisleading.png" width="156px" loading="lazy" alt="Op amp from breadboard illustration in instructions showing incorrect text orientation"> </a>
<figcaption>
Actual diagram from instructions
</figcaption>
</figure>
<p>A much bigger problem was that when I powered up the circuit the TL074 op amp chip became very hot. This tells me that power is going somewhere where it should not.</p>
After a couple of minutes staring at the illustration, it traspired that I had installed the TL074 op amp chip upside down. <a href="https://modwiggler.com/forum/viewtopic.php?t=257249&amp;start=75">It turns out I’m not the first to make this mistake!</a> It’s a very easy mistake to make because the instructions are confusing. The two ICs are oriented differently on the breadboard (and probably need to be because of the locations of their power pins), and this is not called out in the instructions.
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/VCOOpAmpSuggestedChange.png"> <img src="/images/synth/VCOOpAmpSuggestedChange.png" width="156px" loading="lazy" alt="A suggested change to the instructions showing the op amp text correctly oriented"> </a>
<figcaption>
Suggested/corrected diagram
</figcaption>
</figure>
<p>Worse, the TL074 is pictured incorrectly in the instructions! The text is depicted upside down. Above and to the right is the actual diagram from the instructions showing the IC text printed in the inverse of how it actually appears on the chip, and below that is my suggestion for how the diagram could be changed to clarify the actual way the chips could be installed.</p>
<p><em>Also,</em> a further warning, just because the instructions seem to be going out of their way to confuse you on this point: The orientation of the two ICs is <em>different</em> in the breadboard layout vs. the PC board layout. All I can say is to double and triple-check the orientations vs. the specific step you are building at every step before turning on power, because they are not always the same, and getting it wrong means a cooked op-amp chip.</p>
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/tl074-pinout-diagram.png"> <img src="/images/synth/tl074-pinout-diagram.png" width="300px" loading="lazy" alt="A pinout diagram of the TL074 op amp chip"> </a>
<figcaption>
TL074 pinout
</figcaption>
</figure>
<p>So I “borrowed” another TL074 from a different kit installed the chip correctly, and the circuit worked. I could measure the signal with my oscilliscope, which looked exactly like it did without the buffer, only without the DC offset. The instructions say to:</p>
<blockquote>
<p>Plug some cheap headphones into the audio jack socket, and you should be able to hear a very high-pitched tone.</p>
</blockquote>
<p>When I plugged my headphones into the jack I heard… mostly a low-frequency (5-10 Hz) clicking sound. After… a lot of debugging, I found that I had connected the wire which runs from the output of the op amp to the 1 µF capacitor just above the headphone jack incorrectly. I had the wire running to pin 10, the + input of the op amp, instead of pin 8, the output. Correcting this wire fixed the click, and I could hear the correct oscillation.</p>
<p>Let me spell this out with schematics, since <a href="https://modwiggler.com/forum/viewtopic.php?p=3696054#p3696054">it seems like others have had this problem</a>:</p>
<figure class="inlineLeft">
<a href="/images/synth/VCOWithOpAmpWrong.png"> <img src="/images/synth/VCOWithOpAmpWrong.png" width="300px" loading="lazy" alt="Schematic of VCO core with op-amp connected to the output incorrectly by the + input pin on the op amp instead of the output pin"> </a>
<figcaption>
This causes 5-10 Hz clicking
</figcaption>
</figure>
<figure class="inlineLeft">
<a href="/images/synth/VCOWithOpAmp.png"> <img src="/images/synth/VCOWithOpAmp.png" width="300px" loading="lazy" alt="Schematic of VCO core with op-amp correctly connected"> </a>
<figcaption>
Correctly wired circuit
</figcaption>
</figure>
<div style="clear: both;">

</div>
<p>The schematics make my mistake super-clear! Whereas if you look at the actual breadboard (see the photo below), or the illustrations in the manual, it’s a lot less clear what is happening in the circuit. So I spent a fair amount of time drawing schematics of the breadboard experiments which followed. I hope you find them useful!</p>
<p>After working through all of these problems, I think that these mistakes, which were mostly mine, are exactly what I wanted from this whole project. The chance to screw up and then find the problems. This is, in my opinion, the best way to learn. You don’t get this kind of knowledge from a kit where you just solder chips onto a board and then you’re done. It’s wonderful!</p>
<p>(Note that the audio output is somewhat loud. If your headphones don’t have a volume control on them, I’d recommend keeping them off of your ears, at least at first.)</p>
<h4 id="digression-an-optimization">Digression: An Optimization?</h4>
<p>The VCO at this point has essentially three sub-circuits, identifed below:</p>
<figure>
<a href="/images/synth/VCOSubcircuits.png"> <img src="/images/synth/VCOSubcircuits.png" width="500px" loading="lazy" alt="Schematic for the VCO with subcircuits of the VCO core, the buffer, and the DC high pass filter identified."> </a>
<figcaption>
Sub-circuits
</figcaption>
</figure>
<p>The oscillator core emits a sawtooth wave ranging from about 1.7 to 7.2V. This is well within the range of the op amp, but it’s not centered at 0. The DC (passive high pass) filter will center the oscillation around 0. I wondered if it would make more sense to switch the order? My thought had been that putting the DC filter before the buffer would result in the oscillator’s voltage range being more centered in the op amp’s range.</p>
<p>Since I find it easier to think in schematics than in board layout, I first modeled this in the simulator, thinking that I would try it on my breadboard when I was happy with the result. It’s worth noting that the simulator is not perfect, and some things work in real life which look strange in the simulator. But in this case my “improved” circuit doesn’t work at all, and I could immediately see why:</p>
<figure>
<a href="/images/synth/VCOCoreBroken.png"> <img src="/images/synth/VCOCoreBroken.png" width="500px" loading="lazy" alt="VCO with DC high pass filter before the buffer, which does not work."> </a>
<figcaption>
This does not work
</figcaption>
</figure>
<p>Instead of being two distinct sub-circuits separated by the buffer, the resistors and capacitors from the oscillator core and the passive high-pass filter are now a combined impedance, which breaks both sub-circuits! The oscillator now runs at the wrong rate, and the DC filtering doesn’t work at all. So much for that idea!</p>
<h4 id="changing-the-frequency-with-a-potentiometer">Changing the Frequency with a Potentiometer</h4>
<p>Next, we experiment with changing the frequency of oscillation by substituting different values for the capacitor and the resistor in the oscillator core, which does indeed change the pitch of the tone that’s generated. Then we substitute a transistor for the resistor, which allows us to have a variable pitch by using a potentiometer connected to the transistor’s base. This potentiometer will eventually become the tuning knob.</p>
<p>The only real problem in this phase of the build was mounting the potentiometer to the breadboard; the pot I was given in the kit was much bigger than the pot drawn on the assembly diagram. I found a way to make it work (see below).</p>
<figure>
<a href="/images/synth/VCOWithVoltageControl.jpg"> <img src="/images/synth/VCOWithVoltageControl.jpg" width="400px" loading="lazy" alt="A breadboard with the VCO circuit on it."> </a>
<figcaption>
VCO at the end of this stage
</figcaption>
</figure>
<p>I find it helpful to look at a schematic, but there is no (complete) schematic for this stage in the directions, so here’s one I made:</p>
<figure>
<a href="/images/synth/VCOCoreWithPot.png"> <img src="/images/synth/VCOCoreWithPot.png" width="500px" loading="lazy" alt="Schematic of VCO core with potentiometer for pitch control"> </a>
</figure>
<h4 id="changing-the-frequency-with-a-voltage-control-input">Changing the Frequency with a Voltage Control Input</h4>
<p>Here we just add a jack and use a passive mixing circuit – nothing more than a couple of resistors – so that we can control the pitch with <em>both</em> an external CV input and the potentiometer from the previous step. Really, they’re both just sources of variable voltage. Finally we tie the output to ground with a 4 or 14k resistor to bring the sum down a bit.</p>
<p>Now here’s the schematic:</p>
<figure>
<a href="/images/synth/VCOCoreWithCVInput.png"> <img src="/images/synth/VCOCoreWithCVInput.png" width="500px" loading="lazy" alt="Schematic of VCO core with CV input and potentiometer for pitch control"> </a>
</figure>
<h4 id="deal-with-component-temperature-variations">Deal with Component Temperature Variations</h4>
<p>Having added a Control Voltage input in the previous step, we now must rip it out to add support for additonal components.</p>
<p>Because the NPN transistor warming lowers its resistance to ground, raising the pitch of the oscillator, we add a PNP transistor, which has the opposite effect when warmed. The idea here is that the two transistors will counteract each other (hopefully!), producing a mostly steady pitch once the oscillator is tuned. The base of the PNP transistor is connected to ground because – well, because it’s handy at the moment, really. This is not how we will have it long-term.</p>
<p>I really needed the schematic here:</p>
<figure>
<a href="/images/synth/VCOWithPNP.png"> <img src="/images/synth/VCOWithPNP.png" width="500px" loading="lazy" alt="Schematic of VCO with PNP transistor added"> </a>
</figure>
<p>One thing to point out here is that the PNP transistor’s collector is connected to -12V, not ground! This is on purpose as we are trying to keep the voltage at the emitter within the 0-550mV range that is appropriate for the NPN transistor’s base, as you can see from the schematic. Connecting the PNP transistor’s collector to -12V instead of ground does that.</p>
<h4 id="add-tuning">Add Tuning</h4>
<p>Now we add the tuning knob and CV input back into the circuit, also adding a fine tuning adjustment.</p>
<figure>
<a href="/images/synth/VCOWithTrimmers.png"> <img src="/images/synth/VCOWithTrimmers.png" width="500px" loading="lazy" alt="Schematic of VCO with tuning and fine-trimming potentiometers added"> </a>
</figure>
<p>There’s a trim potentiometer which is connected to a 1.5kΩ resistor in the schematic, but I didn’t have any special symbol for that, so I just used a standard potentiometer symbol. That potentiometer is used for the oscillator’s fine tuning adjustment.</p>
<p>The biggest problem I had with building this part of the circuit was that I couldn’t find the trim pot. There’s about a 95% chance I lost it while digging through the bag for a diode. I picked one up from my local supplier at a price which bordered on highway robbery, but <em>I don’t care,</em> because I can’t tell you how nice it is to have an electronics parts store within a few blocks of my house and I would very much like them to remain in business.</p>
<p>The coarse tuning potentiometer has returned, now connected to -12V instead of ground. The oscillator has been fairly high-pitched, and the designer wants to bring the pitch down by lowering the voltage sent from the tuning potentiometer. How low?</p>
<p>The tuning potentiometer forms part of a voltage divider between the +12V and -12V supplies. The voltage divider output is:</p>
<table>
<thead>
<tr class="header">
<th>Potentiometer setting</th>
<th>Voltage divider calculation</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0%</td>
<td>24V * 100kΩ / (100kΩ+133kΩ) - 12V</td>
<td>-1.7V</td>
</tr>
<tr class="even">
<td>50%</td>
<td>24V * 150kΩ / (150kΩ+83kΩ) - 12V</td>
<td>3.4V</td>
</tr>
<tr class="odd">
<td>100%</td>
<td>24V * 200kΩ / (200kΩ+33kΩ) - 12V</td>
<td>8V</td>
</tr>
</tbody>
</table>
<p>Compare that to the circuit in the “Changing the Frequency with a Voltage Control Input” section:</p>
<table>
<thead>
<tr class="header">
<th>Potentiometer setting</th>
<th>Voltage divider calculation</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0%</td>
<td>12V * 0kΩ / (0kΩ+100kΩ)</td>
<td>0V</td>
</tr>
<tr class="even">
<td>50%</td>
<td>12V * 50kΩ / (50+50kΩ)</td>
<td>6V</td>
</tr>
<tr class="odd">
<td>100%</td>
<td>12V * 100kΩ / (100kΩ+0kΩ)</td>
<td>12V</td>
</tr>
</tbody>
</table>
<p>So we can see that the voltage is indeed lower. More importantly, the range of the coarse tuning adjustment is now closer to a “musically useful” range, which is around 0-8V.</p>
<h4 id="add-pwm-wave-shape">Add PWM Wave Shape</h4>
<p>Other than the breadboard getting a bit crowded and the potentiometers not really fitting into the breadboard well as usual, this step went fairly easily.</p>
<figure class="inlineRight">
<a href="/images/synth/OpAmpComparitor.png"> <img src="/images/synth/OpAmpComparitor.png" width="300px" loading="lazy" alt="Schematic of op amp in comparitor mode with variable voltage input to inverting input and with PWM waveform on the output"> </a>
<figcaption>
Op amp comparitor, from the directions to the VCO kit
</figcaption>
</figure>
<p>The general idea of this step is to use an op amp wired as a comparitor: a circuit which returns a high voltage if the <code>+</code> input is higher than the <code>-</code> input and a low voltage otherwise. Sending the sawtooth wave through such a circuit results in a pulse wave which we can vary the width of by adjusting the voltage going to the <code>-</code> input of the op amp.</p>
<p>I do find the explanation of using an op amp as a comparitor in the directions a bit confusing, however. I much prefer this version, from <em>Make: Analog Synthesizers,</em> by Ray Wilson:</p>
<blockquote>
<p>Here we are applying a… voltage to the inverting input [<code>-</code>] of the op amp, and the noninverting input [<code>+</code>] is the input to the comparator. If we apply a [lower voltage] to the noninverting input, the output of the op amp will go as low as it can. The op amp really wants to pump current away from the inverting input through the nonexistent feedback resistor. As long as the voltage on the noninverting input is lower than the voltage on the inverting input, the op amp’s output will remain saturated low (stuck at its maximum negative output voltage). If the voltage on the noninverting input goes above [the voltage on the inverting input], the output of the op amp will become saturated high (stuck at its maximum positive output voltage) again in a vain effort to pump current to the inverting input through the nonexistent feedback resistor.</p>
</blockquote>
<p>In short, think of the op amp comparitor as a buffer with the feedback resistor set to infinity instead of nothing.</p>
<h4 id="add-pwm-width-control">Add PWM Width Control</h4>
<p>This is just a potentiometer voltage divider going into the inverting [<code>-</code>] input of the comparitor op amp above.</p>
<p>This pretty much just worked, although once again getting the potentiometer to stay in the breadboard was a bit fiddly. Also I ran out of room on the tiny breadboards I had, so I ended up daisy chaining three of them together. I have purchased a larger breadboard for the remaining kits.</p>
<h4 id="add-output-level-control">Add Output Level Control</h4>
<p>Here we add a couple of op amps to normalize both the sawtooth and the square wave outputs. Finally we can hear the square wave as the output is no longer so hot that it would damage your headphones if you connect it.</p>
<p>Here’s my final physical circuit:</p>
<figure>
<a href="/images/synth/VCOCoreBreadboardFinal.jpg"> <img src="/images/synth/VCOCoreBreadboardFinal.jpg" width="100%" loading="lazy" alt="The full VCO on a breadboard"> </a>
<figcaption>
I’m going to need a bigger breadboard
</figcaption>
</figure>
<p>Also, I made <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEJ1Q5U4ZHBFgpk6WxgYw0WiELRizKLwAmMuUlRtR48ImOZwAOQZgGA3gHcDbWdO6GLi5yLET3E39zS0heAGM-M0CogOQBRUxoY3hUtKIuPCSKOwQhQUJ0VGRhGDg+AHNYyQTq2Tw6HxdTOI9iOhiw5uCYzzd4ptcakzBUAWGdAEMZMclkJk55uaZx0ZnwdOz7SEZkMkgBFCQMLBywPMICopKN1N9Fplklh8lZHWal2TfuWa-G+9Gq2Q30BkgcOkiLyeTH6S0UsFSECwVCEhVQDBIqAI5CgCL4ACcoMsieRZm40rwqm5xONqQwYe8SbQmODoToAC4iQgWV50TjtXkkvzJISQRCIBg4ARS-CIN4wDHnBglRDUem4BgoW4gXTsABmkwArgAbdmUrmEDolCT8y2SBpEsKczh2K2FLkCR7WonccAqPBy0aUQgUHDiHYiBX4PDouyIATIHCWpPa3UGk1m5qET2C-k8v46Qn8nMF4uPbwk9K8ABKHvLljL5kgDLYDDcEkSShrdbB40b5DWiTb6072F4RblcXdnEn9saTa6IlnsmnDn67rC5AWy72fOXNPAt3hcAwADEAJYAO3Y5pdDoHNoY95wch8E7WK5ty4r5LuW5EUhAh4gG9oe5wKAiGAAMIAPaTPiADON5FiBvSoaq87gfA44AQcxKLHhpK0uo1BwN2BGrAeFHgC+nYgMOPyOriiDkehdrUUgzZMcOg6OmO75Tl+MaSBuR5kdMbj0mwtT2MOqw2h+mwKqgxiurgcCKkQkbJOi6A4OKYwYm2YDulhZEuJJWqwjC-CMDIH4hny96SgEYnwoUgjpOkwgAAomkhIAAOrnro7IABY4ZwznolyAQMDFv7YbW3AOS+9kBJadE8R2fEsclPBxWYKVxQIxGtiMOXwixWZxTFnjgPFNlFqZjWxQ1pUkm2ZFVPyJV9qZrAtgCHStZJCW8NM5AjVq6DTXQWRIDIyibC60CHBQqltgIBVYiIDBrbg9QIMYSAlDgbkTfRQIyb8AwgAtGDcMtaTaSp8WsKqBBPngmpZJwMBvXpBmeoQxmmRSLhTQ10RpZxNmQ7Dg2YFqcOMrNTZMOj9hWb4rK7ldNFkjhrIHqCRGVnckO-KTt21GEhIk7MJPCa2ODYVUzMSKyCRlbwqA8OAtNuMJsh04eCTSASIAyVJgurLLiVkYSZOy2TBlEgM5lyw1PGwwrfMC1jmp0GqDVWeL8CYOaav5r8KC86SS4fhWM7O1xbDnSoEgYKO0EAGogD557suEYUgAAkpeAAOhpms1tULKZmUaxLm52b14DJxnJkfsjqS4vYdo+YFACyIBQQHAAy7AAG7sMatk2qZWJ8s3cL0ESPu5YHgXl379ysoUfaD6+A+rFnSej80a4iY+eMbgP8+Pm8n46AAHku+YOI9v3teMmNMEHIdhQAOghFe2Qs9KrBhe14yvbnHmKICniXA8DTmLqmcC-zT9-3zX0FPTO+N92KAPsB1RWac57yw6i6VkxsiSezWtoX2L8y4Xw3i6YEOtzoujEGbVsmAmCv14Fg+Mgs0AkmKBgA+Pc34wXolkYibZSCoIRHAPAL4UDoCJFzLIhBeCMPFNLahWI2AaDwAmZUrBID8ykQ0H6uJ4AQFUbwIAA">a simulation of the full VCO</a> as built on the breadboard which I invite you to play with. You can interact with the simulation via the sliders on the right, and you can hear the oscillator by pressing the two “Play Audio” buttons.</p>
<figure>
<a href="/images/synth/VCOSimulation.png"> <img src="/images/synth/VCOSimulation.png" width="100%" loading="lazy" alt="Screenshot of the VCO circuit running in the simulator"> </a>
<figcaption>
Simulated VCO
</figcaption>
</figure>
<h2 id="coming-soon">Coming Soon!</h2>
<p>Having built a working circuit, it’s now time to rip all of the components out of the breadboard and solder them (plus a few extras) onto the PC board. But before I do that, I’m going to take some time to talk about alternate computing models. Sorry, folks, that’s about as much of a cliffhanger as I can manage.</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">mki x es.EDU VCO User Manual</a></li>
</ul>
<h3 id="community">Community</h3>
<ul>
<li><a href="https://www.modwiggler.com/forum/viewtopic.php?t=257249">Modwiggler thread</a></li>
<li><a href="https://www.modulargrid.net/e/erica-synths-edu-vco">Modulargrid page</a></li>
</ul>
<h3 id="simulation">Simulation</h3>
<ul>
<li>The <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkzoBZHwJwDMky2AHIogOxmbIgZ4MCmAtGGAFBhmEhmkQ2MPXxV6w+pCjQMYaMnqFohPhkicAJiDFLC9AdhCr6qcADlh5TgHcd4oSPt6pt-oMnujJqJwDGXo4GHvhSIKjQqPDRMXCEbPjGsBxk2IToiIRU4thGMHBcAOaB2KGBiGBm0hp2hkH8cPU1JU66QmXNbaX0YHC03b4AhuB9QmTSvVRm5NK0SCDscrFJCDxghOtT2GhUPCspaRlZOUa90W6T0+MjU0LpvnaXd2Zn-ffNr88jkP2CGgFPGbgdYSa7VWDRCDKcRkbKQdLIfAkMRkWj5BCcABOwP0YwmIIYuSg33gnGKHFxiCJFPoKGqDxxoPxqTxvlQHGBLKBlScQImDUaXGx42knhF7TCZ3OxXFA3FFSqvgA9uADMTsJB8IlejJoroUOhiS8lJwgA">VCO core</a></li>
<li><a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEAIFtidUqhASoUbOGi0Z0Ysyi8AJiCmYUIsXrrSwAOQZgGA3gHcdeabN3o6kWwfGE6oti40BjDxkvIItXTGhUeGiYuEIuPAjUK0gBVGS8ZBws6gwYOD4Ac1Cwb0MGQmk2NzsfYO9S+o1awycHEDDm+2lOsEhkjsa3AENwfqYGODHRDqmBcAxuDD6YpJTEPGyCfCJMtbE0jKycyGWY9z6ZybZL+cJEKovUu4exgfvHuz731++mQgETDcgVusxuSB6U2qsGiECwZDAhB4olQpQoeRhfAATuAIWDca8GMggWNorxijxCcSCT1DNULnjruAomwmW5URAwCz8VzKvibiJ4OBeAAXQXiV4CRofOQQbjQIRiEjJHACCj9GYwCxwCoFMS4BACOgrECadgAM2GAFcADYi8kiaXIeZSugVKoaMU4EJeebZO7OuTcXHQKhwViI0qWHCoOicLX4KRqhAETbIIik00W6129z+mSSqYytw4-My-N+G6xXgAJXogb8FcmclZNw90MQtfrd0B3Y6VhbsxA3Hb8k7pcg-0DOEnHT5N1YNXos999B9gbc5CYM4mfJ3HWpnKF+VOIAAYgBLAB27AdMdZA-vHT29InU79s8rpPgvCiOGXTCNp+AxMAAwgAavwjAgOmdwhLBMi9keUIwhgoEAPbDFiADOt44ghsgIagMayuc+GpPiCFEiSxA-nWVHUlRL5yM2I6DjAnb0RRxHSERzbVEOXLsdgvBvjIgZoO+pFkuh4DeCxkCkBEGLRGmKDoHIJh0IQvBAA">VCO core with CV and tuning</a></li>
<li>The <a href="https://www.falstad.com/circuit/circuitjs.html?ctz=CQAgjCAMB0l5YCsA2ATIkrqIOwE5IBmQvPMHMPQyZZEHAFhA0UmYFMBaMMAKDAAchEJ1Q5U4ZHBFgpk6WxgYw0WiELRizKLwAmMuUlRtR48ImOZwAOQZgGA3gHcDbWdO6GLi5yLET3E39zS0heAGM-M0CogOQBRUxoY3hUtKIuPCSKOwQhQUJ0VGRhGDg+AHNYyQTq2Tw6HxdTOI9iOhiw5uCYzzd4ptcakzBUAWGdAEMZMclkJk55uaZx0ZnwdOz7SEZkMkgBFCQMLBywPMICopKN1N9Fplklh8lZHWal2TfuWa-G+9Gq2Q30BkgcOkiLyeTH6S0UsFSECwVCEhVQDBIqAI5CgCL4ACcoMsieRZm40rwqm5xONqQwYe8SbQmODoToAC4iQgWV50TjtXkkvzJISQRCIBg4ARS-CIN4wDHnBglRDUem4BgoW4gXTsABmkwArgAbdmUrmEDolCT8y2SBpEsKczh2K2FLkCR7WonccAqPBy0aUQgUHDiHYiBX4PDouyIATIHCWpPa3UGk1m5qET2C-k8v46Qn8nMF4uPbwk9K8ABKHvLljL5kgDLYDDcEkSShrdbB40b5DWiTb6072F4RblcXdnEn9saTa6IlnsmnDn67rC5AWy72fOXNPAt3hcAwADEAJYAO3Y5pdDoHNoY95wch8E7WK5ty4r5LuW5EUhAh4gG9oe5wKAiGAAMIAPaTPiADON5FiBvSoaq87gfA44AQcxKLHhpK0uo1BwN2BGrAeFHgC+nYgMOPyOriiDkehdrUUgzZMcOg6OmO75Tl+MaSBuR5kdMbj0mwtT2MOqw2h+mwKqgxiurgcCKkQkbJOi6A4OKYwYm2YDulhZEuJJWqwjC-CMDIH4hny96SgEYnwoUgjpOkwgAAomkhIAAOrnro7IABY4ZwznolyAQMDFv7YbW3AOS+9kBJadE8R2fEsclPBxWYKVxQIxGtiMOXwixWZxTFnjgPFNlFqZjWxQ1pUkm2ZFVPyJV9qZrAtgCHStZJCW8NM5AjVq6DTXQWRIDIyibC60CHBQqltgIBVYiIDBrbg9QIMYSAlDgbkTfRQIyb8AwgAtGDcMtaTaSp8WsKqBBPngmpZJwMBvXpBmeoQxmmRSLhTQ10RpZxNmQ7Dg2YFqcOMrNTZMOj9hWb4rK7ldNFkjhrIHqCRGVnckO-KTt21GEhIk7MJPCa2ODYVUzMSKyCRlbwqA8OAtNuMJsh04eCTSASIAyVJgurLLiVkYSZOy2TBlEgM5lyw1PGwwrfMC1jmp0GqDVWeL8CYOaav5r8KC86SS4fhWM7O1xbDnSoEgYKO0EAGogD557suEYUgAAkpeAAOhpms1tULKZmUaxLm52b14DJxnJkfsjqS4vYdo+YFACyIBQQHAAy7AAG7sMatk2qZWJ8s3cL0ESPu5YHgXl379ysoUfaD6+A+rFnSej80a4iY+eMbgP8+Pm8n46AAHku+YOI9v3teMmNMEHIdhQAOghFe2Qs9KrBhe14yvbnHmKICniXA8DTmLqmcC-zT9-3zX0FPTO+N92KAPsB1RWac57yw6i6VkxsiSezWtoX2L8y4Xw3i6YEOtzoujEGbVsmAmCv14Fg+Mgs0AkmKBgA+Pc34wXolkYibZSCoIRHAPAL4UDoCJFzLIhBeCMPFNLahWI2AaDwAmZUrBID8ykQ0H6uJ4AQFUbwIAA">full VCO</a> (as breadboarded; this is missing a few components not on the breadboard such as thermistors and output protection resistors)</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23). This is a super-short overview with a demo of the full system.</li>
<li><a href="https://www.youtube.com/watch?v=QBatvo8bCa4">DIY VCO Part 1: The analog oscillator core anyone can build</a>, <a href="https://www.youtube.com/watch?v=4qxgwN9aq8E">DIY VCO Part 2: The simplest exponential converter</a>, <a href="https://www.youtube.com/watch?v=dd1dws6pSNo">DIY VCO Part 3: Tuning your VCO (and making sure it stays in tune)</a>, and <a href="https://www.youtube.com/watch?v=E76z9ZTc5po">DIY VCO Part 4: Shaping Sawtooth to Square</a>. Four-video series by Moritz Klein, 1:02:00 all together. It’s important to note that in this series he builds a <em>somewhat different</em> VCO than the one which ships in the mks x es.EDU kit. But it has a lot in common and I still think this video series is very, very useful.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Building a Synthesizer: Glossary and Electrical Connections</title>
    <link href="http://www.craigstuntz.com/posts/2023-02-23-building-a-synthesizer-glossary.html" />
    <id>http://www.craigstuntz.com/posts/2023-02-23-building-a-synthesizer-glossary.html</id>
    <published>2023-02-23T00:00:00Z</published>
    <updated>2023-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 23, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li>Glossary and Electrical Connections</li>
</ul>
</div>
<p>If you play synths, are quite familiar with modular synths, and already understand why you can’t just plug a keyboard into a modular synth and expect stuff to work, or if you don’t care much about how modular synths work then feel free to skip this article.</p>
<h2 id="a-glossary">A Glossary</h2>
<p><strong>DIY</strong> stands for “Do It Yourself,” and, in this context, refers to building synths either from a kit or from just plain electronic components.</p>
<p>A <strong>modular</strong> synth is one which is comprised of separate modules, such as oscillators and filters, which can usually be purchased separately and interconnected using patch cables. Most big-name synths that you buy from Roland, Korg, Yamaha, etc., today are <em>not</em> modular. Modular does not mean “any synth with patch cables,” however. There are synths called “<strong>semimodular</strong>” synths which can be patched but are part of a single, inseparable case and which are typically “normalled” together (that is, the synth will make a sound without any patch cables, and then you can change the sound via patching). A modular synthesizer is distinguished by the ability to mix and match modules from various manufacturers to produce a tone.</p>
<p>A <strong>monophonic</strong> synth can only play one note at a time, like a trumpet. A <strong>polyphonic</strong> synth can play multiple notes at a time, like a piano. Polyphonic synths have a limited number of “voices,” which is very roughly the number of notes they can play at once. Polyphonic synths can usually play more than one preset at a time, perhaps splitting the keyboard between two or more instruments.</p>
<p>Modular synths are monophonic, for the most part, because each module <em>usually</em> handles a single sound at a time. A polyphonic synth, on the other hand, will generally allow the player to create a preset once and play chords with it, by default. It’s pretty common to use multiple modules to make multiple sounds, concurrently, but this is closer to having multiple monophonic synths than to having a single, polyphonic synth.</p>
<p><strong>MIDI</strong> stands for Musical Instrument Digital Interface. It’s an old, slow networking protocol which was designed to be the cheapest possible solution to a particular problem in the 1980s: How to play one polyphonic synthesizer using an external keyboard or sequencer. At one point in time (also during the 80s), it was accurately described as “the local area network with the world’s larget installed user base.” It’s hard to overstate the effect that MIDI had on music. For many, it made “home studios” <em>possible.</em> Today it’s <em>still</em> in use, almost entirely unchanged, although it’s being ever-so-gradually edged out by USB.</p>
<p>An <strong>analog synthesizer</strong> makes sounds using analog circuitry, as opposed to a <strong>digital synthesizer</strong>, which makes sounds using digital signal processing. Modular synth components <em>tend</em> to be analog, but there’s no rule which says they have to be, and digital modules do exist. I mention this because it’s orthogonal to the interface. In other words, MIDI is a digital interface which can be used to control either analog or digital synths. Voltage control is an analog interface which can be used to control either analog or digital synths or modules.</p>
<h2 id="voltage-control">Voltage Control</h2>
<p>Most commercial synths include a MIDI interface, with the exception of modular gear which more often uses an <em>even older…</em> well… “standard” is not quite the right word. Anyway, you can connect modules together using an analog protocol called “Voltage Control” (or “CV/Gate” after the specific connections). You can also connect a keyboard or sequencer to a modular synth using the same connections, which might be useful if your keyboard or hardware sequencer has CV/Gate outputs (some do, some don’t) and your modular synth does not have a MIDI interface… module.</p>
<p>These are analog signals, and will allow you, if you plan carefully, to connect two modules together and probably control them with a keyboard or external sequencer, although with greatly limited features in comparsion with a keyboard-to-synth MIDI connection. “Greatly limited” here means that features of MIDI such as support for chords, multiple channels over a single wire, and such niceties as keyboard velocity and aftertouch, either don’t exist at all or require additional work to support.</p>
<p>Taking a simple example, where you want to plug a keyboard into a modular synth, well, you have to look and consider your options. If your keyboard has only a MIDI output, then you must use a MIDI-to-CV module. If your keyboard has outputs labeled “CV,” “Gate,” “Pitch,” “Trigger,” “Mod,” or similar, then you can probably connect these directly to some modules on a modular synth. However, the signals carried on these outputs can vary, depending upon who implemented them.</p>
<figure>
<a href="/images/synth/NovationSLMKIIIBackPanel.png"> <img src="/images/synth/NovationSLMKIIIBackPanel.png" width="786px" loading="lazy" alt="The back panel of a Novation SL MkIII, showing CV, Gate, and Mod outputs"> </a>
<figcaption>
The back panel of a Novation SL MkIII, including CV outputs
</figcaption>
</figure>
<p>On a modular synthesizer, there are three general kinds of signals: CV/pitch, gate/trigger, and audio. Although note that it’s generally fine, encouraged, even to plug, say, the CV output of one module into the audio input of another module, or whatever. <em>In general</em> you can plug anything into anything, although there is no guarantee it will make a pleasing sound!</p>
<h3 id="cv-or-pitch">CV (or Pitch)</h3>
<p>A pitch Control Voltage (CV) is expected, in the <a href="#eurorack">Eurorack</a> world (although not necessarily in modular synthesis in general), to be 1V per octave. This mostly means that an A1 (the note “A” in the second octave of a standard, 88 key piano) is 1V and an A5 is 5V. Mostly! You may encounter other “encodings” of pitch, such as those where the voltage goes into the negative. But 1V/octave, starting at 0V is the system most commonly used and that’s what the mks x es.EDU modules use.</p>
<p>Given that the CV will have a voltage corresponding to the note that you’re playing, you might ask, “But what if I play a chord?” Simple! You don’t get to encode chords with CV. Most keyboards will just choose the highest or most recent note that you’ve played and set the CV to that. The expectation is that you’re going to use this connection with a monophonic synthesizer or with a single modular “voice.” If you wanted to play a three-note chord on a keyboard and have that voiced by a modular synth, you would need three separate CV and Gate outputs from your keyboard, and three separate oscillators on your modular synth. I’ve never seen a keyboard with three CV outputs, although you can buy <a href="https://six4pix.net/product/cvocd/">a MIDI-to-CV interface which has more</a>.</p>
<p>[In 1968, Wendy Carlos released the album <em><a href="https://www.wendycarlos.com/+sob.html">Switched-On Bach,</a></em> where she played many of Bach’s (very much polyphonic) compositions on the (very much monophonic) Moog synthesizer. How did she do this? Simple, she played one voice at a time into an 8-track tape recorder. It’s an incredible feat of musicianship that the result sounds so good!]</p>
<h4 id="mod">Mod</h4>
<p>It’s not uncommon for keyboards to have an output or two called “Mod.” Mod is electrically the same as CV/Pitch, but instead of sending pitch there the keyboard can translate some other MIDI <a href="https://www.whippedcreamsounds.com/midi-cc-list/">continous controller</a> to a voltage sent to that jack. Judging by the name I guess the expectation is that you’ll assign the mod wheel, but it could be set to anything. From there it translates whatever you’ve set it to a 0-5V output on the Mod jack.</p>
<figure class="inlineRight">
<a href="/images/synth/MoogLittlePhattyCVInputs.png"> <img src="/images/synth/MoogLittlePhattyCVInputs.png" width="180px" loading="lazy" alt="The CV inputs of a Moog Litte Phatty synthesizer, showing Pitch CV, Vol CV, Filter CV, and KB Gate jacks"> </a>
<figcaption>
Moog Little Phatty CV inputs
</figcaption>
</figure>
<h4 id="other-cv">Other CV</h4>
<p>If you just say “CV” and don’t say anything else, people will tend to presume you are talking about pitch CV (e.g., on the Novation back panel above the “CV” jack carries pitch information). But as seen with “Mod,” other information can be carried using a Control Voltage as well. The Moog Little Phatty seen at right will take Volume and Filter controls as well as pitch and gate over its CV inputs.</p>
<div style="clear: both;">

</div>
<figure class="inlineRight">
<a href="/images/synth/MoogModelDCVOuts.png"> <img src="/images/synth/MoogModelDCVOuts.png" width="213px" loading="lazy" alt="The CV outputs of a Minimoog synthesizer, showing After Pressure, Pitch, V-Trig, and Velocity jacks"> </a>
<figcaption>
Minimoog CV Outputs
</figcaption>
</figure>
<h3 id="gate-or-trigger">Gate or Trigger</h3>
<p>In addition to Control Voltage you may have noticed a “Gate” output. This is a simple on and off, binary signal (where “on” might be anywhere between 5V and 10V, and “off” is 0V), representing whether the key is pressed/on or released/off. A few devices, such as the Minimoog, have “<a href="https://noiseengineering.us/blogs/loquelic-literitas-the-blog/getting-started-gates-vs-triggers">Trigger</a>” outputs instead of or in addition to Gate; trigger is a short pulse which happens at the start of a note and returns quickly to zero, in contrast to Gate which stays high as long as the note is played.</p>
<p>Why not put pitch CV and Gate on the same signal? One reason is because CV goes down to 0. Another reason is that you might want to send them to different modules, say, a pitch CV to an oscillator and gate to an envelope generator.</p>
<h2 id="eurorack"><a name="eurorack"></a>Eurorack</h2>
<p>Not all modules play nicely together, but a plurality of modules sold today follow the <strong>Eurorack,</strong> um, again, not “standard,” exactly. Suffice it to say that if you buy two Eurorack modules and play with them enough, you can probably get them to do something interesting. Anyhow, Eurorack includes both a common physical form factor, CV voltage (mostly!), and power requirements. Usually.</p>
<p>In the absence of a “Eurorack standard,” most makers take a “look at what Doepfer did on the <a href="https://doepfer.de/a100e.htm">A-100</a> and do something similar” approach. “Eurorack compatible” synth modules tend to follow the following conventions:</p>
<p>The <strong>physical form factor,</strong> or the size of the modules. Eurorack modules are (mostly!) 3U (three rack units, or 128.5 mm) high, and their widths are “quantized” by “HP,” or Horizontal Pitch units. This means they are usually some multiple of 5.08 mm wide.</p>
<p>The <strong>power requirements.</strong> The Eurorack power bus has a 16 pin connector for each module. However, it’s very, very common for modules to not use the first 6 pins and only have a 10-pin connector on the “module” end of the power cable.</p>
<p><a href="/images/synth/EurorackPowerPinout.png"><img src="/images/synth/EurorackPowerPinout.png" width="151px" alt="a list of pins in the Eurorack power connectors and which voltages each one carries" style="float: left;"></a> <a href="/images/synth/EurorackPowerConnector.png"><img src="/images/synth/EurorackPowerConnector.png" width="112px" alt="A Eurorack power connector socket" style="float: right;"></a> At the left is a pinout from the mks x es.EDU schematic. To the right is a picture of one of the 14 sockets in the mks x es.EDU power supply, which you can connect to a single module.</p>
<p>The first thing you’ll notice is there’s a lot of redundancy there. The connectors are 16 pins, organized into two columns of eight pins each. Each two-pin “row” carries exactly the same signal; they are connected together. Furthermore, there are three rows (six pins total) of ground pins, which, again, are connected together.</p>
<p>The power provided by the bus is +12 and -12 VDC. Some have argued that it would have been better if it specified ±15VDC, but Eurorack really was aligned to the specific needs of one system, the Doepfer A-100, not modular synths in general.</p>
<p>Finally, there are CV, Gate, and +5V power wires. Most modules do not use, and don’t even include wires for, the Gate and CV on the bus (expecting you to instead connect Gate and CV via jacks on the front of a module), and +5V connections. I guess the idea behind the Gate and CV connections is you could plug a keyboard or MIDI interface into these and then have the signal “normalled” (connected by default, until you plugged a patch cable in elsewhere) to the CV/gate input on some modules. At any rate, not many modules use this feature at all, requiring you to connect the Gate/CV through the front panel of the module. Similarly, +5V power is simply not needed by most modules.</p>
<p>There is a <a href="http://www.elby-designs.com/webtek/documents/eurosynth-specification.htm">EuroSynth</a> specification which attempts to take the mishmash of Eurorack informal specs and formalize them. Needless to say, essentially no manufacturers have adopted this spec.</p>
<p>In the <a title="The mki x es.EDU DIY System" href="2023-02-21-building-a-synthesizer-1.html">next post</a> we will look at the mki x es.EDU DIY System in more detail.</p>
<h2 id="resources">Resources</h2>
<ul>
<li>The <a href="https://doepfer.de/a100_man/a100m_e.htm">Construction Details</a> document on Doepfer’s site gives information about the physical form factor of Eurorack.</li>
<li>The <a href="https://doepfer.de/a100_man/a100t_e.htm">Technical Details</a> document on Doepfer’s site is a good overview of volatage control in general. It’s also informative if you’d like to know more about the A-100, which other “Eurorack” manufacturers are using as an example.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Building a Synthesizer, Chapter 2: Building the Power Supply</title>
    <link href="http://www.craigstuntz.com/posts/2023-02-22-building-a-synthesizer-2.html" />
    <id>http://www.craigstuntz.com/posts/2023-02-22-building-a-synthesizer-2.html</id>
    <published>2023-02-22T00:00:00Z</published>
    <updated>2023-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 22, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li>2: Building the Power Supply</li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>I decided to build the power supply first, so that I could use it when building the other modules. That’s not strictly necessary; you can power them with a pair of 9V batteries (while building) if you like, but I was going to want a functional enclosure and power supply eventually anyway, so this seemed like a good place to start.</p>
<p>Unlike most of the other kits in the series, Moritz Klein did not write the manuals (or design the circuit, I think), and this manual, unlike most of the others, is a “solder everything onto the board” affair instead of a “here are the tradeoffs with different components” and encouraging you to experiment around with a breadboard. Understandable (especially considering there is less “room for experimentation” when dealing with power), but probably not the most compelling introduction to the series.</p>
<p>However, I do think we can learn about (modular) synths from building this project!</p>
<h2 id="eurorack-format">Eurorack Format</h2>
<p>As I metioned in the <a href="2023-02-23-building-a-synthesizer-glossary.html">glossary</a>, there isn’t really a “<a href="https://en.wikipedia.org/wiki/Eurorack">Eurorack</a> standard.” It’s more like, “look at what Doepfer did on the <a href="https://doepfer.de/a100e.htm">A-100</a> and do something similar.” If we want to build a “Eurorack compatible” enclosure and power supply, there are a few things to consider.</p>
<p>The <strong>physical form factor,</strong> or the size of the modules. Eurorack modules are (mostly!) 3U (three rack units, or 128.5 mm) high, and their widths are “quantized” by “HP,” or Horizontal Pitch units. This means they are usually some multiple of 5.08 mm wide. The mks x es.EDU modules range from 4 to 10 HP. See the <a href="https://doepfer.de/a100_man/a100m_e.htm">Construction Details</a> document on Doepfer’s site for the closest thing there is to a standard.</p>
<p>The <strong>power requirements.</strong> The Eurorack power bus has a 16 pin connector for each module. However, it’s very, very common for modules to not use the first 6 pins and only have a 10-pin connector on the “module” end of the power cable.</p>
<p><a href="/images/synth/EurorackPowerPinout.png"><img src="/images/synth/EurorackPowerPinout.png" width="151px" loading="lazy" alt="a list of pins in the Eurorack power connectors and which voltages each one carries" style="float: left;"></a> <a href="/images/synth/EurorackPowerConnector.png"><img src="/images/synth/EurorackPowerConnector.png" width="112px" loading="lazy" alt="A Eurorack power connector socket" style="float: right;"></a> At the left is a pinout from the mks x es.EDU schematic. To the right is a picture of one of the 14 sockets in the mks x es.EDU power supply, which you can connect to a single module.</p>
<p>The first thing you’ll notice is there’s a lot of redundancy there. The connectors are 16 pins, organized into two columns of eight pins each. Each two-pin “row” carries exactly the same signal; they are connected together. Furthermore, there are three rows (six pins total) of ground pins, which, again, are connected together.</p>
<p>Most modules do not use, and don’t even include wires for, the Gate and CV on the bus, requiring you to connect the Gate/CV through the front panel of the module. Similarly, +5V power is simply not needed by most modules.</p>
<p>So when on <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-1x84hp-case/">the order page for the case</a> it says:</p>
<blockquote>
<p><strong>NB! The enclosure &amp; PSU are designed specifically to accommodate DIY modules from mki x es.edu series and are not compatible with other eurorack modules.</strong></p>
</blockquote>
<p>I think it means two things:</p>
<ol style="list-style-type: decimal">
<li>The case is pre-drilled to accomodate modules of certain widths in a specific order. Nothing you couldn’t fix with a drill and a tap, but worth noting.</li>
<li>The kit doesn’t include components for the +5V power, although it does have space/holes for them on the PCB and most modules don’t need +5V anyway.</li>
</ol>
<p>Other than those two <em>caveats</em> I think this case would work fine for most 3U Eurorack modules.</p>
<p>The <a href="https://doepfer.de/a100_man/a100t_e.htm">Technical Details</a> document on Doepfer’s site is informative if you’d like to know more about the system which other “Eurorack” manufacturers are using as an example.</p>
<div style="clear: both;">

</div>
<h2 id="building-the-power-supply"><a name="building"></a>Building the Power Supply</h2>
<p>I’ll be perfectly frank that this kit is not the one which is going to teach you much about electronics.</p>
<p>It would be closer to the truth to say that this one will help teach you patience! There are, for example, 14*16=224 solder joints to connect the power cable adaptors alone. After soldering these, I tested them with both a digital multimeter in continuity mode and by putting cables repeatedly into and out of the adaptors. I did not solder every single joint perfectly on the first try (surprise!), so I fixed those which didn’t work.</p>
<p>Throughout assembling this kit, I had problems with soldering connections to ground; the ground inside the PC board is apparently a large chunk of copper and it was challenging to get it hot enough to melt solder even when the component you were soldering to it was plenty hot and at risk of cooking. It took a lot of patience and mostly a lot of testing to make sure that everything worked.</p>
<p>The instructions said to increase your soldering iron temperature to 400℃ to solder wires to the power plug. I left it there when soldering the switch and melted something inside the switch. I bought a new switch and some spade connectors, and soldered the switch wires to the spade connectors instead and then pushed the spade connectors onto the (new) switch, which worked quite well.</p>
<p>One minor challenge is that the +/- leads of the LEDs were not, as far as I could make out, indicated on the PCB; I had to refer to the schematic to figure out which way to put the LEDs into the board.</p>
<h2 id="building-the-5v-power-supply">Building the +5V Power Supply</h2>
<figure class="inlineRight">
<a href="/images/synth/5VPowerSupply.jpg"> <img src="/images/synth/5VPowerSupply.jpg" width="400px" alt="You can see that the voltage regulator is pushed aside by the module power connector and there is no room for the capacitor."> </a>
<figcaption>
What’s wrong with this power supply?
</figcaption>
</figure>
<p>The PCB comes drilled for parts for a +5V power supply (to pins 11 and 12 of the power sockets), but does not include parts for this. Wanting “the full experience” I sourced the parts from a local supplier (details below) and built this as well. Despite some vagueries about precisely which parts to buy, everything worked, except for the LED. I eventually figured out that the problem was getting the ground connection on the PCB hot enough to really melt solder; I had been hesitant to hold the soldering iron to the LED for the 30+ seconds it took to heat up the connection inside the board. But in the end it worked fine and now the LED lights up indicating +5V power is on.</p>
<p>However, there is another problem with the +5V power supply, and it’s not me this time. Some of the holes for the +5V components fall under the power sockets for modules! I ended up soldering a capacitor to the bottom of the board, and the power regulator is not quite squarely mounted. (See photo at right; there are two capacitors visible on top of the board and a third which is immediately above them mounted under the board; you can see one of the two pins just peeking out from under the black module power connection, immediately above the power regulator pins. Note also that the power regulator is being somewhat pushed off of its heatsink pad by the module power connector above it.) It works fine, but I feel like I’m probably the first person to ever assemble this.</p>
<h2 id="additional-supplies-needed">Additional Supplies Needed</h2>
<p>If you want to add +5V power to your power supply, you will need to buy:</p>
<ul>
<li>2 0.1 µF capacitors, non-polarized (voltage and type unspecified; I used 50V mylar capacitors)</li>
<li>1 10 µF polarized capacitor, 16 V (I used a 50V capacitor because that’s all my supplier had)</li>
<li>1 1k Ohm resistor (wattage unspecified, I used a 1/2 W, which ended up being slightly too long for the pre-drilled holes in the PCB, so I’m guessing it was designed for a 1/4 W resistor?)</li>
<li>1 5V LED (I used a green 4V LED as that’s what my supplier had)</li>
<li>1 78M05 5V voltage regulator, or equivalent (the current is unspecified; my supplier had a 1A in stock, so that’s what I used)</li>
</ul>
<p>All together this cost me about $10.</p>
<p>As you will see, there is <em>considerable</em> vagueness in the bill of materials above! I listed what I used, and these values seem to work, although I haven’t tried putting any real load on the circuit. One suggestion I would make for this kit is to fill in the missing values here!</p>
<p>In the next installment of this series I’ll <a href="2023-03-02-building-a-synthesizer-3.html">breadboard the VCO</a>.</p>
<h2 id="resources">Resources</h2>
<h3 id="instructions">Instructions</h3>
<ul>
<li><a href="https://www.ericasynths.lv/media/instrukcija_2.pdf">mki x es.EDU Eurorack Case User Manual</a></li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=pQKN30Mzi2g">DIY SYNTH PSU: How to design a simple dual power supply</a> by Moritz Klein (26:03). Note that this is for a different design than the one included in the kit! It’s sort of useful, although you can skip this video if you want to.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Building a Synthesizer, Chapter 1: The mki x es.EDU DIY System</title>
    <link href="http://www.craigstuntz.com/posts/2023-02-21-building-a-synthesizer-1.html" />
    <id>http://www.craigstuntz.com/posts/2023-02-21-building-a-synthesizer-1.html</id>
    <published>2023-02-21T00:00:00Z</published>
    <updated>2023-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 21, 2023
    
</div>

<div class="toc">
<ul>
<li><a href="2023-02-20-building-a-synthesizer-0.html">Introduction: The World of DIY Synthesizers</a></li>
<li>1: The mki x es.EDU DIY System</li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>This post will be a brief oveview of the mki x es.EDU DIY System. I’ll get to actual construction in <a href="2023-02-22-building-a-synthesizer-2.html">the next post</a>.</p>
<p>Including the power supply, there are 11 modules in the full system, but two of them are the same.</p>
<p>I personally think that the single greatest thing you get with the kits is something which doesn’t ship in the box: The instructions. They are generally excellent, and most of them were written by Mortiz Klein, who did most of the circuit design. If you’re seriously considering building these (or any other synth kits), I’d suggest sitting down with one of the manuals – <a href="https://www.ericasynths.lv/media/VCO_MANUAL_v2.pdf">here is the VCO manual</a>, for example – as they will not only teach you about electronics and synthesizers but also about how to teach such concepts.</p>
<p>The full system includes:</p>
<ul>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-1x84hp-case/">combination enclosure and power supply</a>.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vco/">VCO</a> (Voltage Controlled Oscillator) which produces either a sawtooth wave or a <a href="https://www.yamahasynth.com/learn/synth-programming/synth-basics-all-squares-pulse" title="Synth Basics: All Squares are Pulse">pulse</a> (a generalized square wave with variable width). This is one of two oscillators in the full system. An oscillator is a “thing which produces sound” which can be filtered and combined by other modules.</li>
<li>Two <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-eg/">envelope generators</a> which produce, well, envelopes. Think of an envelope as (for example) the volume over time of a particular note. If you were making an organ sound, you would want the volume of a note to immediately drop to nothing when you took your finger off of a key. If you were making a xylophone sound, on the other hand, you would want the sound to slowly fade out. The envelope generator produces a voltage which corresponds to this desired change in volume. However, actually affecting the sound produced by an oscillator with this envelope will require another module, the VCA. The full system includes two identical EGs modules. Envelopes are also useful for controlling things besides volume, such as filters.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vca/">dual VCA</a> (Voltage Controlled Amplifier). The primary use case for this module is taking as inputs the sound produced by the oscillator and the envelope produced by an envelope generator and producing as an output a sound which follows the envelope in volume and has a tone produced by the oscillator. There are other ways to use it, but this is the most common thing to do.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-sequencer/">five-note sequencer</a> which produces a 3, 4, or 5 note sequence, such as an arpeggio. What if your compositions require more than 5 notes? Well, you might need a different sequencer! This is just to learn how they work. But, as it’s a modular system, you can also do things like clock the sequencer at an audio rate and use it as a waveshaper.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-vcf/">VCF</a> (Voltage Controlled Filter). This changes the sound of the oscillator like an equalizer does. This VCF is just a low-pass (removes higher frequencies). It also has resonance, which is a signal boost at the cutoff frequency, which gives the user of the filter more options for the sound they produce.</li>
<li>A <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-noisesh/">noise and sample and hold</a> module. Noise is simple enough to explain; it’s just a different sort of oscillator which produces <a href="https://en.wikipedia.org/wiki/White_noise">white noise</a> or <a href="https://en.wikipedia.org/wiki/Pink_noise">pink noise</a> instead of a “cleaner” waveform such as a pulse. Sample and hold is much trickier to explain! In fact, I think I will defer discussion of how sample and hold works until I look at this module in depth in a future post, so that I don’t totally derail this post.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-wavefolder/">wavefolder</a> is a module that takes, for example, a triangle wave and quite literally folds the wave over on itself, turning the peak of the triangle upside down and resulting in a jagged edge. In contrast to the rest of the modules, this is a feature which isn’t found on many synthesizers, although some modern synths will allow you to begin with an already-folded oscillator by playing back a sample.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-mixer/">mixer</a> combines up to three input signals as a single output, and also has a distoration feature which can make (possibly) pleasing changes to your signal by clipping it. You don’t have to distort your sounds if you don’t want to, though.</li>
<li>The <a href="https://www.ericasynths.lv/shop/diy-kits-1/edu-diy-output/">output</a> module is a different kind of mixer than the mixer above. It will take either one or two inputs and produce a stereo ouput by panning them right or left. It has a headphone amplifier and a line level output.</li>
</ul>
<p>Although the instructions are <em>very</em> good, as I work through each kit I am finding that I often want additional information, such as more explanation of what certain components do or additional schematic diagrams. I will share that information in the post for each kit I build.</p>
<p>That’s the whole system! I will discuss each module in more detail when I write about building them in future posts. The <a title="Building the Power Supply" href="2023-02-22-building-a-synthesizer-2.html">next post</a> in this series discusses building the power supply.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23). Although billed as an intro to the VCO kit, the latter half of the video is a demo of the full system, if you’d like to hear it bleep and bloop.</li>
<li><a href="https://www.youtube.com/watch?v=vHNQQ6yUGyo">Designing a simple 5-step sequencer from scratch</a> by Moritz Klein (32:07) A nice example of the step-by-step, breadboard-based approach to understanding how the circuit works which is used throughout the entire Erica Synths EDU series.</li>
</ul>
<p><img src="/images/synth/DIY_System_web_5.jpg" width="80%" loading="lazy" alt="The mki x es.EDU DIY System -- the entire, complete system in its enclosure"></p>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Building a Synthesizer, Introduction: The World of DIY Synthesizers</title>
    <link href="http://www.craigstuntz.com/posts/2023-02-20-building-a-synthesizer-0.html" />
    <id>http://www.craigstuntz.com/posts/2023-02-20-building-a-synthesizer-0.html</id>
    <published>2023-02-20T00:00:00Z</published>
    <updated>2023-02-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on February 20, 2023
    
</div>

<div class="toc">
<ul>
<li>Introduction: The World of DIY Synthesizers</li>
<li><a href="2023-02-21-building-a-synthesizer-1.html">1: The mki x es.EDU DIY System</a></li>
<li><a href="2023-02-22-building-a-synthesizer-2.html">2: Building the Power Supply</a></li>
<li><a href="2023-03-02-building-a-synthesizer-3.html">3: Breadboarding the VCO</a></li>
<li><a href="2023-02-23-building-a-synthesizer-glossary.html">Glossary and Electrical Connections</a></li>
</ul>
</div>
<p>I’m building a synthesizer. I like synths and I like electrical engineering, so it seemed like a natural fit. But I’m not at the point where I’m ready to take on the design from scratch, so I wanted to find a kit. There are a lot of choices! In this post I’ll review some of the options and explain how I settled on a kit to buy.</p>
<p>A synthesizer is a function which computes an audio signal over time, given some (usually keyboard) input. Sometimes, as with a modern digital synthesizer which contains a general-purpose CPU, it does this using the standard model of computation which we programmers are all very familiar with. But in an analog synthesizer, it does this computation using an analog computer, which is a different model of computation that is not so common today. So over the course of this series I will also look into alternate computational models and think about what we can learn about computation from them.</p>
<p>I’m also going to be writing what amounts to a laboratory notebook as I work. The point of building this kit for me is to learn about electrical engineering in general and the construction of analog synthesizers in particular, not to get soldering practice. This may be more detail than many readers want! But I do think that for people who are building these kits it can be really helpful to hear what others discovered while building them, so I have a lot of detail and digressions in the series.</p>
<h2 id="modular-synthesis">Modular Synthesis</h2>
<p>From a DIY synth-builder’s point of view, a modular synth (see <a href="2023-02-23-building-a-synthesizer-glossary.html">the glossary</a> for a definition of “modular” in this context) makes sense because they keep the various parts of the circuitry well-segregated; instead of a big mass of ICs which are used for multiple different features within a synth, each module stands alone, which means that you can understand how each part works more easily.</p>
<p>From a musician’s point of view, modular synthesis may or may not be your thing. It’s certainly not mine! Programming a sound on a modular synthesizer is roughly equivalent to <a href="https://computerhistory.org/blog/programming-the-eniac-an-example-of-why-computer-history-is-hard/">programming on the ENIAC</a>:</p>
<blockquote>
<p>The initial design of the ENIAC did not use anything like the software we know today. It was basically an assembly of “functional units” that were wired together in a particular way for each new problem. If you wanted to do a multiplication after an addition, you would run a wire from the multiplier to the adder.</p>
</blockquote>
<p>As a musician, I far prefer playing software instruments. I have the musical attention span of a <a href="https://journals.le.ac.uk/ojs1/index.php/pst/article/view/3739">squirrel on “Mach 6”</a>, and I like to be able to change from song to song at a whim. But as an (amateur!) electrical engineer, I can learn a lot from building hardware, <em>especially</em> if the circuits are fairly easy to understand. So a modular synth is a good fit for this project.</p>
<h2 id="some-options-for-synth-kits"><a name="options"></a>Some Options for Synth Kits</h2>
<p>There are, thankfully, a number of choices of synth kits on the market, and there is a lot of variety in terms of what you’re building, what techniques you’ll use to assemble it, and what you’ll learn in the process. Here are some kits that I considered.</p>
<ul>
<li><strong>mki x es.EDU DIY</strong> Analog, modular, CV, <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">the full kit</a> includes 9 different modules + power supply rack. You can also buy the modules individually. The instructions are easy to read and fun, there are YouTube videos to go along with many of them, and most of the modules start with some breadboarding exercises so that you can really understand why the circuits are designed the way they are. The modules you will build are… OK. They will sound decent, but have very few features.</li>
<li><strong><a href="https://paia.com/fatman/">PAiA FatMan</a></strong> Analog, MIDI/CV, fairly simple. Too simple for what I was after, but if you’re looking for a project you can do over a weekend it might be right for you?</li>
<li><strong>North Coast Synthesis</strong> has <a href="https://northcoastsynthesis.com/synth-diy-projects/">a number of DIY kits</a>. They’ve put a lot of work into their instructions, with an emphasis on learning electronics, and the intent is to build modules that you’re going to want to keep and play, moreso than the two options above.</li>
<li><strong>Dreadbox</strong> has, occasionally, <a href="https://www.dreadbox-fx.com/diy-kits/">a kit or two in stock</a>. These are kit versions of the commercial synths they sell, which are mostly desktop units which play nicely with Eurorack modular synths. The instructions are quite good, but don’t have the emphasis on learning electronics that you’ll find in mki x es.EDU DIY or North Coast manuals; they’re “solder this resistor here” sort of instructions.</li>
<li><strong>Black Corporation</strong> has <a href="https://black-corporation.com/">some phenomenally complicated kits</a> for polyphonic MIDI synthesizers, which feature minimal documentation and typically involve soldering hundreds of surface-mount components onto many boards. Minimal instructions, and you may have to make modificatsion to the circuits to work around issues, although there is some community documentation.</li>
<li>There are many other options! I’ve tried to give a good range above, but if you’d like to see a much longer list, you could do worse than browsing <a href="https://synthcube.com/cart/diy-kits#/availability=1/sort=p.sort_order/order=ASC/limit=20">the DIY section of synthCube</a>. synthCube is a bit more than just another online retailer. Besides carrying a very large assortment of DIY parts and kits, they have purchased <a href="http://musicfromouterspace.com/">Ray Wilson’s</a> hardware and business, which probably kept his site from going to spammers after his death and certainly resulted in his PC boards and kits remaining available.</li>
</ul>
<p>It would be a mistake to buy one of these kits based solely on the features of the synth. As I noted above, I am more interested (for this project) in learning about electronics than ending up with a synth I want to play every day. So I spent some time reviewing the manuals, which are mostly available online, and seeing which had the most engaging documentation. There is a wide range between “barely documented” and “a mini-course in electrical engineering” represented here.</p>
<p>Moreover, there are many resources which could make a “make or break” difference in terms of whether or not you’re able to successfully complete the kit, especially if you take on one of the more challenging kits. These include message boards and YouTube channels. It’s worth spending a little time to review what resources will be available to you should you need a “lifeline.”</p>
<p>At any rate, I ended up choosing the mks x es.EDU for a couple of reasons. First, my desire to learn about how the underlying electronics worked really narrowed the choice down to “those kits with the best manuals,” and that meant either mks x es.EDU or North Coast. Second, the mks x es.EDU system is just that: A complete set of modules designed to work well together.</p>
<p>The North Coast modules, by contrast, are better in terms of the number of features they provide, but are much more expensive (the <a href="https://northcoastsynthesis.com/products/msk-013-middle-path-vco-sdiy-kit.html">oscillator module</a> alone lists at US $342, whereas an entire <a href="https://www.ericasynths.lv/shop/diy-kits-1/mki-x-esedu-diy-system/">mks x es.EDU system</a> goes for €630.00) and are not designed to be purchased as a “system” which you can assemble and play. They’re modules, which you might want to use with other DIY modules or with modules you buy from other vendors. They are probably a better fit for people who want to build the synthesizers for music that they play, rather than people are primarily interested in building a synth to learn about electronics and synthesis, although I think both groups would enjoy them.</p>
<h2 id="ordering-from-latvia">Ordering from Latvia</h2>
<p>Although there are US dealers for the Erica Synths gear, they seemed to be out of stock of the entire mks x es.EDU system when I looked, so I bought mine directly from Erica Synths in Latvia. To my surprise and delight, my credit card company did not immediately reject the order. Everything went through, and shipping was quite fast! In less than a week, the box was at my door, in good condition and ready for assembly.</p>
<p><img src="../images/synth/Box.jpg" alt="A box containing the synth kits" loading="lazy"></p>
<p><img src="../images/synth/Boxes.jpg" alt="Little boxes containing each module kit" loading="lazy"></p>
<h2 id="what-youll-need-besides-the-kits">What You’ll Need, Besides the Kits</h2>
<p>Although the mks x es.EDU kits are “complete” insofar as they include printed cirucit boards, components, panels, and (optionally), an enclosure, you will need additional tools and materials to assemble them.</p>
<ul>
<li>A temperature controlled soldering station</li>
<li>Solder, desoldering braid</li>
<li>Some tools: Wire cutters, a good wire stripper, helping hands</li>
<li>A multimeter</li>
<li>An oscilliscope of some sort. Audio signals are pretty low frequency, however, and you’re only going to need a single channel for the most part, so feel free to go cheap in this deparment if you don’t already have one. Really, any barely functional scope is OK.</li>
<li>A breadboard. This is really important. If you’re not going to bother breadboarding the circuits first, then I would question if the mks x es.EDU kits are really right for you. <em>The whole point</em> of these kits is that you should breadboard first to understand what each components is doing, not just solder stuff to a pre-printed board.</li>
<li>Some means of audio amplification – whatever you would normally plug a synth into is fine, although you might want to choose some cheap headphones or something which you won’t get too sad about if you inadvertently destroy it with a strong signal.</li>
</ul>
<p>Also, there will be additional parts and materials necessary for some of the individual kits; I’ll discuss those in later posts.</p>
<p>In the <a href="2023-02-23-building-a-synthesizer-glossary.html">glossary</a> I will explain some of the specific terminology and technology common in the modular synthesis world. If you already know about all of that, you might want to skip ahead to <a href="2023-02-21-building-a-synthesizer-1.html">The mki x es.EDU DIY System</a></p>
<h2 id="resources">Resources</h2>
<p>Each post in this series will include a “Resources” section with some useful links to places to learn more about the material discussed within the post.</p>
<h3 id="print">Print</h3>
<ul>
<li><a href="https://synthcube.com/cart/ray-wilson-make-analogue-synthesizers">Make: Analog Synthesizers</a> A book by Ray Wilson, from O’Reilly’s now-shuttered Make: division. Worthwhile and still in print. Roughly half this book is a general introduction to electronics with a particular focus on analog synthesis, and the other half is instructions for and explanation of one particular DIY synth, the “<a href="http://musicfromouterspace.com/analogsynth_new/NOISETOASTER/NOISETOASTER.php">Noise Toaster</a>” synthesizer. At about 160 pages, this is a considerably more approachable read than…</li>
<li><em>Musical Applications of Microprocessors,</em> by Hal Wilson. Now out of print, and used copies are rather expensive. A great book, though, and worth keeping an eye out for. 800+ pages, covers analog and digital synths (ca. 1985), and despite the title, is as much about discrete components as microprocessors.</li>
<li><a href="https://files.northcoastsynthesis.com/msk-013.pdf">MSK 013 Middle Path Voltage-Controlled Oscillator</a> The instructions for a VCO by North Coast Synthesis, which is an example of a “differently excellent” bit of manual writing.</li>
</ul>
<h3 id="videos">Videos</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=8JuYLLpZzBs">Introducing the mki x es.edu DIY VCO kit</a> by Moritz Klein (7:23)</li>
<li><a href="https://www.youtube.com/watch?v=XpMZoR3fgd0">Complete beginner’s guide to using a breadboard</a> by Moritz Klein (21:22). The first half is an intro to using a breadboard, which isn’t very complicated, but they tend to come without instructions, so it’s still useful. The second half begins to introduce audio circuits, and might be helpful even if you already know how to use a breadboard.</li>
<li><a href="https://www.youtube.com/watch?v=vy5F__2bnlo">My collaboration with Erica Synths | Sunday Livestream</a> by Moritz Klein (1:36:49) Useful, but the length is a bit of a trial and most of the technical material is covered elsewhere. Watch this one if you want to hear the “behind the scenes story” of bringing the kits to market.</li>
<li><a href="https://www.youtube.com/playlist?list=PLOunECWxELQS5bMdWo9VhmZtsCjhjYNcV">ECE4450 Analog Circuits for Music Synthesis</a> by Aaron Lanterman (32 video playlist). These are lectures for an undergrad course at Georgia Tech which presumes some exposure to analog circuits and analysis. If you’ve had first year EE then you should be good. This is a long series of videos, and it references still other videos. I really, really like these videos; there’s nothing else out there that I’ve seen which compares in both the sophistication of the material taught as well as the specific focus on vintage synthesis. However, the length alone is kind of imposing, so these videos are more of a “if you just can’t get enough” option.</li>
</ul>

<div class="info">
    
    Tags: <a href="/tags/synthesis.html">synthesis</a>, <a href="/tags/diy.html">diy</a>, <a href="/tags/electrical%20engineering.html">electrical engineering</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>How I Made a Giant Mistake with Terraform (and How Azure Made It Worse)</title>
    <link href="http://www.craigstuntz.com/posts/2021-07-08-how-i-made-a-giant-mistake-with-terraform.html" />
    <id>http://www.craigstuntz.com/posts/2021-07-08-how-i-made-a-giant-mistake-with-terraform.html</id>
    <published>2021-07-08T00:00:00Z</published>
    <updated>2021-07-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on July  8, 2021
    
</div>

<p>I made a huge mistake a while back, resulting in all preproduction environments being deleted from a client’s Azure subscription. That’s actually not so bad – we use terraform to create the environments, so we could just run the terraform again to put them back. And better preproduction than production, right? But Azure quirks and client rules made this considerably worse.</p>
<p>This was complicated by the fact that I used the terraform to provision two different Azure subscriptions, with entirely different security policies. In “Subscription A” which I provisioned first, I could do more or less anything. “Subscription B” which I provisioned second was far more locked down. Of note, in Subscription B I couldn’t create an Azure Resource Group. Instead, I had to open a ticket with the client’s cloud team.</p>
<p>I had terraform like:</p>
<pre class="terraform"><code>resource &quot;azurerm_resource_group&quot; &quot;resource_group&quot; {
    name     = var.resource_group_name
    location = var.resource_group_location
}</code></pre>
<p>…which ran fine on Subscription A, but which I could not run at all on Subscription B. There were actually two different resource groups in Subscription B, one for preproduction and one for production.</p>
<p>Good terraform code is idempotent, which means that if you run it in an environment which already matches the script you supply, it won’t make any changes at all; it will just report that everything is up to date.</p>
<h2 id="terraform-state">Terraform State</h2>
<p>In a perfect world, you would never have to think about <a href="https://www.terraform.io/docs/language/state/index.html">terraform state</a>. You would just run terraform and it would provision resources and everything would be lovely. Alas, this is not that perfect world, and anyone who maintains terraform must think about state when they get up in the morning, when they’re working, and when they’re lying in bed at night.</p>
<p>The terraform docs say:</p>
<blockquote>
<p>This state is used by Terraform to map real world resources to your configuration, keep track of metadata, and to improve performance for large infrastructures.</p>
</blockquote>
<p>This should set off alarm bells, because that’s three entirely separate problems which got shoehorned into one hairy feature. I may have more to say about this at a later time, but let’s get back to the mistake I made.</p>
<p>Because I couldn’t create the Azure Resource Group in Subscription B, I ran the following command:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="ex">terraform</span> import module_name.azurerm_resource_group.resource_group <span class="op">&lt;</span>id_of_resource_group<span class="op">&gt;</span></code></pre></div>
<p>…for the preproduction resource group. That linked (in the terraform state file for the preproduction environment) the Resource Group in my terraform script with the Resource Group created by the client’s team in Azure.</p>
<p><em>Months later,</em> while creating the production resources, I ran into the same issue (can’t create resource groups at all in Subscription B). Since Subscription B was the one we’d be taking to production, I decided that a better reflection of the actual environment would be to change the resource group to a data provider, so I edited the terraform script quoted above to read:</p>
<pre class="terraform"><code>data &quot;azurerm_resource_group&quot; &quot;resource_group&quot; {
    name     = var.resource_group_name
    location = var.resource_group_location
}</code></pre>
<p>(I’ve just changed the word <code>resource</code> to <code>data</code>. In terraform, a <code>resource</code> is something that terraform might create, whereas a <code>data</code> is something that terraform will <em>never</em> create; it must already exist in the environment. But you might need to refer to properties of the <code>data</code> so it will appear in your script.)</p>
<p>I ran the terraform and of course it worked fine and I didn’t need to do the <code>terraform import</code>.</p>
<h2 id="terraform-plan-and-apply">Terraform <code>plan</code> and <code>apply</code></h2>
<p>If you’ve worked with terraform before you’ll know that there are two different things you can do when creating resources:</p>
<ul>
<li><code>terraform plan</code> shows what the tool will do, (more or less) nondestructively</li>
<li><code>terraform apply</code> destructively makes changes to your environment</li>
</ul>
<p>The usual strategy is to use <code>terraform plan</code> to make sure that what terraform proposes to do is correct and then <code>terraform apply</code> to destructively make changes. But another quirk of Subscription B is that for complicated reasons that I won’t get into here, I can’t run terraform interactively through the command line. Instead I have to push the script to GitHub and run it with Azure DevOps. That’s why Subscription A exists; I can test my changes out using the CLI there and rapidly iterate, and then push to GitHub and run terraform on Subscription B with ADO.</p>
<p>I say “the usual strategy” because occasionally when I’m provisioning multiple environments – say, development, uat, production, etc. – I will cut corners and do a <code>terraform plan</code> on just one of these environments and then <code>terraform apply</code> on all of the others.</p>
<h2 id="destroying-preproduction">Destroying Preproduction</h2>
<p>Now you have all of the information to see the mistake that I made. Here’s what happened:</p>
<ol style="list-style-type: decimal">
<li>I was working on creating the production environment, which didn’t exist at all. That’s when I made the edit referenced above, from <code>resource</code> to <code>data</code></li>
<li>I ran <code>terraform plan</code> and then <code>terraform apply</code> on production and everything worked fine. No changes were made at all.</li>
<li>A while later, I wanted to add additional resources, so I added them and then ran <code>terraform apply</code> on preproduction.</li>
<li>Terraform removed the entire preproduction environment</li>
</ol>
<p>Wait, what?!?</p>
<p>Well, I had <em>removed</em> a terraform <code>resource</code> for the Azure Resource Group. Yes, I replaced it with a <code>data</code>, but terraform still counts that as removing it. So terraform deleted the resource group. And Azure counts deleting the resource group as meaning delete the resource group <em>and everything in it.</em> Apparently, and to my great surprise, even though I didn’t have permission to <em>create</em> Azure Resource Groups in Subscription B, I did have permission to <em>delete</em> them.</p>
<p>So that’s bad, but surely I could just run terraform again to recreate the resources I removed, right? Well, almost. Creating Azure Resource Groups means opening a support ticket with the client, but that’s not a problem. The bigger problem is that Azure SQL Server database backups are stored… in the resource group.</p>
<h2 id="a-terrible-horrible-no-good-very-bad-azure-feature">A Terrible, Horrible, No-Good, Very Bad Azure Feature</h2>
<p>Now I know that readers of this blog are smart, competent engineers, so you probably are very careful about where you store your backups! Well, Azure SQL Server does back up your databases, automatically, so full marks for that, but if you inadvertently destroy a SQL Server it takes the backups with it! Also, there is, as far as I can tell, no option in the Portal or terraform to put the backups elsewhere. (This is in contrast to running an <a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/features-comparison">Azure SQL Managed Instance, which is… something else entirely</a>.)</p>
<p>Of course recreating the database is an option; we create database metadata using migrations, and it’s just preproduction, so we can pretty much create the data that we need, but now the restore plan looks like:</p>
<ol style="list-style-type: decimal">
<li>Open ticket to get Azure Resource Group created</li>
<li>Run terraform to create rest of Azure resources</li>
<li>Run DB migrations to create DB schema</li>
<li>Run lengthy import process to pull MBs of data out of Salesforce and other sources</li>
</ol>
<p>If this was production, however, we would have a much harder problem on our hands. The only places where data created by users of the system exists are in the DB and backups of same.</p>
<p>In the end, what we did was <em>not</em> do any of the above and instead immediately raise a ticket with Azure Support, who were able to grab the resources from “somewhere” (I guess when you delete a resource in Azure, it’s still on a disk somewhere, for a while), and we got our database and backups back. Not every resource could be correctly restored, but the database was the only one I cared about.</p>
<p>So in the end we got our environments back, and it “only” took a couple of days of work, what with Azure and client support tickets. But a weekend intervened, so we had several days of downtime in preproduction, and this of course had a large impact on the testers and other teams who depend on our software.</p>
<h2 id="some-lessons-learned">Some Lessons Learned</h2>
<p>Just in case I’ve left any ambiguity above, the root cause in this incident was me. I ran the <code>terraform apply</code>, and to whatever extent the “real” problem was “I shouldn’t have been able to do that,” it was probably on me for not checking that there was, in fact, a lock on the Azure Resource Group.</p>
<p>One of the things I did right in this incident was to <em>immediately</em> report the problem. I posted an “I just made a giant mistake” message before the delete was even complete, before we had even considered the database. This is of course just polite, but moving quickly turned out to be the key to recovering a deleted Azure resource. Another key to recovering the deleted resource was not creating new resources with the same name before opening the ticket with Microsoft, so I give myself credit for getting Microsoft support involved before just “trying stuff” to see if I could restore it on my own before we realized that the database backups were an issue.</p>
<p>I guess I knew that there was the possibility that I would inadvertently destroy something when I skipped a plan, but the sheer magnitude of carnage resulting from a <em>one word change</em> in terraform was surprising.</p>
<p>As far as SQL Server backups go, it’s obviously totally unacceptable that a backup could be blown away so easily. I don’t have a better option to suggest besides putting a lock on the Resource Group.</p>

<div class="info">
    
    Tags: <a href="/tags/azure.html">azure</a>, <a href="/tags/devops.html">devops</a>, <a href="/tags/mistakes.html">mistakes</a>, <a href="/tags/sql%20server.html">sql server</a>, <a href="/tags/terraform.html">terraform</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Presentation by D. Richard Hipp, "SQLite: The World's Most Widely Used Database Engine"</title>
    <link href="http://www.craigstuntz.com/posts/2020-11-30-richard-hipp.html" />
    <id>http://www.craigstuntz.com/posts/2020-11-30-richard-hipp.html</id>
    <published>2020-11-30T00:00:00Z</published>
    <updated>2020-11-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on November 30, 2020
    
</div>

<p>On 10 October 2017, I attended a presentation by D. Richard Hipp, called, “SQLite: The World’s Most Widely Used Database Engine,” and live-tweeted it. Twitter broke the thread in several distinct ways, so the following is a lightly edited version of my Twitter thread.</p>
<h2 id="sqlite">SQLite</h2>
<p>He pronounces it “ess queue ell ite,” FWIW.</p>
<p><img class="autowidth" src="/images/SQLite.jpg" alt="D. Richard Hipp with title slide for SQLite presentation." width="2048" height="1536" loading="lazy" /></p>
<p>“If you’re not writing SQL statements which look like this, you’re not doing it right.”</p>
<p><img class="autowidth" src="/images/SQLite-complicated-query.jpeg" "A fairly complex SQL statement with subqueries, function calls, and COALESCEs" width="2048" height="1536" loading="lazy"></p>
<p>By this, I think he meant: SQLite is a SQL DB engine, not a document DB. It has features such as JOINs, functions, and subqueries which you should use in your code.</p>
<h2 id="history-and-impact">History and Impact</h2>
<p>2000-05-29: “It’s just a database. How hard can that be? I’ll write my own.” Posted it online, then got support calls from Motorola.</p>
<p>He thinks there are more than one trillion SQLite databases in use. More copies of the library than there are people on earth. There might be more copies of zlib, but not certain. Probably no other program is more common.</p>
<p>Why was SQLite successful? Single file library, open file format, backwards compatible back to 2004, reading data from SQLite is faster than reading individual files on filesystem.</p>
<h2 id="team-and-coding-practices">Team and Coding Practices</h2>
<p>SQLite uses DO-178B development process for safety critical software. Tests analyze ASM to verify all branches taken in both directions.</p>
<p>Two people work full time on SQLite. “We change the code aggressively.” He contrasts this with Postgres, which is stable due to low code churn (he says).</p>
<h2 id="using-it-in-your-code">Using It In Your Code</h2>
<p>Which DB should I use? (Ed. note: Not Oracle.)</p>
<p><img class="autowidth" src="/images/SQLite-storage-decision.jpeg" alt="SQLite storage decision checklist. Choose SQLite if you're not doing remote data, big data, concurrent writers, or gazillion transactions/sec." width="2048" height="1536" loading="lazy"></p>
<p>“90% of data storage problems don’t have any of these constraints. Where people make mistakes is storing locally as JSON/XML.” (Paraphrased)</p>
<p><img class="autowidth" src="/images/SQLite-data-container.jpeg" alt="SQLite data container. 1. Gather data from the cloud. 2. Transmit SQLite database files to the device. 3. Use locally" width="2048" height="1536" loading="lazy"></p>
<h2 id="future-plans">Future Plans</h2>
<p>Next release of SQLite will use F2FS (if in use) for atomic writes, doubling write performance.</p>
<p>Using EXPLAIN keyword, you can see the bytecode for your query</p>
<p><img class="autowidth" src="/images/SQLite-explain.jpeg" alt="EXPLAIN output for simple SQL query" width="2048" height="1536" loading="lazy"></p>
<p>“Because the query planner is an AI, we’re never finished with it.”</p>
<p>SQLite 4 will retire the B-tree storage engine and replace it with an LSM (log structured merge) storage engine engine.</p>
<p>Pros and cons of LSM:</p>
<p><img class="autowidth" src="/images/SQLite-LSM.jpeg" alt="Pros and cons of LSM. Good: Faster writes, reduced write amplification, linear writes, less SSD wear. Bad: Slower reads, background merge process, more space on disk, greater complexity" width="2048" height="1536" loading="lazy"></p>
<p>Performance of LSM was bad enough that they abandoned SQLite 4 project. v5 will use some new, maybe NVRAM optimized storage, not sure which. As of 30 November 2020, the current production verion of SQLite was <a href="https://www.sqlite.org/releaselog/3_33_0.html">3.33.0</a>.</p>
<p>SQLite supports B-tree indices only in order to keep the library small</p>
<h2 id="he-doesnt-like-git">He Doesn’t Like Git</h2>
<p>Things that are hard to compute in git because it uses key/value DAG instead of relations</p>
<p><img class="autowidth" src="/images/SQLite-git-bad.jpeg" alt="Some things Git Does Not Compute Because Of Its Use Of Key/Value" width="2048" height="1536" loading="lazy"></p>
<p>SQLite sources are managed using <a href="https://www.fossil-scm.org/">Fossil</a>, a distributed version control system that was specifically designed and written to support SQLite development</p>
<h2 id="q-a">Q &amp; A</h2>
<p>On formal methods, “I’m interested in anything that will make the code better. Bring as many tools to the table as you can.”</p>
<p>They’re starting to use mutation testing. Not using formal verification per se at the moment.</p>
<p>(Ed. note: Fuzz testing has been a productive way to find bugs in SQLite and is now <a href="https://www.sqlite.org/testing.html">an official part of the SQLite test plan</a>.)</p>
<p>Any design regrets? “One of the most important things a project manager can do is to say no.” Features added for clients he regrets: Shared cache and auto vacuum. “I have to support these through 2050!”</p>
<p>After the talk I asked him about his reaction to this John Regehr quote:</p>
<blockquote>
<p>“Unfortunately, C and C++ are mostly taught the old way, as if programming in them isn’t like walking in a minefield.”</p>
</blockquote>
<p>I wasn’t taking notes at this point so I can’t do justice to his answer but he said he knows John and has spoken w/ him, but never in person. He said they disagree about what to do about undefined behavior, although it sounded to me more like a disagreement on tactics than strategy.</p>
<p>I’d really enjoy hearing a panel with these two some day.</p>

<div class="info">
    
    Tags: <a href="/tags/SQLite.html">SQLite</a>, <a href="/tags/Richard%20Hipp.html">Richard Hipp</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Telling the Truth About Security</title>
    <link href="http://www.craigstuntz.com/posts/2020-08-03-telling-the-truth-about-security.html" />
    <id>http://www.craigstuntz.com/posts/2020-08-03-telling-the-truth-about-security.html</id>
    <published>2020-08-03T00:00:00Z</published>
    <updated>2020-08-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on August  3, 2020
    
</div>

<p>In James Morrow’s wonderful novella <em>City of Truth,</em> people in the city of Veritas have been conditioned to tell the full, unvarnished truth in every situation. They drive a “Renaut Adequate,” send their children to Camp Ditch-the-Kids, and always pay their bar tabs. The warning on cigarette packs reads:</p>
<blockquote>
<p><font style="font-variant: small-caps">WARNING: The Surgeon General’s crusade against this product may distract you from the myriad ways your govenrment fails to protect your health.</font></p>
</blockquote>
<p>I think about this often in the context of security messaging for people who use the software we produce. Real warnings on cigarette packs are one of the few examples of honesty in packaging we have today, but that’s not good enough for Veritas.</p>
<p>What is the right amount of honesty for messaging to the end user? Clearly <em>dis</em>honesty is bad, but so is a dissertation-length discussion of encryption parameters. If our assessment of real-world threats creates an excessive paranoia in end users, convincing them that <abbr title="Advanced Persistent Threat">APT</abbr> crews are coming for their kids, then our “honesty” becomes dishonest. I would assert, without a lot of evidence to back me up, that the right amount of honesty is that which enables the user to make good decisions about their behaviors, <em>within the application’s threat model.</em></p>
<p>That “within the application’s threat model” hanging off the end is what allows me to say that things which are true but distracting should not be included in security messaging.</p>
<h2 id="want-to-start-an-email-service">Want to Start an Email Service?</h2>
<p>I was thinking about this in the context of some <a href="https://twitter.com/i/status/1286700216742293505">tweets from Nathan Buuck. He wrote</a>:</p>
<blockquote>
<p>I’m curious to sign up for an email service as a new user and see what they warn you about as a presumably-new email user. I imagine most services - especially those that want to keep you for ad revenue - don’t give you a full explainer for fear of scaring you off. Ethically, though, every new email user should be given a briefing about how:</p>
<ul>
<li>you can’t trust anything you see in email at face value</li>
<li>your digital identity will grow to depend existentially on this email account</li>
</ul>
<p>And the litany of other concerns.<br/> Failing to prepare new users by not illustrating to them the potential scope of the risks <em>we know</em> they may face is just negligence.</p>
</blockquote>
<p>Well, you can tell that these are good questions because there’s a ton to unpack here.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>One thing that’s interesting to me here is the difference between Nathan’s two bullet points. To whatever extent the first point is correct, it means that the security of the <em>email</em> service has failed. Whereas to whatever extent the second point is correct, it represents a failure of security that’s the fault of nearly everyone <em>but</em> the email service. I’ll explain more below.</p>
<p>Because the risk of compromise through email is so high, we’re at a real risk of erring on the side of over-explanation, especially if we try to explain it all at once, but even if we don’t. If we consider only email, only security, and only the items which all users need to understand,<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> that’s at least:</p>
<ul>
<li>Basic scam detection — if it looks too good to be true…</li>
<li>Phishing, credential harvesting</li>
<li>Spearphishing, and why not to wire money to your boss</li>
<li>Basic identity/password hygiene, multi-factor identification</li>
<li>Physical security — don’t go meet strangers you’ve corresponded with</li>
<li>Dark patterns in advertising</li>
<li>Common user misbehavior, such as chain emails</li>
</ul>
<p>This is a lot for a user who signs up in order to stay in touch with their kids to take in! But the security scope creep will start immediately, partially because of the actions of criminals, but partially also because of the decisions of the security community.</p>
<h3 id="when-should-we-explain-this">When Should We Explain This?</h3>
<p>I don’t think that during sign-up is the correct place for explaining what you can and can’t trust in an email. The right time to explain phishing is 30 seconds before you are phished. It’s not always clear when this will happen, but I think it’s fair to say that during the sign-up process is perhaps the <em>least</em> likely time that the user will be phished in email. Putting this in onboarding feels like a legal cop-out to me: “We told them; what else could we do?”</p>
<p>But there is a responsibility to explain this stuff at some point! The old model of an email client blindly displaying whatever you send it doesn’t reflect the reality of a hostile world. Today, for example, Gmail will tell you if someone you correspond with suddenly begins emailing you from a new address. Maybe it’s someone trying to spearphish you, or maybe it’s just JIRA. At any rate, such emails deserve extra scrutiny! Putting this on the suspicious email itself is a much better solution than putting an explanation on the screen during signup.</p>
<h3 id="what-do-we-ask-users-to-trust">What Do We Ask Users to Trust?</h3>
<p>Since Nathan’s question asks what email services display to new users, I’d like to reframe this point in terms of the service provider: What does an email service ask its users to (dis)trust?</p>
<p>When Nathan says, “Failing to prepare new users by not illustrating to them the potential scope of the risks we know they may face is just negligence,” he’s not wrong, but we have to be really careful about sentences like this, because they include risks both inside and outside the threat model of the service. For example, training is the <em>wrong approach</em> to the problem of “attachments in email might harm your computer.” The right approach is to make clicking on attachments in email safe, not relying on end users to make good security decisions 100% of the time.</p>
<p>Indeed, nearly every company has people in HR who must click on PDF files attached to emails from random strangers on the Internet as an essential function of their job! We can’t tell people “Hey, don’t do your job; it’s not safe.” We have to give them an email client where this mundane action is safe.</p>
<h4 id="example-phishing-simulations">Example: Phishing Simulations</h4>
<p>Implicit in the notion of what an email service should disclose to / train users about is the presumption that we even know what to tell them at all. Unfortunately, we cannot take this as a given.</p>
<p>Phishing simulation has become fairly big business these days. It makes sense, as phishing is often the attacker’s first foothold into an enterprise. It’s important to have clear goals for the phishing simulation, since, like a red team test, the attackers always win.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> If you conduct a phishing simulation and nobody is fooled, then your simulation was unlike an actual phish, which will probably result in users being deceived.</p>
<p>Therefore, if the purpose of your simulation is to determine if anyone will fall for a good phish, I can save you the money: Yes, they will. If you fire everyone who falls for the first phish, like some perverse form of stack ranking, then you’ll have more people who are taken in by the second. However, phishing simulations can be useful if you have constructive goals in mind.</p>
<blockquote>
<p>“Lets be honest with each other. Phishing simulations aren’t just about training. They are also popular because they produce a metric (e.g. ‘Last week 60% of people fell for our phish, this week only 35% fell for it’). It appears really positive and encouraging, since it appears to show that something is being achieved, but unless you’re careful you might just end up wasting time and effort.”<br/> <a href="https://www.ncsc.gov.uk/blog-post/trouble-phishing"><em>“The Trouble with Phishing,”</em></a> Kate R, National Cyber Security Centre, UK</p>
</blockquote>
<p>Here are some constructive goals we might set for a phishing simulation:</p>
<ul>
<li>Train users to send phishes to the <abbr title="Security Operations Center">SOC</abbr>, giving the blue team a heads up on what’s in the field</li>
<li>Train users how to respond if they click on a phish and enter their credentials. If we can train users to call the SOC immediately instead of keeping quiet and hoping nobody notices, that’s a big win!</li>
<li>Increase the level of end user skepticism about what’s in email. I feel a little weird about including this, since, as I said, the phishers will always win. But we can certainly make them win less if we treat this as proactive training, not punishment for people who click on a phish.</li>
</ul>
<p>Unfortunately, if you look at the promotion materials for phishing simulation software, they’re all graphs of “number of employees caught,” which suggests that security management is pursuing metrics instead of better security. This attitude is noticed by employees, who start to regard the security team as people who are out to “catch” them, because they are. If we train employees to distrust the security team, we have badly failied at our job.</p>
<p>This is a good example of why technical or legal controls are not enough to protect users of an email service. The training we give must be informed by human-centered, compassionate support for people. Running it by the corporate equivalent of an <a href="https://www.irb.pitt.edu/content/chapter-2-purpose-human-research-protection-office-and-institutional-review-board">IRB</a> would not be a bad idea. And we must repeat this introspection with every control on our list.</p>
<h3 id="your-identity-source-of-truth">Your Identity Source of Truth</h3>
<p>To Nathan’s second point, “your digital identity will grow to depend existentially on this email account,” well, that’s correct, but it’s interesting to note that this is not because of some technical factor which makes email the unique thing that is the only possible source of truth for identity, but rather because, in a nutshell, the entire industry has decided that email — and by “email” we mean Gmail, mostly — does security well, and therefore the source of truth for identity should be Gmail.</p>
<p>As evidence for this, consider that it was pretty common to use <a href="https://mashable.com/2017/06/16/twitter-two-factor-authentication-major-problem/">SMS as a source of truth for identity</a> until it became obvious that <a href="https://www.engadget.com/2020-01-12-princeton-study-sim-swap.html">SMS could not be trusted</a>. Services are moving away from SMS, and Gmail is the last thing standing. Even sites supporting MFA — a minority! — often use email as a portion of their password reset process.</p>
<p>This would be less of a security choke point if people always made a unique email address for each web account they created, but almost nobody does this. So if your email is compromised, Nathan is correct, the bad actors get every account you have, including retirement accounts (your life savings, uninsured), potentially embarassing accounts, etc.</p>
<p>It will be interesting to see if WebAuthn, which doesn’t require an email address and appears to be secure, has similar uptake in the future. It will also be interesting to see if the uptake of less secure email services will result in people moving away from email as the identity source of truth. The <a href="https://en.wikipedia.org/wiki/Yahoo!_data_breaches">Yahoo! breach</a> did not push developers away, though, probably because the other options were all worse.</p>
<h3 id="do-i-want-to-start-an-email-service-hell-no">Do I Want to Start an Email Service? Hell, No!</h3>
<p>One thing is very clear to me: When you start an email service, to whatever extent you’re successful and your service becomes popular, you are painting a giant target on your back and on the backs of your users. Your security team — meaning not just your blue team but also the people who work with human computer interaction in the security space — must be very good, the best people in the industry. If you don’t want to take that on, you have no business starting an email service.</p>
<p>One hip email service brags that they “engaged two separate, external security firms to review all our application security.” That simply doesn’t cut it; it’s laughably inadequate for the task at hand. How would hiring an external team protect users from a phishing attack? The problem of email security is just much larger than technical controls.</p>
<h2 id="leaving-veritas">Leaving Veritas</h2>
<p>In <em>City of Truth,</em> the protagonist, Jack Sperry, falls in with a group of (literally) underground rebels who sometimes lie. He meets his roommate, Ira Temple.</p>
<blockquote>
<p>Ira, I learned, was a typical dissembler-in-training. He hated Veritas. He had to get out. Anything, he argued, even dishonesty, was superior to what he called his native city’s confusion of the empirical with the true.</p>
</blockquote>
<p>I hope by now it’s clear why I don’t think it’s sufficient to “tell the truth” about security; we must have a more nuanced conversation which is not just at sign-up and continues throughout the user’s use of the service. It must always be informed by the amount of information a typical user can take in at any one point in time. “Confusion of the empirical with the true” describes a lot of mistakes we make in software.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I do think advertising is a red herring here. The two points in the tweets, while really worth discussing, don’t change with or without ads. Indeed, a very well-known email service with ads also does a better than average job identifying what you can or cannot trust in email. I think ads are orthogonal to these questions.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>By “only email” I mean to exclude things like encryption which are security-related but not directly relevant to basic email use. By “only security” I’m excluding things like how to compose and send emails, which are really important for new users, but out of scope for this article. By “only the items which all users need to understand” I’m excluding things such as nation state attacks, which are security related and relevant to email, but not something that the average user needs to think about.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Nobody, and I mean nobody, is immune to phishing. The organizer of the DEFCON Social Engineering Village recently <a href="https://youtu.be/9e6k_PtEXdM?t=566">shared his story of getting phished</a>.<a href="#fnref3">↩</a></p></li>
</ol>
</div>

<div class="info">
    
    Tags: <a href="/tags/human%20factors.html">human factors</a>, <a href="/tags/James%20Morrow.html">James Morrow</a>, <a href="/tags/security.html">security</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Equality Is Hard</title>
    <link href="http://www.craigstuntz.com/posts/2020-03-09-equality-is-hard.html" />
    <id>http://www.craigstuntz.com/posts/2020-03-09-equality-is-hard.html</id>
    <published>2020-03-09T00:00:00Z</published>
    <updated>2020-03-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on March  9, 2020
    
</div>

<p>As the joke goes, there are two hard problems in computer science: cache invalidation and naming things.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> But I’d suggest there’s a much harder problem, namely, <code>=</code>. Did you miss it? The equals sign, <code>=</code>, is small, but I’m going to argue that the use and misuse of equals is at the root of a large number of problems in software engineering.</p>
<h2 id="how-equality-should-work">How Equality Should Work</h2>
<p>I am going to show how equality in programming languages is often broken. But before I can do that, I have to talk about how it <em>should</em> work, and it turns out that’s not simple! When we talk about how equality “should work,” we have to say what this means in a certain context, because it turns out there are lots of different ways that equality <em>can</em> work, and many of them are valid in different contexts.</p>
<blockquote>
<p><em>The heart and soul of mathematics consists of the fact that the “same” objects can be presented to us in different ways.</em> <br/> -Barry Mazur, <a href="http://people.math.harvard.edu/~mazur/preprints/when_is_one.pdf">When is one thing equal to some other thing</a></p>
</blockquote>
<h3 id="laws">Laws</h3>
<p>Now I said that we can have different definitions of equality in different contexts, but despite this there are some things which should always be true. These are the laws of equality.</p>
<p>Equals is a <strong>binary relation</strong><a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> that is:</p>
<ul>
<li><strong>Reflexive</strong>, so that <code>a = a</code> for all values of <code>a</code>.</li>
<li><strong>Symmetric</strong>, so that <code>a = b</code> implies <code>b = a</code> and vice versa.</li>
<li><strong>Transitive</strong>, so that if <code>a = b</code> and <code>b = c</code> then <code>a = c</code></li>
</ul>
<p>In the programming world, we need to add a law, because programmers do weird things sometimes:</p>
<p>Equals must be:</p>
<ul>
<li><strong>Consistent</strong>, so that if <code>a = b</code> and no field changes on <code>a</code> or <code>b</code>, <code>a = b</code> will still be true if we check it later on.</li>
</ul>
<p>The above seems simple enough, although popular programming languages manage to screw up even those trivial rules. But there are more concerns about equality which are harder to state quite so concisely.</p>
<h3 id="structural-equality">Structural Equality</h3>
<p>One difference in how programming languages implement equality is structural equality and reference equality.</p>
<p><strong>Structural equality</strong> asks if two references are <em>the same value.</em> This is the default in F#:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> MyString = { SomeField : <span class="dt">string</span> }
<span class="kw">let</span>  a = { SomeField = <span class="st">&quot;Some value&quot;</span> }
<span class="kw">let</span>  b = { SomeField = <span class="st">&quot;Some value&quot;</span> }
<span class="kw">if</span> a = b <span class="kw">then</span> //<span class="co"> returns true, enters &quot;then&quot; block</span></code></pre></div>
<p>This is <em>not</em> true in C#; C# uses <strong>reference equality</strong>. Reference equality asks if the two objects being compared are the same object. In other words, does the variable point at the same area of memory? A reference to two different blocks of memory will be unequal even if their contents are identical:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="kw">class</span> MyString {
    <span class="kw">private</span> <span class="kw">readonly</span> <span class="dt">string</span> someField;
    <span class="kw">public</span> <span class="dt">string</span> SomeField { <span class="kw">get</span>; }
    <span class="kw">public</span> <span class="fu">MyString</span>(<span class="dt">string</span> someField) =&gt; <span class="kw">this</span>.<span class="fu">someField</span> = someField;
}
<span class="dt">var</span> a = <span class="kw">new</span> <span class="fu">MyString</span>(<span class="st">&quot;Some value&quot;</span>);
<span class="dt">var</span> b = <span class="kw">new</span> <span class="fu">MyString</span>(<span class="st">&quot;Some value&quot;</span>);
<span class="kw">if</span> (a == b) { <span class="co">// returns false, does not enter block</span></code></pre></div>
<p>Other languages let you choose. Scheme, for example, provides <code>equal?</code> to check structural equality and <code>eq?</code> to check reference equality. Kotlin provides <code>==</code> for structural equailty and <code>===</code> for reference equality (don’t confuse these with JavaScript’s <code>==</code> and <code>===</code> operators which are… something else entirely).</p>
<p>When does it make sense to use structural equality in your programs? In the absence of mutation (changing the values of variables), nearly always! Most programming languages that I’m aware of do structural comparisons on value types such as <code>integers</code>. Well, except Java, which has confused generations of programmers with an <code>int</code> value type which does a structural comparison and an <code>Integer</code> reference type which, well, the best thing you can say is <a href="https://stackoverflow.com/questions/1700081/why-is-128-128-false-but-127-127-is-true-when-comparing-integer-wrappers-in-ja">don’t use == on Integer</a>. Python <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">has similar issues with <code>is</code></a>.</p>
<p>Structural comparison of reference types such as objects makes sense as well. Consider a unit test, where you want to check that the object returned is equal to the value you expected. In a language with structural equality, this is trivial:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp">[&lt;TestMethod&gt;]
<span class="kw">let</span> ``The result <span class="kw">of</span> the calculation is the expected value``() = 
    <span class="kw">let</span> expected = { SomeField = <span class="st">&quot;Some value&quot;</span>; SomeOtherField = <span class="dv">15</span>; StillAnotherField = <span class="kw">true</span>; ... }
    <span class="kw">let</span> actual = calculate()
    Assert<span class="kw">.</span>AreEqual(expected, actual)</code></pre></div>
<p>When a language does not have structural equality from the outset, developers will try to build it <em>ad hoc,</em> and you end up with <a href="https://github.com/nunit/nunit/blob/4e10f475d88fec980f080461a64e6fc4b1e54b2b/src/NUnitFramework/framework/Constraints/NUnitEqualityComparer.cs#L133">this horror show</a>, which is now <a href="https://github.com/nunit/nunit/issues/1249">permanently part of the NUnit framework</a>.</p>
<h3 id="reference-equality">Reference Equality</h3>
<p>But as I hinted above, there are certainly cases where structural equality does not make sense. One example is with languages which support mutation of variables, which is most of them.<a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> When you can change the value of a variable, it probably does not make sense to say that variable is equal to some other variable, <em>in general.</em> Sure, you can say they’re (structurally) equal <em>as of a moment in time,</em> such as in last line of a unit test, but you can’t generally imply that they’re the same. This is a kind of subtle point, so let’s look at an example.</p>
<p>Let’s say I have an object which represents a person. In F#, with structural equality, I can write:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> Person = { Name : <span class="dt">string</span>; Age : integer; Offspring : Person list }</code></pre></div>
<p>Now I have two friends, Jane and Sue. Both have a son named John, who is 15. They’re <em>different</em> people, but the sons have the same name and age. No problem!</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> jane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }
<span class="kw">let</span> sue  = { Name = <span class="st">&quot;Sue&quot;</span>;  Age = <span class="dv">35</span>; Offspring = [ { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }</code></pre></div>
<p>I could also have written this:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> john = { Name = <span class="st">&quot;John&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] };
<span class="kw">let</span> jane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ john ] }
<span class="kw">let</span> sue  = { Name = <span class="st">&quot;Sue&quot;</span>;  Age = <span class="dv">35</span>; Offspring = [ john ] }</code></pre></div>
<p>The behavior of these two blocks is precisely the same. I can’t distinguish the two sons, even though I know they’re different people. That’s OK! If I needed to distinguish them, I could add a hash of their DNA or something to my <code>Person</code> type. But if I just need to know their name and age, it doesn’t matter if I can distinguish the two objects or not, because the values are the same, no matter how you slice it.</p>
<p>Imagine Jane’s son changes his name to Pat. F# doesn’t support mutating the values of variables, so I need to make a new <code>Person</code> instance for John <em>and Jane:</em></p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> newJane = { Name = <span class="st">&quot;Jane&quot;</span>; Age = <span class="dv">47</span>; Offspring = [ { Name = <span class="st">&quot;Pat&quot;</span>; Age = <span class="dv">15</span>; Offspring = [] } ] }</code></pre></div>
<p>It seems weird to have a new variable, <code>newJane</code>, but in practice it doesn’t create a problem. The code above is fine. Now let’s try this in C#, a language which is mutable by default:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">var</span> john = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>);
<span class="dt">var</span> jane = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Jane&quot;</span>, <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { john });
<span class="dt">var</span> sue  = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Sue&quot;</span>,  <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { john });</code></pre></div>
<p>Well, this code is clearly incorrect: If Jane’s son changes his name to “Pat”, I can change the reference directly:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs">jane.<span class="fu">Offspring</span>.<span class="fu">First</span>().<span class="fu">Name</span> = <span class="st">&quot;Pat&quot;</span>;</code></pre></div>
<p>But I’ll find that Sue’s son’s name has changed as well! Therefore, even though the two sons had the same values at the start, before he changed his name, they <em>were not equal!</em> I should have written:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">var</span> jane = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Jane&quot;</span>, <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>) });
<span class="dt">var</span> sue  = <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;Sue&quot;</span>,  <span class="dv">15</span>, <span class="kw">new</span> List&lt;Person&gt; { <span class="kw">new</span> <span class="fu">Person</span>(<span class="st">&quot;John&quot;</span>, <span class="dv">15</span>, <span class="kw">null</span>) });</code></pre></div>
<p>…so that Jane and Sue’s offspring were reference <em>unequal</em> to each other. So reference equality is a sensible default in a language which supports mutation.</p>
<p>Another case where reference equality makes sense is when you know it’s going to give the same result as structural equality anyway. There is a certain performance overhead for testing structural equality, which is reasonable if you <em>actually need to test structural equality.</em> But if, for example, you create a large number of objects which you know are all different structually, it doesn’t make sense to pay the overhead of testing structural equality when you know that testing reference equality alone would give the same result.</p>
<h3 id="equivalent-representations">Equivalent Representations</h3>
<p><em>In the real numbers,</em> <a href="https://en.wikipedia.org/wiki/0.999...">.999… (repeating infinitely) equals 1</a>. Note that the “real numbers” here are distinct from the “Real” type in your programming language. Real numbers in math are infinite, and real numbers in your programming language are finite. So there is no notion of .999… in your programming language, but that’s OK, because you can just use 1, which is the same value.</p>
<p>This is, essentially, a choice that mathematicians made when formulating the real number system. If one <a href="https://betterexplained.com/articles/a-friendly-chat-about-whether-0-999-1/">adds other objects, such as infinitessimals, to the system</a>, then .999… and 1 are not equivalent.</p>
<blockquote>
<p><em>However, it is by no means an arbitrary convention, because not adopting it forces one either to invent strange new objects or to abandon some of the familiar rules of arithmetic.</em> <br/> -Timothy Gowers, <em>Mathematics: A Very Short Introduction</em><a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></p>
</blockquote>
<p>Similarly, in the rational numbers, 1/2 and 2/4 represent the same value.</p>
<p>Do not confuse these equivalances with the “loose” equivalence operator <code>==</code> found in JavaScript and PHP. Unlike those operators, these equivalences follow the laws of equality. It is important to realize that equal objects can be represented differently.</p>
<p>In IEEE-754 floats, <code>-0 = 0</code>.</p>
<h3 id="intensional-vs.extensional-equality">Intensional vs. Extensional Equality</h3>
<p>When is some function equal to some other function? Most programming languages will happily do a reference <code>=</code> comparison, and I suppose that’s fine, but what would a structural equality comparison of a function even mean? Well, if we could use reflection to look into the implementation of the function, and see if it does the same thing? But what is “the same?” Would it have to have the same variable names? Are a quicksort and a merge sort “the same function?”</p>
<p>Cutting to the chase, we say that functions are extensionally equal if they return the same outputs for the same inputs (regardless of internal implementation), and intensionally equal if their internal definition is the same. Of course, this is context-dependent. There may be a context where I need a constant time function and another context where the speed of the function doesn’t matter. The important point is I need to have some context for equality and use it to compare the two functions.</p>
<p>I don’t know of any programming language which even attempts to do anything beyond reference equality for functions. But it’s easy to come up with examples where it would be useful! (An optimizer which removes duplicate code, e.g.) You’re on your own if you need this, but I have to say that not shipping an equals comparison is preferable to shipping one that’s broken.</p>
<h3 id="equality-vs.assignment">Equality vs. Assignment</h3>
<p>One of the first lessons we learn when becoming a programmer is that there are two different concepts which we both call “equals.” One is assignment, the other is testing equality. In JavaScript, these look like:</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">const</span> aValue <span class="op">=</span> <span class="at">someFunction</span>()<span class="op">;</span> <span class="co">// Assignment</span>
<span class="cf">if</span> (aValue <span class="op">===</span> <span class="dv">3</span>) <span class="op">{</span>            <span class="co">// Test for equality</span></code></pre></div>
<p>These are fundamentally different. Comparison returns a boolean; assignment, in an <a href="https://en.wikipedia.org/wiki/Expression-oriented_programming_language">expression-oriented</a> language such as Ruby, returns the value assigned.</p>
<p>So we can write Ruby code like this:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby">a = b = c = <span class="dv">3</span></code></pre></div>
<p>Which does indeed assign 3 to the variables <code>a</code>, <code>b</code>, and <code>c</code>. Don’t try it with a reference type, though; it probably won’t do what you want!<a href="#fn5" class="footnoteRef" id="fnref5"><sup>5</sup></a></p>
<p>In a <a href="https://fsharpforfunandprofit.com/posts/expressions-vs-statements/">non-expression-oriented language like C#</a>, assignment doesn’t return anything.</p>
<p>In math, we use the equals operator for both assignment and testing equality:</p>
<div class="sourceCode"><pre class="sourceCode tex"><code class="sourceCode latex">if aValue = 3 ... 
where aValue = someFunction()</code></pre></div>
<p>(And <code>=</code> is sometimes used for other relations in math, such as <a href="http://mathworld.wolfram.com/Congruence.html">congruence</a>. As with all things in math, context matters; you have to carefully consider what <code>=</code> might mean in a certain paper or book.)</p>
<p>Why does math not require two separate operators whereas programming languages do? You can tell from context which one is intended, and not <em>all</em> programming languages require different operators. F#, for example, uses <code>=</code> for both assignment and testing equality. Despite overloading <code>=</code>, assignment and testing equality are <em>different</em> operations.</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">let</span> aValue = someFunction(); //<span class="co"> Assignment</span>
<span class="kw">if</span> aValue = <span class="dv">3</span> <span class="kw">then</span>           //<span class="co"> Test for equality</span></code></pre></div>
<p>The choice of syntax is partially due to heritage: F# is based on ML, which is based on math, and JavaScript syntax is based on Java -&gt; C -&gt; Algol -&gt; FORTRAN.</p>
<p>FORTRAN had to compile on <a href="https://en.wikipedia.org/wiki/Fortran#/media/File:IBM_704_mainframe.gif">machines</a> where distinguishing these two cases from code syntax would be genuinely challenging, so it made sense to have two different operators. Then C took this “feature” to a high art, allowing code like:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> aValue = someFunction(); <span class="co">// Assignment</span>
<span class="cf">if</span> (aValue = <span class="dv">3</span>) {            <span class="co">// Also assignment!</span></code></pre></div>
<p>This code, for those without previous C experience, overwrites <code>aValue</code> with <code>3</code> and then, since the expression <code>aValue = 3</code> is equal to 3, the <code>if</code> test returns <code>TRUE</code> and execution continues inside the <code>if</code> block. This is frequently an error, leading many C programmers to reverse the values inside an <code>if</code> block out of habit to avoid making the mistake:</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> aValue = someFunction(); <span class="co">// Assignment</span>
<span class="cf">if</span> (<span class="dv">3</span> == aValue) {           <span class="co">// Test for equality</span>

<span class="co">// [...]</span>

<span class="cf">if</span> (<span class="dv">3</span> = aValue) {            <span class="co">// Syntax error: Cannot assign aValue to 3.</span></code></pre></div>
<h2 id="how-equality-should-not-work">How Equality Should Not Work</h2>
<p>I hope I’ve shown by now that equality is <em>not</em> simple, and that the “correct” implementation of equality can vary depending upon context. Despite that, programming languages often get the simple parts wrong! Very often, this is caused by the <em>combination</em> of equality with other language features, such as implicit type conversion.</p>
<h3 id="common-mistake-equality-isnt-reflexive">Common Mistake: Equality Isn’t Reflexive</h3>
<p>Recall that the reflexive law of equals requires all values to be equal to themselves, <code>a = a</code>.</p>
<p>In .NET, if you call <code>Object.ReferenceEquals()</code> on a value type, the arguments are <em>separately</em> boxed before the method runs, so it returns false even if you pass <em>the same instance:</em></p>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.referenceequals?view=netframework-4.8">From the docs</a>:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs"><span class="dt">int</span> int1 = <span class="dv">3</span>;
Console.<span class="fu">WriteLine</span>(Object.<span class="fu">ReferenceEquals</span>(int1, int1)); <span class="co">// Prints False</span></code></pre></div>
<p>This means it is not necessarily true that <code>a = a</code> in any .NET language, so the reflexive law is broken.</p>
<p>In SQL, <code>NULL</code> is not equal to itself, so the expression <code>NULL = NULL</code> (or, more probably, <code>SOME_EXPRESSION = SOME_OTHER_EXPRESSION</code> when both of them might be <code>null</code>) will return <code>NULL</code>, which is falsy. This leads to messes like:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">WHERE</span> (SOME_EXPRESSION = SOME_OTHER_EXPRESSION)
  <span class="kw">OR</span> (SOME_EXPRESSION <span class="kw">IS</span> <span class="kw">NULL</span> <span class="kw">AND</span> SOME_OTHER_EXPRESSION <span class="kw">IS</span> <span class="kw">NULL</span>)</code></pre></div>
<p>Or, more likely, just a bug where the developer forgot about the special rules for <code>NULL</code>. If your DB server’s SQL dialect supports <a href="https://modern-sql.com/feature/is-distinct-from"><code>IS NOT DISTINCT FROM</code></a> then this does what <code>=</code> should do. (Or should I say it does <code>NOT</code> not do what <code>=</code> should do?) Otherwise you’ll just have to live with SQL like the above. The best fix is to make your columns non-nullable when possible.</p>
<p>This is <a href="https://stackoverflow.com/a/1573715/7714">also true of IEEE-754 floats</a>; the standard states that <code>NaN != NaN</code>. A different explanation than the one given in the link for this is that “NaN” represents some unspecified “non-number” result, not necessarily the <em>same</em> unspecified non-number result as that of a different calculation, so it’s incorrect to compare them. For example, <code>square_root(-2)</code> and <code>infinity/infinity</code> are both <code>NaN</code>, but they’re clearly not the same! Similar explanations are given for SQL’s <code>NULL</code> sometimes. One problem with this is that it makes the term very overloaded: Is <code>NaN</code> and <code>NULL</code> an <em>unknown</em> or <em>imprecise</em> value or the known <em>absence</em> of a value?</p>
<p>One way of handling such situations, which do not occur in routine floating point calculations, would be a <a href="https://en.wikipedia.org/wiki/Union_type">union type</a>. In F#, one could write:</p>
<div class="sourceCode"><pre class="sourceCode fsharp"><code class="sourceCode fsharp"><span class="kw">type</span> MaybeFloat = 
    | Float          <span class="kw">of</span> <span class="dt">float</span>
    | Imaginary      <span class="kw">of</span> real: <span class="dt">float</span> * imaginary: <span class="dt">float</span>
    | Indeterminate
    | //<span class="co">/ ...    </span></code></pre></div>
<p>… and then you could handle these terms appropriately in calculations which needed them. Use a <a href="https://en.wikipedia.org/wiki/NaN#Signaling_NaN"><em>signaling</em> NaN</a> to throw an exception in calculations which you don’t expect will have NaNs at all.</p>
<p>Rust offers the <a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html">Eq</a> and <a href="https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq</a> traits. Not implementing <code>Eq</code> is supposed to be a signal that <code>==</code> is not reflexive, and floating point types in Rust do not implement it. But if you don’t implement <code>Eq</code>, you can still call <code>==</code> in your code. Implementing <code>Eq</code> allows your object to be used as a key in a hash map and possibly results in behavior changes in other places as well.</p>
<p>But there are even more significant problems with <code>=</code> and floats.</p>
<h3 id="common-mistake-equals-is-too-precise">Common Mistake: Equals Is <em>Too</em> Precise</h3>
<p>I guess many developers are familiar with the problem of comparing IEEE-754 floating point numbers, which are the “float” or “double” implementation for most programming languages. <code>10 * (0.1)</code> does not equal <code>1</code>, because “0.1” is actually equal to <code>0.100000001490116119384765625</code> or <code>0.1000000000000000055511151231257827021181583404541015625</code>. If you’re not familar with this issue, you can <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">go read about it</a>, but the point is that it’s rarely safe to do an <code>==</code> comparison on a floating point number at all! You have to ask yourself which digits are significant and compare accordingly.</p>
<p>(Worse, the float type backs other types, such as <code>TDateTime</code> in <a href="http://docs.embarcadero.com/products/rad_studio/delphiAndcpp2009/HelpUpdate2/EN/html/delphivclwin32/System_TDateTime.html">some languages</a>, so even in cases where equality comparisons might <em>make sense,</em> they don’t necessarily <em>work.</em>)</p>
<p>The correct method of comparing floating point numbers is to see if they’re “close,” and <a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">what “close” means varies depending on context</a>. It’s not something you can cram into a <code>==</code> operator. If you find yourself doing this a lot (say, once), you might consider using a different data type, such as a fixed precision decimal number.</p>
<p>So why do programming languages offer <code>==</code> comparisons on a type when they can’t support it? Well, because they offer <code>==</code> on <em>every</em> type, it works on most of them, and they just shrug about the rest and chastize programmers for not knowing which language feature they should not use.</p>
<p>Not every programming language, mind you. Standard ML doesn’t offer <code>=</code> comparisons on reals. It’s a compiler error if you try!</p>
<p>The <a href="http://sml-family.org/Basis/real.html">implementation notes</a> state:</p>
<blockquote>
<p>Deciding if <code>real</code> should be an equality type, and if so, what should equality mean, was also problematic. IEEE specifies that the sign of zeros be ignored in comparisons, and that equality evaluate to false if either argument is NaN. These constraints are disturbing to the SML programmer. The former implies that <code>0 = ~0</code> is true while <code>r/0 = r/~0</code><a href="#fn6" class="footnoteRef" id="fnref6"><sup>6</sup></a> is false. The latter implies such anomalies as <code>r = r</code> is false, or that, for a <code>ref cell rr</code>, we could have <code>rr = rr</code> but not have <code>!rr = !rr</code>. We accepted the unsigned comparison of zeros, but felt that the reflexive property of equality, structural equality, and the equivalence of <code>&lt;&gt;</code> and <code>not o =</code> ought to be preserved. Additional complications led to the decision to not have <code>real</code> be an equality type.</p>
</blockquote>
<p>By blocking <code>=</code> for reals, SML forces the developer to think about what kind of comparison they actually need, which is a great feature, I think!</p>
<p>F# offers the <code>[&lt;NoEquality&gt;]</code> attribute to mark custom types where <code>=</code> should not be used. Pity they didn’t mark the <code>float</code> type with it!</p>
<h3 id="common-mistake-equals-isnt">Common Mistake: “Equals” Isn’t</h3>
<p>PHP has two separate operators, <code>==</code> and <code>===</code>. The <a href="https://www.php.net/manual/en/language.operators.comparison.php">documentation for <code>==</code></a>, which is named “Equal,” states, “<strong>TRUE</strong> if <code>$a</code> is equal to <code>$b</code> after type juggling.” Unfortunately, this means that the <code>==</code> operator is unreliable:</p>
<div class="sourceCode"><pre class="sourceCode php"><code class="sourceCode php"><span class="kw">&lt;?php</span>
  <span class="fu">var_dump</span><span class="ot">(</span><span class="st">&quot;608E-4234&quot;</span> == <span class="st">&quot;272E-3063&quot;</span><span class="ot">);</span> <span class="co">// true</span>
<span class="kw">?&gt;</span></code></pre></div>
<p>Although we’re comparing <em>strings</em> here, PHP sees that they can be converted to a number, so it does. The numbers turn out to be very small (the first argument, for example, is 608 * 10<sup>-4234</sup>), and, as we’ve already discussed, comparing floating point numbers is hard. Casting both of these to a <code>float(0)</code> results in rounding them to equal values, so the comparison returns true.</p>
<p>Note this is different than the behavior of JavaScript, which also has similar (but not the same!) <code>==</code> and <code>===</code> operators; JavaScript would see that both sides are strings and return false for this comparison.</p>
<p>Fortunately, PHP has the <code>===</code> (“Identical”) operator, which behaves correctly in this case. I would say never use <code>==</code>, but <code>==</code> <a href="https://www.php.net/manual/en/language.oop5.object-comparison.php">does a structural comparison on objects</a>, which might be something you want! Instead, I’ll say: Use extreme caution with <code>==</code>, because it’s broken on primitive types.</p>
<h3 id="common-mistake-equality-isnt-symmetric">Common Mistake: Equality Isn’t Symmetric</h3>
<p>If you override <code>.equals()</code> in Java, it is <em>your responsibility</em> to ensure that the laws of equality hold!</p>
<p>It is <em>very easy</em> to implement a comparison which is not symmetric, that is, <code>a.equals(b) != b.equals(a)</code>, if you’re not paying attention.</p>
<p>Even if we remove null from the picture (because it would be a <code>NullPointerException</code> in one case and the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">contract for <code>.equals()</code> allows you to do this</a>), if you subtype a class and override <code>.equals()</code> then you had better be careful!</p>
<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="at">@Override</span>
<span class="kw">public</span> <span class="dt">boolean</span> <span class="fu">equals</span>(<span class="bu">Object</span> o) {
    <span class="kw">if</span> (<span class="kw">this</span> == o)
        <span class="kw">return</span> <span class="kw">true</span>;
    <span class="kw">if</span> (o == <span class="kw">null</span>)
        <span class="kw">return</span> <span class="kw">false</span>;
    <span class="kw">if</span> (!o.<span class="fu">getClass</span>().<span class="fu">isAssignableFrom</span>(<span class="fu">getClass</span>())) <span class="co">// Danger! This is a mistake!</span>
        <span class="kw">return</span> <span class="kw">false</span>;
    ThisClass thisClass = (ThisClass) o;
    <span class="co">// field comparison</span>
    <span class="co">// ...</span>
}</code></pre></div>
<p>If <code>ThisClass</code> and <code>ASubtypeOfThisClass</code> both override <code>.equals()</code> with code like this, <code>a.equals(b)</code> may not equal <code>b.equals(a)</code>! The correct comparison would be:</p>
<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java">    <span class="kw">if</span> (<span class="fu">getClass</span>() != o.<span class="fu">getClass</span>())
        <span class="kw">return</span> <span class="kw">false</span>;</code></pre></div>
<p>This is not just my opinion; the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">contract for <code>Object.equals()</code> requires it</a>.</p>
<h3 id="common-mistake-equality-isnt-transitive">Common Mistake: Equality Isn’t Transitive</h3>
<p>Remember one of the laws for equals comparisons is that they should be transitive; if <code>a = b</code> and <code>b = c</code> then <code>a = c</code>. Unfortunately, when coupled with type coersion, languages often fail at this.</p>
<p>In JavaScript,</p>
<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&#39;&#39;</span> <span class="op">==</span> <span class="dv">0</span><span class="op">;</span>      <span class="co">// true</span>
<span class="dv">0</span>  <span class="op">==</span> <span class="st">&#39;0&#39;</span><span class="op">;</span>    <span class="co">// true</span>
<span class="st">&#39;&#39;</span> <span class="op">==</span> <span class="st">&#39;0&#39;</span><span class="op">;</span>    <span class="co">// false!</span></code></pre></div>
<p>Never use <code>==</code> in JavaScript. Use <code>===</code> instead.</p>
<h3 id="common-mistake-equality-is-inconsistent">Common Mistake: Equality Is Inconsistent</h3>
<p>In Kotlin, <code>==</code> returns different values depending on the type of the variable, even for the same variable:</p>
<div class="sourceCode"><pre class="sourceCode kotlin"><code class="sourceCode kotlin"><span class="kw">fun</span> <span class="fu">equalsFloat</span>(<span class="va">a</span>: <span class="dt">Float</span>, <span class="va">b</span>: <span class="dt">Float</span>) {
  println(a == b);
}

<span class="kw">fun</span> <span class="fu">equalsAny</span>(<span class="va">a</span>: <span class="dt">Any</span>, <span class="va">b</span>: <span class="dt">Any</span>) {
  println(a == b);
}

<span class="kw">fun</span> <span class="fu">main</span>(<span class="va">args</span>: <span class="dt">Array</span>&lt;<span class="va">String</span>&gt;) {
  <span class="kw">val</span> <span class="va">a</span> = <span class="kw">Float</span>.NaN;
  <span class="kw">val</span> <span class="va">b</span> = <span class="kw">Float</span>.NaN;
  equalsFloat(a, b);
  equalsAny(a, b);
}
<span class="co">// prints false, true</span></code></pre></div>
<p>This is <a href="https://kotlinlang.org/docs/reference/basic-types.html#floating-point-numbers-comparison">an unfortunate combination of language features</a> which results in some pretty unintuitive behavior.</p>
<h3 id="common-mistake-using-reference-equality-when-structural-equality-is-needed">Common Mistake: Using Reference Equality When Structural Equality Is Needed</h3>
<p>Consider the following <a href="https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-with-mstest">MSTest</a> unit test in C#:</p>
<div class="sourceCode"><pre class="sourceCode cs"><code class="sourceCode cs">[TestMethod] 
<span class="kw">public</span> <span class="dt">void</span> <span class="fu">Calculation_Is_Correct</span>() {
    <span class="dt">var</span> expected = <span class="kw">new</span> <span class="fu">Result</span>(SOME_EXPECTED_VALUE);

    <span class="dt">var</span> actual = _service.<span class="fu">DoCalculation</span>(SOME_INPUT);

    Assert.<span class="fu">AreEqual</span>(expected, actual);
}</code></pre></div>
<p>Does this work? We can’t tell! <code>Assert.AreEqual()</code> will eventually call <code>Object.Equals()</code>, which does a reference comparison by default. Unless you’ve overridden <code>Result.Equals()</code> to do a structural comparison instead, the unit test is broken. The contract for <code>Object.Equals()</code> says that you <a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.equals?view=netframework-4.8">should not override it at all if your type is mutable</a>, which is reasonable in general but probably not what you want for a unit test. (This is because <code>.Equals()</code> is expected to match <code>.GetHashCode()</code>, and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.object.gethashcode?view=netframework-4.8">the hash code is expected not to change</a> over the lifetime of the object.) The closest thing the .NET framework has to a “guaranteed structural” comparison for reference types is <code>IEquatable&lt;T&gt;</code>, which <code>Assert.AreEqual()</code> doesn’t use, even if it’s implemented.</p>
<p>It’s <a href="https://github.com/nunit/nunit/issues/1249">worse if you use NUnit</a>.</p>
<p>(Java’s <code>Object.hashCode</code>, by contrast, is <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()">allowed to change when the object’s fields change</a>.)</p>
<h2 id="how-to-think-about-equality">How to Think About Equality</h2>
<p>Wow, I’ve now written 4000 words about the <code>=</code> operator and I’m not finished yet! That seems, well, out of proportion to the size of the operator. Why is this so complicated? Two reasons, basically:</p>
<ul>
<li><em>Inessential complexity:</em> Our programming languages <em>don’t serve us well</em> with equivalence comparisons. They are often entirely broken, and even when they’re not, they don’t make it obvious when, for example, they’ll do a structural comparison vs a reference comparison.</li>
<li><em>Essential complexity:</em> Equivalence is often <em>genuinely complicated</em> in places where it is needed, such as when comparing floating point numbers, and it gets even harder in edge cases like comparing functions.</li>
</ul>
<p>Another way to divide this up is “stuff which should be fixed by programming language <em>implementors</em>” (the “inessential complexity” above) and “stuff which must be resolved by programming language <em>users.</em></p>
<h3 id="what-programming-languages-should-do">What Programming Languages Should Do</h3>
<p>With regards to inessential complexity, the situation we find ourselves in today, with mostly-broken implementations of equivalence in nearly every mainstream programming language is just a crying shame. This “simple operation which must obey certain laws” is <em>exactly</em> the sort of thing we depend on programming languages to get right! But it appears to me that only SML has really considered having a lawful equality in both its semantics and its runtime/standard library, and SML isn’t entirely mainstream.</p>
<p>First, programming languages should make it simple to create types where equality comparison is disabled because it makes no sense (like <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/core.noequalityattribute-class-%5bfsharp%5d"><code>[&lt;NoEquality&gt;]</code> in F#</a>) and they should use this feature in their standard library where needed, such as on floating point types.</p>
<p>Programming languages must make the difference between structural equality and reference equality crystal clear. There should never be a case where it’s unclear what you’re doing. Most programming lanuages overload <code>==</code> to mean both structural equality or reference equality depending on the type of reference, most commonly value types vs. reference types, and this is guaranteed to confuse developers.</p>
<p>Kotlin comes very close to getting this right with its <code>===</code> for reference equality and <code>==</code> for structural equality, although for some reason it translates <code>===</code> to <code>==</code> for value types, instead of just failing to compile for that. The goal should be reducing developer confusion. You want the developer to see <code>===</code> and think “reference equality,” not “more equals signs is better.”</p>
<p>F# mostly gets this right by <a href="https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/languageprimitives.physicalequality%5B&#39;t%5D-function-%5Bfsharp%5D">making reference equality very hard to use</a>.</p>
<p>I don’t know of any language which has mutable by default variables which handles structural comparsions in a non-confusing way. But it’s easy to imagine what it might look like! Have a reference equals and structural equals operator which is only supported in contexts where the language can reasonably expect to support it. For example, if .NET did not do the boxing funkiness with <code>Object.ReferenceEquals</code> and value types (it could just fail to compile if you tried) and had something akin to <code>IEquatable&lt;T&gt;</code> which would allow you to use a structural comparison operator, that seems like a pretty good solution to making it clear to developers which is which.</p>
<h3 id="what-programmers-should-do">What Programmers Should Do</h3>
<p>One might look at the length of this post and say, “Wow, equality is really complicated! I’m going to give up coding and become a soybean farmer.” But this post is as long as it is mostly because so many languages do equality <em>wrong.</em> Doing equality correctly does requre some thought, but not <em>too much</em> though. Certainly less than soybean farming.</p>
<p>When doing an equality comparison on an existing type, stop and ask yourself:</p>
<ul>
<li>Does it make sense to do an equality comparison at all here?</li>
<li>If so, does a structural or a reference comparison make sense?</li>
<li>What support does my programming language provide for the appropriate style of comparison?</li>
<li>Does my programming language implement equality correctly for this comparison?</li>
</ul>
<p>You can ask yourself similar questions when designing a custom type:</p>
<ul>
<li>Should my type support equality comparisons at all? Or do they need a more complicated comparison, as with a float?</li>
<li>Will my type be mutable? How might that affect equality?</li>
<li>Would a reference comparison, a structural comparison, or both make sense?</li>
</ul>
<p>If your type is mutable, consider if you can change it to be immutable. You can do this even in a language which is mutable by default! Beyond giving you more options with respect to equality comparisons, there are many other benefits of an immutable architecture as well. The C# Roslyn compiler, which uses immutable data structures throughout, is a great example of this:</p>
<blockquote>
<p><em>The third attribute of syntax trees is that they are immutable and thread-safe. This means that after a tree is obtained, it is a snapshot of the current state of the code, and never changes. This allows multiple users to interact with the same syntax tree at the same time in different threads without locking or duplication. Because the trees are immutable and no modifications can be made directly to a tree, factory methods help create and modify syntax trees by creating additional snapshots of the tree. The trees are efficient in the way they reuse underlying nodes, so a new version can be rebuilt fast and with little extra memory.</em><br/> from the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/work-with-syntax">.NET Compiler Platform SDK docs</a></p>
</blockquote>
<h2 id="credits">Credits</h2>
<p>Thank you to Paul Blasucci, Jeremy Loy, Bud Marrical, Michael Perry, Skyler Tweedie, and Thomas Wheeler for reading drafts of this article and giving me feedback.</p>
<h3 id="references">References</h3>
<p>This post was inspired by Barry Mazur’s wonderful math paper, “<a href="http://people.math.harvard.edu/~mazur/preprints/when_is_one.pdf">When is one thing equal to some other thing?</a>” which uses category theory to answer the question for math.</p>
<p>Thanks to Tommy Hall, who drew my attention to <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.9999">this 1993 paper</a>, which, discusses many of the issues covered in this post and proposes a solution for Common Lisp.</p>
<p>Simon Ochsenreither has a nice series on problems with equality and fixing Haskell. <a href="https://soc.me/languages/equality-and-identity-part1">Overview</a>, <a href="https://soc.me/languages/equality-and-identity-part2.html">Problems</a>, <a href="https://soc.me/languages/equality-and-identity-part3.html">Solution</a>, <a href="https://soc.me/languages/equality-and-identity-part4">Fixing Haskell</a>, <a href="https://soc.me/languages/equality-and-identity-part5.html">Implementation in Dora</a>.</p>
<p>Hillel Wayne pointed me to this great essay, <a href="https://www.bkent.net/Doc/semobjid.htm">“The Semantics of Object Identity.”</a></p>
<p>Brandon Bloom provided a link to the paper <a href="https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45576.pdf">“The Left Hand of Equals”</a> which “takes a reflexive journey through fifty years of identity and equality in object-oriented languages, and ends somewhere we did not expect: a ‘left-handed’ equality relying on trust and grace.”</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This is <a href="https://skeptics.stackexchange.com/questions/19836/has-phil-karlton-ever-said-there-are-only-two-hard-things-in-computer-science">probably attributable to Phil Karlson</a><a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>A “binary relation” deserves a little bit of explanation, but this gets into a little math, so feel free to ignore if it doesn’t help you. We have two sets <em>A</em> and <em>B</em>. (They might be the same set.) For any two members <em>a</em> and <em>b</em> of the sets, we want a rule which says whether they’re in the relation or not. So if <em>A</em> and <em>B</em> are the integers, the ordered pair <em>(1, 2)</em> is not in the relation “is equal to” but the ordered pair <em>(5, 5)</em> is in the relation. A relation is a subset of the cross product of the sets.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Phil Hagelberg <a href="https://lobste.rs/s/vpfpyk/equality_is_hard#c_hxunkw">tells me</a> the problem isn’t mutation of <em>variables</em> but <em>data structures,</em> which is a subtle but fair distinction.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>Gowers, Timothy, <em>Mathematics: A Very Short Introduction</em>, p. 60<a href="#fnref4">↩</a></p></li>
<li id="fn5"><p><code>a = b = c = []</code> in Ruby assigns <em>the same reference</em> to <code>a</code>, <code>b</code>, and <code>c</code>. So if you mutate <code>a</code>, you’ll mutate <code>b</code> and <code>c</code> at the same time. That’s probably not what you wanted, otherwise what would be the point of having three separate references? In contrast, with a value type like <code>Integer</code>, mutating <code>a</code> will <em>not</em> change the value of <code>b</code> or <code>c</code>.<a href="#fnref5">↩</a></p></li>
<li id="fn6"><p><code>~</code> is the SML operator for unary negation, so <code>~0</code> should be read as “negative zero.”<a href="#fnref6">↩</a></p></li>
</ol>
</div>

<div class="info">
    
    Tags: <a href="/tags/mathematics.html">mathematics</a>, <a href="/tags/computer%20science.html">computer science</a>, <a href="/tags/plt.html">plt</a>, <a href="/tags/equality.html">equality</a>
    
</div>
]]></summary>
</entry>
<entry>
    <title>Gray Failure</title>
    <link href="http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html" />
    <id>http://www.craigstuntz.com/posts/2020-01-29-gray-failure.html</id>
    <published>2020-01-29T00:00:00Z</published>
    <updated>2020-01-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    Posted on January 29, 2020
    
</div>

<p><a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">Gray Failure: The Achilles’ Heel of Cloud-Scale Systems</a> is a delightful paper because it’s easy to read, the findings are directly useful in my day job, and because it reframes an important issue in a way which is not intuitive at first but simplifies it and leads to solutions. </p>
<p>All software fails from time to time, but evidence indicates that cloud scale services fail differently than other software which might be less distributed. The authors characterize this failure mode as “gray failure,” in which “component failures whose manifestations are fairly subtle, and thus defy quick and definitive detection.” This is in contrast to hard failure when a service simply stops working altogether. Examples include “severe performance degradation, random packet loss, flaky I/O, memory thrashing, capacity pressure, and non-fatal exceptions.”</p>
<p>So why is this distinction useful? Failure is failure, right? The authors maintain that, in contrast to hard failures, gray failure tends to increase very rapidly with scale. For example, consider network switches: “increasing redundancy can counter-intuitively hurtavailability because the more core switches there are, the more likelyat least one of them will experience a gray failure.” </p>
<p>This tells us several things. First, a gray failure might be a leading indicator of (in other words, it precedes) a hard failure. Second, the usual response to hard failure, restarting the service or host, may not help at all (as with the case of running out of disk space) and will probably make things much worse by introducing latency into the system. Third, horizontal scaling may make the problem considerably worse, as an increasing number of service hosts increases correspondingly the chances of a gray failure in any of them. </p>
<p>How to detect gray failures is one of the most important contributions of the paper. Gray failures are characterized by “differential observability.” This means that the consumer of a service, say, an application, will observe a different result than another entity which is looking at the service, such as a health check. So the health check might just be checking to see if the service is up, but might not notice that it’s running very slowly due to having consumed most of the hard drive space. The paper notes, “many gray failure cases we investigated are only detectable in a distributed fashion because each individual component has only a partial view of the entire system.” The authors advise detecting gray failure by “closing the observation gaps between the system and the apps it services.” In particular, they recommend “moving from singular failure detection (e.g., with heartbeats) to multidimensional health monitoring.” </p>
<p>If any of the above is interesting to you, I’d recommend reading <a href="https://www.cs.jhu.edu/~huang/paper/grayfailure-hotos17.pdf">the whole paper</a>. It’s short (only five pages), and it’s packed with useful information.</p>

<div class="info">
    
    Tags: <a href="/tags/failure.html">failure</a>, <a href="/tags/cloud.html">cloud</a>, <a href="/tags/papers.html">papers</a>
    
</div>
]]></summary>
</entry>

</feed>
